{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11","program":"/home/lcornelius/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","chrono","/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"time\"","-C","metadata=53bdf62621ef632f","-C","extra-filename=-53bdf62621ef632f","--out-dir","/home/lcornelius/jarvis-core/target/rls/debug/deps","-L","dependency=/home/lcornelius/jarvis-core/target/rls/debug/deps","--extern","num_integer=/home/lcornelius/jarvis-core/target/rls/debug/deps/libnum_integer-a72e4a4da18cd134.rmeta","--extern","num_traits=/home/lcornelius/jarvis-core/target/rls/debug/deps/libnum_traits-4171d115be531265.rmeta","--extern","time=/home/lcornelius/jarvis-core/target/rls/debug/deps/libtime-c88a58f9f6c632c5.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lcornelius/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/lcornelius/jarvis-core/target/rls/debug/deps/libchrono-53bdf62621ef632f.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[13509862881707787020,10788171571677596173]},"crate_root":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src","external_crates":[{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14135787011897669350,5791574643103715305]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3594110764027786524,15122039410936556636]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[14028025445241469238,13012682745941878982]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[12123326574028408324,16920506198485796719]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15148674381298141310,1450136519419524411]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18252964414373398583,60826006407090718]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[14754928624085830232,3245395341931729835]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4207355511276114283,18313804595498328771]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3940578739564172265,12852659344087513462]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[13576511082848259044,12239835797966459289]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[17355273499131644875,15078049452799821944]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[7238308414641497718,227752195385183108]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16723595887887413683,11776960315488202736]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[12134636118194132697,7377681945845796235]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":15,"id":{"name":"time","disambiguator":[14629430239414961752,8796780593957019036]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":16,"id":{"name":"libc","disambiguator":[17298067992439049467,9715494853714843371]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":17,"id":{"name":"num_integer","disambiguator":[10645522566475746413,2513479084186183487]}},{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","num":18,"id":{"name":"num_traits","disambiguator":[13497847014896019909,3767732221483792217]}}],"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":76,"byte_end":42591,"line_start":4,"line_end":1125,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":15,"index":295},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19484,"byte_end":19492,"line_start":438,"line_end":438,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1445},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19553,"byte_end":19558,"line_start":441,"line_end":441,"column_start":35,"column_end":40},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":95},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19595,"byte_end":19603,"line_start":442,"line_end":442,"column_start":36,"column_end":44},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19605,"byte_end":19611,"line_start":442,"line_end":442,"column_start":46,"column_end":52},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19613,"byte_end":19624,"line_start":442,"line_end":442,"column_start":54,"column_end":65},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1452},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19626,"byte_end":19629,"line_start":442,"line_end":442,"column_start":67,"column_end":70},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19631,"byte_end":19642,"line_start":442,"line_end":442,"column_start":72,"column_end":83},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1508},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19679,"byte_end":19688,"line_start":443,"line_end":443,"column_start":35,"column_end":44},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1531},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19690,"byte_end":19697,"line_start":443,"line_end":443,"column_start":46,"column_end":53},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1551},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19699,"byte_end":19708,"line_start":443,"line_end":443,"column_start":55,"column_end":64},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1576},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19710,"byte_end":19723,"line_start":443,"line_end":443,"column_start":66,"column_end":79},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1601},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19741,"byte_end":19745,"line_start":444,"line_end":444,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":706},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19747,"byte_end":19755,"line_start":444,"line_end":444,"column_start":22,"column_end":30},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":707},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19757,"byte_end":19765,"line_start":444,"line_end":444,"column_start":32,"column_end":40},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1632},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19787,"byte_end":19795,"line_start":445,"line_end":445,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1608},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19797,"byte_end":19810,"line_start":445,"line_end":445,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1842},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19912,"byte_end":19922,"line_start":448,"line_end":448,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1048},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19924,"byte_end":19935,"line_start":448,"line_end":448,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1343},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19953,"byte_end":19964,"line_start":449,"line_end":449,"column_start":16,"column_end":27},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1366},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20099,"byte_end":20107,"line_start":453,"line_end":453,"column_start":32,"column_end":40},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1385},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20109,"byte_end":20117,"line_start":453,"line_end":453,"column_start":42,"column_end":50},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1942},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20119,"byte_end":20126,"line_start":453,"line_end":453,"column_start":52,"column_end":59},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":95},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20160,"byte_end":20168,"line_start":454,"line_end":454,"column_start":32,"column_end":40},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20170,"byte_end":20176,"line_start":454,"line_end":454,"column_start":42,"column_end":48},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1445},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20237,"byte_end":20242,"line_start":456,"line_end":456,"column_start":31,"column_end":36},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1452},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20275,"byte_end":20278,"line_start":457,"line_end":457,"column_start":32,"column_end":35},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20280,"byte_end":20291,"line_start":457,"line_end":457,"column_start":37,"column_end":48},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1508},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20325,"byte_end":20334,"line_start":458,"line_end":458,"column_start":32,"column_end":41},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1551},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20336,"byte_end":20345,"line_start":458,"line_end":458,"column_start":43,"column_end":52},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1576},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20347,"byte_end":20360,"line_start":458,"line_end":458,"column_start":54,"column_end":67},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1601},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20393,"byte_end":20397,"line_start":459,"line_end":459,"column_start":31,"column_end":35},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1632},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20430,"byte_end":20438,"line_start":460,"line_end":460,"column_start":32,"column_end":40},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1608},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20440,"byte_end":20453,"line_start":460,"line_end":460,"column_start":42,"column_end":55},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1343},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20486,"byte_end":20497,"line_start":461,"line_end":461,"column_start":31,"column_end":42},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1430},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":62398,"byte_end":62409,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":60}},{"kind":"Use","ref_id":{"krate":0,"index":1445},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":62458,"byte_end":62463,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":60}},{"kind":"Use","ref_id":{"krate":0,"index":1452},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":62484,"byte_end":62487,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":60}},{"kind":"Use","ref_id":{"krate":0,"index":1508},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21072,"byte_end":21081,"line_start":486,"line_end":486,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21083,"byte_end":21091,"line_start":486,"line_end":486,"column_start":37,"column_end":45},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":370},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21093,"byte_end":21101,"line_start":486,"line_end":486,"column_start":47,"column_end":55},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":1531},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21131,"byte_end":21138,"line_start":487,"line_end":487,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":1551},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21164,"byte_end":21173,"line_start":488,"line_end":488,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":1576},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21203,"byte_end":21216,"line_start":489,"line_end":489,"column_start":29,"column_end":42},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":1914},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473587,"byte_end":473600,"line_start":40,"line_end":40,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1009}},{"kind":"Use","ref_id":{"krate":0,"index":1883},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473624,"byte_end":473630,"line_start":41,"line_end":41,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1009}},{"kind":"Use","ref_id":{"krate":0,"index":1265},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473653,"byte_end":473658,"line_start":42,"line_end":42,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1009}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":76,"byte_end":42591,"line_start":4,"line_end":1125,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":16},{"krate":0,"index":21},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":60},{"krate":0,"index":248},{"krate":0,"index":680},{"krate":0,"index":815},{"krate":0,"index":1009},{"krate":0,"index":1337},{"krate":0,"index":1942},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1971},{"krate":0,"index":1969},{"krate":0,"index":1967},{"krate":0,"index":1964},{"krate":0,"index":1351},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1363},{"krate":0,"index":1978},{"krate":0,"index":1984},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1385}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"! # Chrono: Date and Time for Rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It aims to be a feature-complete superset of","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"! the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"! In particular,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! * Chrono strictly adheres to ISO 8601.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"! * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"! * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"! which Chrono builds upon and should acknowledge:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! * [Initial research on","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"!    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"! * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"! * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! Any significant changes to Chrono are documented in","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"! the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/master/CHANGELOG.md) file.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":957,"byte_end":1050,"line_start":23,"line_end":23,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1051,"byte_end":1054,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! ## Usage","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1055,"byte_end":1067,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1068,"byte_end":1071,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! Put this in your `Cargo.toml`:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1072,"byte_end":1106,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1107,"byte_end":1110,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1111,"byte_end":1122,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1123,"byte_end":1141,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"! chrono = \"0.4\"","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1142,"byte_end":1160,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1161,"byte_end":1168,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1169,"byte_end":1172,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! Or, if you want [Serde](https://github.com/serde-rs/serde) include the","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1173,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"! feature like this:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1248,"byte_end":1270,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1271,"byte_end":1274,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1275,"byte_end":1286,"line_start":37,"line_end":37,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1287,"byte_end":1305,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"! chrono = { version = \"0.4\", features = [\"serde\"] }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1306,"byte_end":1360,"line_start":39,"line_end":39,"column_start":1,"column_end":55}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1361,"byte_end":1368,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1369,"byte_end":1372,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! Then put this in your crate root:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1373,"byte_end":1410,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1411,"byte_end":1414,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1415,"byte_end":1426,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"! extern crate chrono;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1427,"byte_end":1451,"line_start":45,"line_end":45,"column_start":1,"column_end":25}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1452,"byte_end":1459,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1460,"byte_end":1463,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! Avoid using `use chrono::*;` as Chrono exports several modules other than types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1464,"byte_end":1548,"line_start":48,"line_end":48,"column_start":1,"column_end":85}},{"value":"! If you prefer the glob imports, use the following instead:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1549,"byte_end":1611,"line_start":49,"line_end":49,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1612,"byte_end":1615,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1616,"byte_end":1627,"line_start":51,"line_end":51,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1628,"byte_end":1655,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1656,"byte_end":1663,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1664,"byte_end":1667,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! ## Overview","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1668,"byte_end":1683,"line_start":55,"line_end":55,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1684,"byte_end":1687,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! ### Duration","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1688,"byte_end":1704,"line_start":57,"line_end":57,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1705,"byte_end":1708,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! Chrono currently uses","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1709,"byte_end":1734,"line_start":59,"line_end":59,"column_start":1,"column_end":26}},{"value":"! the [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html) type","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1735,"byte_end":1821,"line_start":60,"line_end":60,"column_start":1,"column_end":87}},{"value":"! from the `time` crate to represent the magnitude of a time span.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1822,"byte_end":1890,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"! Since this has the same name as the newer, standard type for duration,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1891,"byte_end":1965,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"! the reference will refer this type as `OldDuration`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":1966,"byte_end":2022,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"! Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2023,"byte_end":2094,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"! nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2095,"byte_end":2170,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"! months.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2171,"byte_end":2182,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2183,"byte_end":2186,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! Chrono does not yet natively support","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2187,"byte_end":2227,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"! the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2228,"byte_end":2320,"line_start":69,"line_end":69,"column_start":1,"column_end":93}},{"value":"! but it will be supported in the future.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2321,"byte_end":2364,"line_start":70,"line_end":70,"column_start":1,"column_end":44}},{"value":"! Meanwhile you can convert between two types with","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2365,"byte_end":2417,"line_start":71,"line_end":71,"column_start":1,"column_end":53}},{"value":"! [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2418,"byte_end":2515,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"! and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2516,"byte_end":2523,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"! [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2524,"byte_end":2617,"line_start":74,"line_end":74,"column_start":1,"column_end":94}},{"value":"! methods.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2618,"byte_end":2630,"line_start":75,"line_end":75,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2631,"byte_end":2634,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! ### Date and Time","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2635,"byte_end":2656,"line_start":77,"line_end":77,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2657,"byte_end":2660,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"! Chrono provides a","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2661,"byte_end":2682,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"! [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2683,"byte_end":2727,"line_start":80,"line_end":80,"column_start":1,"column_end":45}},{"value":"! type to represent a date and a time in a timezone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2728,"byte_end":2782,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2783,"byte_end":2786,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2787,"byte_end":2861,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"! that is unconcerned with timezones, consider","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2862,"byte_end":2910,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"! [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2911,"byte_end":2995,"line_start":85,"line_end":85,"column_start":1,"column_end":85}},{"value":"! which tracks your system clock, or","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":2996,"byte_end":3034,"line_start":86,"line_end":86,"column_start":1,"column_end":39}},{"value":"! [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3035,"byte_end":3119,"line_start":87,"line_end":87,"column_start":1,"column_end":85}},{"value":"! is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3120,"byte_end":3201,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3202,"byte_end":3205,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3206,"byte_end":3267,"line_start":90,"line_end":90,"column_start":1,"column_end":62}},{"value":"! the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3268,"byte_end":3330,"line_start":91,"line_end":91,"column_start":1,"column_end":63}},{"value":"! which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3331,"byte_end":3411,"line_start":92,"line_end":92,"column_start":1,"column_end":81}},{"value":"! There are three well-known `TimeZone` implementations:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3412,"byte_end":3470,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3471,"byte_end":3474,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"! * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3475,"byte_end":3569,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3570,"byte_end":3573,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"! * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3574,"byte_end":3659,"line_start":97,"line_end":97,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3660,"byte_end":3663,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3664,"byte_end":3733,"line_start":99,"line_end":99,"column_start":1,"column_end":70}},{"value":"!   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3734,"byte_end":3801,"line_start":100,"line_end":100,"column_start":1,"column_end":68}},{"value":"!   This often results from the parsed textual date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3802,"byte_end":3865,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"!   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3866,"byte_end":3955,"line_start":102,"line_end":102,"column_start":1,"column_end":90}},{"value":"!   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":3956,"byte_end":4023,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4024,"byte_end":4027,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"! `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4028,"byte_end":4104,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"! but can be converted to each other using","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4105,"byte_end":4149,"line_start":106,"line_end":106,"column_start":1,"column_end":45}},{"value":"! the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4150,"byte_end":4238,"line_start":107,"line_end":107,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4239,"byte_end":4242,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"! You can get the current date and time in the UTC time zone","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4243,"byte_end":4305,"line_start":109,"line_end":109,"column_start":1,"column_end":63}},{"value":"! ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4306,"byte_end":4363,"line_start":110,"line_end":110,"column_start":1,"column_end":58}},{"value":"! or in the local time zone","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4364,"byte_end":4393,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"! ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4394,"byte_end":4456,"line_start":112,"line_end":112,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4457,"byte_end":4460,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4461,"byte_end":4472,"line_start":114,"line_end":114,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4473,"byte_end":4500,"line_start":115,"line_end":115,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4501,"byte_end":4504,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4505,"byte_end":4592,"line_start":117,"line_end":117,"column_start":1,"column_end":88}},{"value":"! let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4593,"byte_end":4685,"line_start":118,"line_end":118,"column_start":1,"column_end":93}},{"value":"! # let _ = utc; let _ = local;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4686,"byte_end":4719,"line_start":119,"line_end":119,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4720,"byte_end":4727,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4728,"byte_end":4731,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"! Alternatively, you can create your own date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4732,"byte_end":4789,"line_start":122,"line_end":122,"column_start":1,"column_end":58}},{"value":"! This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4790,"byte_end":4870,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"! but in turn we get a rich combination of initialization methods.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4871,"byte_end":4939,"line_start":124,"line_end":124,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4940,"byte_end":4943,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4944,"byte_end":4955,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4956,"byte_end":4983,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":4984,"byte_end":5020,"line_start":128,"line_end":128,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5021,"byte_end":5024,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5025,"byte_end":5103,"line_start":130,"line_end":130,"column_start":1,"column_end":79}},{"value":"! // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5104,"byte_end":5167,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"! assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5168,"byte_end":5225,"line_start":132,"line_end":132,"column_start":1,"column_end":58}},{"value":"! // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5226,"byte_end":5283,"line_start":133,"line_end":133,"column_start":1,"column_end":58}},{"value":"! assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5284,"byte_end":5358,"line_start":134,"line_end":134,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5359,"byte_end":5362,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5363,"byte_end":5455,"line_start":136,"line_end":136,"column_start":1,"column_end":93}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5456,"byte_end":5529,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5530,"byte_end":5606,"line_start":138,"line_end":138,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5607,"byte_end":5610,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"! // dynamic verification","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5611,"byte_end":5638,"line_start":140,"line_end":140,"column_start":1,"column_end":28}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5639,"byte_end":5702,"line_start":141,"line_end":141,"column_start":1,"column_end":64}},{"value":"!            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5703,"byte_end":5780,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5781,"byte_end":5864,"line_start":143,"line_end":143,"column_start":1,"column_end":84}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5865,"byte_end":5949,"line_start":144,"line_end":144,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5950,"byte_end":5953,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"! // other time zone objects can be used to construct a local datetime.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":5954,"byte_end":6027,"line_start":146,"line_end":146,"column_start":1,"column_end":74}},{"value":"! // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6028,"byte_end":6125,"line_start":147,"line_end":147,"column_start":1,"column_end":98}},{"value":"! let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6126,"byte_end":6196,"line_start":148,"line_end":148,"column_start":1,"column_end":71}},{"value":"! let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6197,"byte_end":6290,"line_start":149,"line_end":149,"column_start":1,"column_end":94}},{"value":"! assert_eq!(dt, fixed_dt);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6291,"byte_end":6320,"line_start":150,"line_end":150,"column_start":1,"column_end":30}},{"value":"! # let _ = local_dt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6321,"byte_end":6344,"line_start":151,"line_end":151,"column_start":1,"column_end":24}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6345,"byte_end":6352,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6353,"byte_end":6356,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"! Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6357,"byte_end":6448,"line_start":154,"line_end":154,"column_start":1,"column_end":92}},{"value":"! Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6449,"byte_end":6531,"line_start":155,"line_end":155,"column_start":1,"column_end":83}},{"value":"! [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6532,"byte_end":6602,"line_start":156,"line_end":156,"column_start":1,"column_end":71}},{"value":"! Addition and subtraction is also supported.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6603,"byte_end":6650,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"! The following illustrates most supported operations to the date and time:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6651,"byte_end":6728,"line_start":158,"line_end":158,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6729,"byte_end":6732,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6733,"byte_end":6744,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"! # extern crate chrono;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6745,"byte_end":6771,"line_start":161,"line_end":161,"column_start":1,"column_end":27}},{"value":"! extern crate time;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6772,"byte_end":6794,"line_start":162,"line_end":162,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6795,"byte_end":6798,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"! # fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6799,"byte_end":6816,"line_start":164,"line_end":164,"column_start":1,"column_end":18}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6817,"byte_end":6844,"line_start":165,"line_end":165,"column_start":1,"column_end":28}},{"value":"! use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6845,"byte_end":6868,"line_start":166,"line_end":166,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6869,"byte_end":6872,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"! // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6873,"byte_end":6939,"line_start":168,"line_end":168,"column_start":1,"column_end":67}},{"value":"! let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":6940,"byte_end":7033,"line_start":169,"line_end":169,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7034,"byte_end":7037,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"! // property accessors","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7038,"byte_end":7063,"line_start":171,"line_end":171,"column_start":1,"column_end":26}},{"value":"! assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7064,"byte_end":7130,"line_start":172,"line_end":172,"column_start":1,"column_end":67}},{"value":"! assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7131,"byte_end":7207,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"! assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7208,"byte_end":7276,"line_start":174,"line_end":174,"column_start":1,"column_end":69}},{"value":"! assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7277,"byte_end":7320,"line_start":175,"line_end":175,"column_start":1,"column_end":44}},{"value":"! assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7321,"byte_end":7395,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"! assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7396,"byte_end":7449,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7450,"byte_end":7546,"line_start":178,"line_end":178,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7547,"byte_end":7550,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"! // time zone accessor and manipulation","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7551,"byte_end":7593,"line_start":180,"line_end":180,"column_start":1,"column_end":43}},{"value":"! assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7594,"byte_end":7656,"line_start":181,"line_end":181,"column_start":1,"column_end":63}},{"value":"! assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7657,"byte_end":7716,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"! assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7717,"byte_end":7815,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7816,"byte_end":7819,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"! // a sample of property manipulations (validates dynamically)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7820,"byte_end":7885,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"! assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7886,"byte_end":7977,"line_start":186,"line_end":186,"column_start":1,"column_end":92}},{"value":"! assert_eq!(dt.with_day(32), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":7978,"byte_end":8016,"line_start":187,"line_end":187,"column_start":1,"column_end":39}},{"value":"! assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8017,"byte_end":8113,"line_start":188,"line_end":188,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8114,"byte_end":8117,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"! // arithmetic operations","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8118,"byte_end":8146,"line_start":190,"line_end":190,"column_start":1,"column_end":29}},{"value":"! let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8147,"byte_end":8201,"line_start":191,"line_end":191,"column_start":1,"column_end":55}},{"value":"! let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8202,"byte_end":8256,"line_start":192,"line_end":192,"column_start":1,"column_end":55}},{"value":"! assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8257,"byte_end":8338,"line_start":193,"line_end":193,"column_start":1,"column_end":82}},{"value":"! assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8339,"byte_end":8419,"line_start":194,"line_end":194,"column_start":1,"column_end":81}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8420,"byte_end":8507,"line_start":195,"line_end":195,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8508,"byte_end":8563,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8564,"byte_end":8651,"line_start":197,"line_end":197,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8652,"byte_end":8709,"line_start":198,"line_end":198,"column_start":1,"column_end":58}},{"value":"! # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8710,"byte_end":8717,"line_start":199,"line_end":199,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8718,"byte_end":8725,"line_start":200,"line_end":200,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8726,"byte_end":8729,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"! ### Formatting and Parsing","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8730,"byte_end":8760,"line_start":202,"line_end":202,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8761,"byte_end":8764,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"! Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8765,"byte_end":8852,"line_start":204,"line_end":204,"column_start":1,"column_end":88}},{"value":"! which format is equivalent to the familiar `strftime` format.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8853,"byte_end":8918,"line_start":205,"line_end":205,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8919,"byte_end":8922,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"! See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8923,"byte_end":8992,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":8993,"byte_end":9050,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9051,"byte_end":9054,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"! The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9055,"byte_end":9149,"line_start":210,"line_end":210,"column_start":1,"column_end":95}},{"value":"! Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9150,"byte_end":9235,"line_start":211,"line_end":211,"column_start":1,"column_end":86}},{"value":"! [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9236,"byte_end":9304,"line_start":212,"line_end":212,"column_start":1,"column_end":69}},{"value":"! for well-known formats.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9305,"byte_end":9332,"line_start":213,"line_end":213,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9333,"byte_end":9336,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9337,"byte_end":9348,"line_start":215,"line_end":215,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9349,"byte_end":9376,"line_start":216,"line_end":216,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9377,"byte_end":9380,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9381,"byte_end":9434,"line_start":218,"line_end":218,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9435,"byte_end":9517,"line_start":219,"line_end":219,"column_start":1,"column_end":83}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9518,"byte_end":9602,"line_start":220,"line_end":220,"column_start":1,"column_end":85}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9603,"byte_end":9688,"line_start":221,"line_end":221,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9689,"byte_end":9692,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"! assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9693,"byte_end":9751,"line_start":223,"line_end":223,"column_start":1,"column_end":59}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9752,"byte_end":9819,"line_start":224,"line_end":224,"column_start":1,"column_end":68}},{"value":"! assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9820,"byte_end":9881,"line_start":225,"line_end":225,"column_start":1,"column_end":62}},{"value":"! assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9882,"byte_end":9942,"line_start":226,"line_end":226,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9943,"byte_end":9946,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"! // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":9947,"byte_end":10019,"line_start":228,"line_end":228,"column_start":1,"column_end":73}},{"value":"! let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10020,"byte_end":10086,"line_start":229,"line_end":229,"column_start":1,"column_end":67}},{"value":"! assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10087,"byte_end":10162,"line_start":230,"line_end":230,"column_start":1,"column_end":76}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10163,"byte_end":10170,"line_start":231,"line_end":231,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10171,"byte_end":10174,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"! Parsing can be done with three methods:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10175,"byte_end":10218,"line_start":233,"line_end":233,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10219,"byte_end":10222,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"! 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10223,"byte_end":10314,"line_start":235,"line_end":235,"column_start":1,"column_end":92}},{"value":"!    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10315,"byte_end":10406,"line_start":236,"line_end":236,"column_start":1,"column_end":92}},{"value":"!    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10407,"byte_end":10495,"line_start":237,"line_end":237,"column_start":1,"column_end":89}},{"value":"!    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10496,"byte_end":10556,"line_start":238,"line_end":238,"column_start":1,"column_end":61}},{"value":"!    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10557,"byte_end":10637,"line_start":239,"line_end":239,"column_start":1,"column_end":81}},{"value":"!    format specifier prints, and requires the offset to be present.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10638,"byte_end":10708,"line_start":240,"line_end":240,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10709,"byte_end":10712,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"! 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10713,"byte_end":10801,"line_start":242,"line_end":242,"column_start":1,"column_end":89}},{"value":"!    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10802,"byte_end":10874,"line_start":243,"line_end":243,"column_start":1,"column_end":73}},{"value":"!    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10875,"byte_end":10970,"line_start":244,"line_end":244,"column_start":1,"column_end":96}},{"value":"!    It *cannot* be used when the offset can be missing.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":10971,"byte_end":11029,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"!    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11030,"byte_end":11119,"line_start":246,"line_end":246,"column_start":1,"column_end":90}},{"value":"!    and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11120,"byte_end":11130,"line_start":247,"line_end":247,"column_start":1,"column_end":11}},{"value":"!    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11131,"byte_end":11220,"line_start":248,"line_end":248,"column_start":1,"column_end":90}},{"value":"!    are similar but for well-known formats.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11221,"byte_end":11267,"line_start":249,"line_end":249,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11268,"byte_end":11271,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"! 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11272,"byte_end":11366,"line_start":251,"line_end":251,"column_start":1,"column_end":95}},{"value":"!    similar but returns `DateTime` of given offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11367,"byte_end":11421,"line_start":252,"line_end":252,"column_start":1,"column_end":55}},{"value":"!    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11422,"byte_end":11509,"line_start":253,"line_end":253,"column_start":1,"column_end":88}},{"value":"!    It issues an error when the input contains an explicit offset different","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11510,"byte_end":11588,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"!    from the current offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11589,"byte_end":11620,"line_start":255,"line_end":255,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11621,"byte_end":11624,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"! More detailed control over the parsing process is available via","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11625,"byte_end":11692,"line_start":257,"line_end":257,"column_start":1,"column_end":68}},{"value":"! [`format`](./format/index.html) module.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11693,"byte_end":11736,"line_start":258,"line_end":258,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11737,"byte_end":11740,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11741,"byte_end":11752,"line_start":260,"line_end":260,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11753,"byte_end":11780,"line_start":261,"line_end":261,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11781,"byte_end":11784,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11785,"byte_end":11838,"line_start":263,"line_end":263,"column_start":1,"column_end":54}},{"value":"! let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11839,"byte_end":11903,"line_start":264,"line_end":264,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11904,"byte_end":11907,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"! // method 1","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11908,"byte_end":11923,"line_start":266,"line_end":266,"column_start":1,"column_end":16}},{"value":"! assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":11924,"byte_end":12004,"line_start":267,"line_end":267,"column_start":1,"column_end":81}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12005,"byte_end":12090,"line_start":268,"line_end":268,"column_start":1,"column_end":86}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12091,"byte_end":12190,"line_start":269,"line_end":269,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12191,"byte_end":12194,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"! // method 2","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12195,"byte_end":12210,"line_start":271,"line_end":271,"column_start":1,"column_end":16}},{"value":"! assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12211,"byte_end":12305,"line_start":272,"line_end":272,"column_start":1,"column_end":95}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12306,"byte_end":12343,"line_start":273,"line_end":273,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12344,"byte_end":12423,"line_start":274,"line_end":274,"column_start":1,"column_end":80}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12424,"byte_end":12461,"line_start":275,"line_end":275,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12462,"byte_end":12558,"line_start":276,"line_end":276,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12559,"byte_end":12562,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"! // method 3","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12563,"byte_end":12578,"line_start":278,"line_end":278,"column_start":1,"column_end":16}},{"value":"! assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12579,"byte_end":12677,"line_start":279,"line_end":279,"column_start":1,"column_end":99}},{"value":"! assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12678,"byte_end":12778,"line_start":280,"line_end":280,"column_start":1,"column_end":101}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12779,"byte_end":12782,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"! // oops, the year is missing!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12783,"byte_end":12816,"line_start":282,"line_end":282,"column_start":1,"column_end":34}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12817,"byte_end":12902,"line_start":283,"line_end":283,"column_start":1,"column_end":86}},{"value":"! // oops, the format string does not include the year at all!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12903,"byte_end":12967,"line_start":284,"line_end":284,"column_start":1,"column_end":65}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":12968,"byte_end":13050,"line_start":285,"line_end":285,"column_start":1,"column_end":83}},{"value":"! // oops, the weekday is incorrect!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13051,"byte_end":13089,"line_start":286,"line_end":286,"column_start":1,"column_end":39}},{"value":"! assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13090,"byte_end":13180,"line_start":287,"line_end":287,"column_start":1,"column_end":91}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13181,"byte_end":13188,"line_start":288,"line_end":288,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13189,"byte_end":13192,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"! Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13193,"byte_end":13270,"line_start":290,"line_end":290,"column_start":1,"column_end":78}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13271,"byte_end":13328,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13329,"byte_end":13332,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"! ### Conversion from and to EPOCH timestamps","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13333,"byte_end":13380,"line_start":293,"line_end":293,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13381,"byte_end":13384,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"! Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13385,"byte_end":13479,"line_start":295,"line_end":295,"column_start":1,"column_end":95}},{"value":"! to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13480,"byte_end":13562,"line_start":296,"line_end":296,"column_start":1,"column_end":83}},{"value":"! (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13563,"byte_end":13625,"line_start":297,"line_end":297,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13626,"byte_end":13629,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"! Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13630,"byte_end":13735,"line_start":299,"line_end":299,"column_start":1,"column_end":106}},{"value":"! from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13736,"byte_end":13810,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"! [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13811,"byte_end":13904,"line_start":301,"line_end":301,"column_start":1,"column_end":94}},{"value":"! to get the number of additional number of nanoseconds.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13905,"byte_end":13963,"line_start":302,"line_end":302,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13964,"byte_end":13967,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13968,"byte_end":13979,"line_start":304,"line_end":304,"column_start":1,"column_end":12}},{"value":"! // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":13980,"byte_end":14038,"line_start":305,"line_end":305,"column_start":1,"column_end":59}},{"value":"! use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14039,"byte_end":14081,"line_start":306,"line_end":306,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14082,"byte_end":14085,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"! // Construct a datetime from epoch:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14086,"byte_end":14125,"line_start":308,"line_end":308,"column_start":1,"column_end":40}},{"value":"! let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14126,"byte_end":14171,"line_start":309,"line_end":309,"column_start":1,"column_end":46}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14172,"byte_end":14239,"line_start":310,"line_end":310,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14240,"byte_end":14243,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"! // Get epoch value from a datetime:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14244,"byte_end":14283,"line_start":312,"line_end":312,"column_start":1,"column_end":40}},{"value":"! let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14284,"byte_end":14370,"line_start":313,"line_end":313,"column_start":1,"column_end":87}},{"value":"! assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14371,"byte_end":14417,"line_start":314,"line_end":314,"column_start":1,"column_end":47}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14418,"byte_end":14425,"line_start":315,"line_end":315,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14426,"byte_end":14429,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"! ### Individual date","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14430,"byte_end":14453,"line_start":317,"line_end":317,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14454,"byte_end":14457,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"! Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14458,"byte_end":14542,"line_start":319,"line_end":319,"column_start":1,"column_end":85}},{"value":"! It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14543,"byte_end":14622,"line_start":320,"line_end":320,"column_start":1,"column_end":80}},{"value":"! Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14623,"byte_end":14717,"line_start":321,"line_end":321,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14718,"byte_end":14721,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14722,"byte_end":14733,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14734,"byte_end":14761,"line_start":324,"line_end":324,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14762,"byte_end":14798,"line_start":325,"line_end":325,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14799,"byte_end":14802,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"! # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14803,"byte_end":14903,"line_start":327,"line_end":327,"column_start":1,"column_end":101}},{"value":"! assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14904,"byte_end":14952,"line_start":328,"line_end":328,"column_start":1,"column_end":49}},{"value":"! assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":14953,"byte_end":15005,"line_start":329,"line_end":329,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15006,"byte_end":15009,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15010,"byte_end":15072,"line_start":331,"line_end":331,"column_start":1,"column_end":63}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15073,"byte_end":15134,"line_start":332,"line_end":332,"column_start":1,"column_end":62}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15135,"byte_end":15228,"line_start":333,"line_end":333,"column_start":1,"column_end":94}},{"value":"!            \"070809\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15229,"byte_end":15254,"line_start":334,"line_end":334,"column_start":1,"column_end":26}},{"value":"! ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15255,"byte_end":15262,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15263,"byte_end":15266,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"! There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15267,"byte_end":15359,"line_start":337,"line_end":337,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15360,"byte_end":15363,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"! `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15364,"byte_end":15434,"line_start":339,"line_end":339,"column_start":1,"column_end":71}},{"value":"! which returns a `Date` which represents its date component.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15435,"byte_end":15498,"line_start":340,"line_end":340,"column_start":1,"column_end":64}},{"value":"! There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15499,"byte_end":15571,"line_start":341,"line_end":341,"column_start":1,"column_end":73}},{"value":"! which simply returns a naive local time described below.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15572,"byte_end":15632,"line_start":342,"line_end":342,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15633,"byte_end":15636,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"! ### Naive date and time","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15637,"byte_end":15664,"line_start":344,"line_end":344,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15665,"byte_end":15668,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"! Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15669,"byte_end":15755,"line_start":346,"line_end":346,"column_start":1,"column_end":87}},{"value":"! as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15756,"byte_end":15812,"line_start":347,"line_end":347,"column_start":1,"column_end":57}},{"value":"! [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15813,"byte_end":15869,"line_start":348,"line_end":348,"column_start":1,"column_end":57}},{"value":"! [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15870,"byte_end":15944,"line_start":349,"line_end":349,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15945,"byte_end":15948,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"! They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":15949,"byte_end":16022,"line_start":351,"line_end":351,"column_start":1,"column_end":74}},{"value":"! but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16023,"byte_end":16101,"line_start":352,"line_end":352,"column_start":1,"column_end":79}},{"value":"! They are mostly useful for building blocks for higher-level types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16102,"byte_end":16172,"line_start":353,"line_end":353,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16173,"byte_end":16176,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"! Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16177,"byte_end":16266,"line_start":355,"line_end":355,"column_start":1,"column_end":90}},{"value":"! [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16267,"byte_end":16337,"line_start":356,"line_end":356,"column_start":1,"column_end":71}},{"value":"! a view to the naive local time,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16338,"byte_end":16373,"line_start":357,"line_end":357,"column_start":1,"column_end":36}},{"value":"! and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16374,"byte_end":16444,"line_start":358,"line_end":358,"column_start":1,"column_end":71}},{"value":"! a view to the naive UTC time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16445,"byte_end":16478,"line_start":359,"line_end":359,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16479,"byte_end":16482,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"! ## Limitations","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16483,"byte_end":16501,"line_start":361,"line_end":361,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16502,"byte_end":16505,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"! Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16506,"byte_end":16596,"line_start":363,"line_end":363,"column_start":1,"column_end":91}},{"value":"! Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16597,"byte_end":16696,"line_start":364,"line_end":364,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16697,"byte_end":16700,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"! Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16701,"byte_end":16777,"line_start":366,"line_end":366,"column_start":1,"column_end":77}},{"value":"! Time types are limited in the nanosecond accuracy.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16778,"byte_end":16832,"line_start":367,"line_end":367,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16833,"byte_end":16836,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"! [Leap seconds are supported in the representation but","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16837,"byte_end":16894,"line_start":369,"line_end":369,"column_start":1,"column_end":58}},{"value":"! Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16895,"byte_end":16991,"line_start":370,"line_end":370,"column_start":1,"column_end":97}},{"value":"! (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":16992,"byte_end":17062,"line_start":371,"line_end":371,"column_start":1,"column_end":71}},{"value":"! Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17063,"byte_end":17140,"line_start":372,"line_end":372,"column_start":1,"column_end":78}},{"value":"! Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17141,"byte_end":17231,"line_start":373,"line_end":373,"column_start":1,"column_end":91}},{"value":"! if you want.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17232,"byte_end":17248,"line_start":374,"line_end":374,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17249,"byte_end":17252,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"! Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17253,"byte_end":17346,"line_start":376,"line_end":376,"column_start":1,"column_end":94}},{"value":"! Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17347,"byte_end":17420,"line_start":377,"line_end":377,"column_start":1,"column_end":74}},{"value":"! For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17421,"byte_end":17487,"line_start":378,"line_end":378,"column_start":1,"column_end":67}},{"value":"! and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17488,"byte_end":17561,"line_start":379,"line_end":379,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17562,"byte_end":17565,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"! Advanced time zone handling is not yet supported.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17566,"byte_end":17619,"line_start":381,"line_end":381,"column_start":1,"column_end":54}},{"value":"! For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17620,"byte_end":17716,"line_start":382,"line_end":382,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17866,"byte_end":17888,"line_start":387,"line_end":387,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17889,"byte_end":17928,"line_start":388,"line_end":388,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":17929,"byte_end":17948,"line_start":389,"line_end":389,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20058,"byte_end":20065,"line_start":452,"line_end":452,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":19967,"byte_end":20049,"line_start":451,"line_end":451,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":60},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":67},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":1396},{"krate":0,"index":1427},{"krate":0,"index":1421},{"krate":0,"index":1423},{"krate":0,"index":1418},{"krate":0,"index":1416},{"krate":0,"index":1411},{"krate":0,"index":1413},{"krate":0,"index":1407},{"krate":0,"index":75},{"krate":0,"index":83},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":120},{"krate":0,"index":179},{"krate":0,"index":215},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"! The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44076,"byte_end":44147,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44148,"byte_end":44151,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! There are four operations provided by the `TimeZone` trait:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44152,"byte_end":44215,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44216,"byte_end":44219,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44220,"byte_end":44281,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"! 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44282,"byte_end":44341,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"! 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44342,"byte_end":44403,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"! 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44404,"byte_end":44467,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44468,"byte_end":44471,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44472,"byte_end":44568,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"! 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44569,"byte_end":44665,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"! which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44666,"byte_end":44757,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"! Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44758,"byte_end":44838,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"! but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44839,"byte_end":44907,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"! and provides implementations for 1 and 3.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44908,"byte_end":44953,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"! An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":44954,"byte_end":45043,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1398},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45497,"byte_end":45501,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45369,"byte_end":45416,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45421,"byte_end":45492,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1400},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45575,"byte_end":45581,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45507,"byte_end":45570,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1403},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45747,"byte_end":45756,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1396},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45590,"byte_end":45666,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45671,"byte_end":45742,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1396},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45348,"byte_end":45359,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"LocalResult::{None, Single, Ambiguous}","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1400},{"krate":0,"index":1403}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45204,"byte_end":45287,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45906,"byte_end":45912,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45812,"byte_end":45894,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":46140,"byte_end":46148,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":46046,"byte_end":46128,"line_start":50,"line_end":50,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":46405,"byte_end":46411,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":46313,"byte_end":46393,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":46658,"byte_end":46661,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"fn <U, F> (self, mut f: F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":46576,"byte_end":46646,"line_start":66,"line_end":66,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47236,"byte_end":47244,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"fn (self, time: NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47011,"byte_end":47082,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47087,"byte_end":47135,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47140,"byte_end":47143,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47148,"byte_end":47210,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47215,"byte_end":47224,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47742,"byte_end":47753,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"fn (self, hour: u32, min: u32, sec: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47514,"byte_end":47588,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47593,"byte_end":47641,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47646,"byte_end":47649,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47654,"byte_end":47716,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":47721,"byte_end":47730,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48376,"byte_end":48393,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"fn (self, hour: u32, min: u32, sec: u32, milli: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48050,"byte_end":48137,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48142,"byte_end":48222,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48227,"byte_end":48275,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48280,"byte_end":48283,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48288,"byte_end":48350,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48355,"byte_end":48364,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49092,"byte_end":49109,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"fn (self, hour: u32, min: u32, sec: u32, micro: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48762,"byte_end":48849,"line_start":126,"line_end":126,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48854,"byte_end":48938,"line_start":127,"line_end":127,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48943,"byte_end":48991,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":48996,"byte_end":48999,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49004,"byte_end":49066,"line_start":130,"line_end":130,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49071,"byte_end":49080,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49810,"byte_end":49826,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"fn (self, hour: u32, min: u32, sec: u32, nano: u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49478,"byte_end":49564,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49569,"byte_end":49656,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49661,"byte_end":49709,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49714,"byte_end":49717,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49722,"byte_end":49784,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":49789,"byte_end":49798,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50314,"byte_end":50320,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50231,"byte_end":50302,"line_start":170,"line_end":170,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50675,"byte_end":50681,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":94}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50622,"byte_end":50664,"line_start":182,"line_end":182,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50787,"byte_end":50790,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"fn (&self) -> FixedOffset","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50716,"byte_end":50779,"line_start":184,"line_end":184,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":95},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50989,"byte_end":50997,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50817,"byte_end":50835,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50836,"byte_end":50839,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50840,"byte_end":50929,"line_start":190,"line_end":190,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50930,"byte_end":50978,"line_start":191,"line_end":191,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51220,"byte_end":51226,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51019,"byte_end":51049,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51054,"byte_end":51126,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51131,"byte_end":51210,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51843,"byte_end":51846,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"fn (&self, year: i32, month: u32, day: u32) -> Date<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51241,"byte_end":51312,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51317,"byte_end":51396,"line_start":199,"line_end":199,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51401,"byte_end":51404,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51409,"byte_end":51502,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51507,"byte_end":51584,"line_start":202,"line_end":202,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51589,"byte_end":51592,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51597,"byte_end":51659,"line_start":204,"line_end":204,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51664,"byte_end":51667,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51672,"byte_end":51685,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51690,"byte_end":51693,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51698,"byte_end":51706,"line_start":208,"line_end":208,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51711,"byte_end":51743,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51748,"byte_end":51751,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51756,"byte_end":51822,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51827,"byte_end":51835,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52662,"byte_end":52669,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"fn (&self, year: i32, month: u32, day: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51962,"byte_end":52033,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52038,"byte_end":52117,"line_start":218,"line_end":218,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52122,"byte_end":52125,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52130,"byte_end":52223,"line_start":220,"line_end":220,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52228,"byte_end":52305,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52310,"byte_end":52313,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52318,"byte_end":52388,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52393,"byte_end":52396,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52401,"byte_end":52414,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52419,"byte_end":52422,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52427,"byte_end":52435,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52440,"byte_end":52485,"line_start":228,"line_end":228,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52490,"byte_end":52493,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52498,"byte_end":52577,"line_start":230,"line_end":230,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52582,"byte_end":52641,"line_start":231,"line_end":231,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52646,"byte_end":52654,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53518,"byte_end":53520,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"fn (&self, year: i32, ordinal: u32) -> Date<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":52906,"byte_end":52997,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53002,"byte_end":53081,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53086,"byte_end":53089,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53094,"byte_end":53187,"line_start":243,"line_end":243,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53192,"byte_end":53269,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53274,"byte_end":53277,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53282,"byte_end":53337,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53342,"byte_end":53345,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53350,"byte_end":53363,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53368,"byte_end":53371,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53376,"byte_end":53384,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53389,"byte_end":53421,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53426,"byte_end":53429,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53434,"byte_end":53497,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53502,"byte_end":53510,"line_start":254,"line_end":254,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54071,"byte_end":54077,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"fn (&self, year: i32, ordinal: u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53624,"byte_end":53715,"line_start":259,"line_end":259,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53720,"byte_end":53799,"line_start":260,"line_end":260,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53804,"byte_end":53807,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53812,"byte_end":53905,"line_start":262,"line_end":262,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53910,"byte_end":53987,"line_start":263,"line_end":263,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":53992,"byte_end":53995,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54000,"byte_end":54063,"line_start":265,"line_end":265,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55055,"byte_end":55061,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> Date<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54302,"byte_end":54393,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54398,"byte_end":54424,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54429,"byte_end":54508,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54513,"byte_end":54584,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54589,"byte_end":54592,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54597,"byte_end":54690,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54695,"byte_end":54772,"line_start":279,"line_end":279,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54777,"byte_end":54780,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54785,"byte_end":54848,"line_start":281,"line_end":281,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54853,"byte_end":54856,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54861,"byte_end":54874,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54879,"byte_end":54882,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54887,"byte_end":54895,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54900,"byte_end":54941,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54946,"byte_end":54949,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":54954,"byte_end":55034,"line_start":288,"line_end":288,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55039,"byte_end":55047,"line_start":289,"line_end":289,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55752,"byte_end":55762,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"fn (&self, year: i32, week: u32, weekday: Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55190,"byte_end":55281,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55286,"byte_end":55312,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55317,"byte_end":55396,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55401,"byte_end":55472,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55477,"byte_end":55480,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55485,"byte_end":55578,"line_start":299,"line_end":299,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55583,"byte_end":55660,"line_start":300,"line_end":300,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55665,"byte_end":55668,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":55673,"byte_end":55744,"line_start":302,"line_end":302,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56587,"byte_end":56596,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"fn (&self, secs: i64, nsecs: u32) -> DateTime<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56012,"byte_end":56074,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56079,"byte_end":56139,"line_start":311,"line_end":311,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56144,"byte_end":56215,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56220,"byte_end":56223,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56228,"byte_end":56303,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56308,"byte_end":56385,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56390,"byte_end":56393,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56398,"byte_end":56411,"line_start":317,"line_end":317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56416,"byte_end":56419,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56424,"byte_end":56432,"line_start":319,"line_end":319,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56437,"byte_end":56469,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56474,"byte_end":56477,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56482,"byte_end":56566,"line_start":322,"line_end":322,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56571,"byte_end":56579,"line_start":323,"line_end":323,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57079,"byte_end":57092,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"fn (&self, secs: i64, nsecs: u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56707,"byte_end":56769,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56774,"byte_end":56834,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56839,"byte_end":56910,"line_start":330,"line_end":330,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56915,"byte_end":56918,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":56923,"byte_end":56995,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57000,"byte_end":57071,"line_start":333,"line_end":333,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57832,"byte_end":57848,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"fn (&self, millis: i64) -> DateTime<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57353,"byte_end":57420,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57425,"byte_end":57486,"line_start":342,"line_end":342,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57491,"byte_end":57494,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57499,"byte_end":57568,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57573,"byte_end":57644,"line_start":345,"line_end":345,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57649,"byte_end":57652,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57657,"byte_end":57670,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57675,"byte_end":57678,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57683,"byte_end":57691,"line_start":349,"line_end":349,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57696,"byte_end":57728,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57733,"byte_end":57736,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57741,"byte_end":57811,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57816,"byte_end":57824,"line_start":353,"line_end":353,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58579,"byte_end":58599,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"fn (&self, millis: i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":57951,"byte_end":58018,"line_start":358,"line_end":358,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58023,"byte_end":58084,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58089,"byte_end":58092,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58097,"byte_end":58100,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58105,"byte_end":58175,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58180,"byte_end":58235,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58240,"byte_end":58266,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58271,"byte_end":58274,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58279,"byte_end":58292,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58297,"byte_end":58300,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58305,"byte_end":58313,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58318,"byte_end":58363,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58368,"byte_end":58416,"line_start":370,"line_end":370,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58421,"byte_end":58492,"line_start":371,"line_end":371,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58497,"byte_end":58547,"line_start":372,"line_end":372,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58552,"byte_end":58558,"line_start":373,"line_end":373,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58563,"byte_end":58571,"line_start":374,"line_end":374,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59301,"byte_end":59316,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"fn (&self, nanos: i64) -> DateTime<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58878,"byte_end":58944,"line_start":384,"line_end":384,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":58949,"byte_end":59010,"line_start":385,"line_end":385,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59015,"byte_end":59018,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59023,"byte_end":59092,"line_start":387,"line_end":387,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59097,"byte_end":59108,"line_start":388,"line_end":388,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59113,"byte_end":59116,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59121,"byte_end":59134,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59139,"byte_end":59142,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59147,"byte_end":59155,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59160,"byte_end":59192,"line_start":393,"line_end":393,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59197,"byte_end":59200,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59205,"byte_end":59280,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59285,"byte_end":59293,"line_start":396,"line_end":396,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60103,"byte_end":60120,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"fn (&self, s: &str, fmt: &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59599,"byte_end":59655,"line_start":406,"line_end":406,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59660,"byte_end":59709,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59714,"byte_end":59784,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59789,"byte_end":59827,"line_start":409,"line_end":409,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59832,"byte_end":59835,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59840,"byte_end":59914,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59919,"byte_end":59977,"line_start":412,"line_end":412,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59982,"byte_end":59985,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":59990,"byte_end":60060,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60065,"byte_end":60095,"line_start":415,"line_end":415,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60391,"byte_end":60402,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"fn (offset: &Self::Offset) -> Self","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60336,"byte_end":60383,"line_start":422,"line_end":422,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60514,"byte_end":60536,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60440,"byte_end":60506,"line_start":425,"line_end":425,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60676,"byte_end":60702,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60598,"byte_end":60668,"line_start":428,"line_end":428,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60852,"byte_end":60867,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"fn (&self, local: &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":60768,"byte_end":60844,"line_start":431,"line_end":431,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":61219,"byte_end":61238,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"fn (&self, local: &NaiveDateTime) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":61127,"byte_end":61211,"line_start":439,"line_end":439,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":61512,"byte_end":61532,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":61437,"byte_end":61504,"line_start":445,"line_end":445,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":61658,"byte_end":61682,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":61579,"byte_end":61650,"line_start":448,"line_end":448,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":61889,"byte_end":61902,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"fn (&self, utc: &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":61733,"byte_end":61784,"line_start":451,"line_end":451,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":61789,"byte_end":61881,"line_start":452,"line_end":452,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":62175,"byte_end":62192,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"fn (&self, utc: &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":62015,"byte_end":62070,"line_start":457,"line_end":457,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":62075,"byte_end":62167,"line_start":458,"line_end":458,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":1430},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65522,"byte_end":65533,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1431}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65146,"byte_end":65217,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65218,"byte_end":65221,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65222,"byte_end":65279,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65280,"byte_end":65343,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65344,"byte_end":65417,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65418,"byte_end":65466,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66137,"byte_end":66141,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65588,"byte_end":65676,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65681,"byte_end":65734,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65739,"byte_end":65742,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65747,"byte_end":65785,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65790,"byte_end":65793,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65798,"byte_end":65811,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65816,"byte_end":65819,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65824,"byte_end":65832,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65837,"byte_end":65877,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65882,"byte_end":65902,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65907,"byte_end":65971,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65976,"byte_end":66040,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66045,"byte_end":66112,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66117,"byte_end":66125,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66476,"byte_end":66484,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66259,"byte_end":66347,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66352,"byte_end":66405,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66410,"byte_end":66413,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66418,"byte_end":66464,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67226,"byte_end":67230,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"fn (secs: i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66677,"byte_end":66765,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66770,"byte_end":66823,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66828,"byte_end":66831,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66836,"byte_end":66874,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66879,"byte_end":66882,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66887,"byte_end":66900,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66905,"byte_end":66908,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66913,"byte_end":66921,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66926,"byte_end":66966,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66971,"byte_end":66991,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":66996,"byte_end":67060,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67065,"byte_end":67129,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67134,"byte_end":67201,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67206,"byte_end":67214,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67565,"byte_end":67573,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"fn (secs: i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67348,"byte_end":67436,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67441,"byte_end":67494,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67499,"byte_end":67502,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67507,"byte_end":67553,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67872,"byte_end":67887,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67767,"byte_end":67846,"line_start":88,"line_end":88,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67851,"byte_end":67860,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":68049,"byte_end":68064,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":67944,"byte_end":68023,"line_start":94,"line_end":94,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":68028,"byte_end":68037,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1445},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74972,"byte_end":74977,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74516,"byte_end":74591,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74592,"byte_end":74595,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74596,"byte_end":74653,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74654,"byte_end":74729,"line_start":69,"line_end":69,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74730,"byte_end":74744,"line_start":70,"line_end":70,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74745,"byte_end":74748,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74749,"byte_end":74762,"line_start":72,"line_end":72,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74763,"byte_end":74766,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74767,"byte_end":74775,"line_start":74,"line_end":74,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74776,"byte_end":74820,"line_start":75,"line_end":75,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74821,"byte_end":74824,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74825,"byte_end":74868,"line_start":77,"line_end":77,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74869,"byte_end":74921,"line_start":78,"line_end":78,"column_start":1,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74922,"byte_end":74930,"line_start":79,"line_end":79,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":75068,"byte_end":75073,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"fn () -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74997,"byte_end":75056,"line_start":84,"line_end":84,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":75299,"byte_end":75302,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"fn () -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":75132,"byte_end":75195,"line_start":89,"line_end":89,"column_start":5,"column_end":68}},{"value":"cfg(not\n      (all\n       (target_arch = \"wasm32\", not (target_os = \"wasi\"), feature =\n        \"wasmbind\")))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":75200,"byte_end":75287,"line_start":90,"line_end":90,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":1452},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80117,"byte_end":80120,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79471,"byte_end":79566,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79567,"byte_end":79629,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79630,"byte_end":79633,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79634,"byte_end":79691,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79692,"byte_end":79763,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79764,"byte_end":79778,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79779,"byte_end":79782,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79783,"byte_end":79796,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79797,"byte_end":79800,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79801,"byte_end":79809,"line_start":27,"line_end":27,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79810,"byte_end":79867,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79868,"byte_end":79871,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79872,"byte_end":79954,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79955,"byte_end":79958,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":79959,"byte_end":80000,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80001,"byte_end":80058,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80059,"byte_end":80067,"line_start":34,"line_end":34,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80233,"byte_end":80238,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"fn () -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80162,"byte_end":80221,"line_start":40,"line_end":40,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80448,"byte_end":80451,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"fn () -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80281,"byte_end":80344,"line_start":43,"line_end":43,"column_start":5,"column_end":68}},{"value":"cfg(not\n      (all\n       (target_arch = \"wasm32\", not (target_os = \"wasi\"), feature =\n        \"wasmbind\")))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80349,"byte_end":80436,"line_start":44,"line_end":44,"column_start":5,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":248},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20703,"byte_end":20708,"line_start":473,"line_end":473,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":329},{"krate":0,"index":455},{"krate":0,"index":468},{"krate":0,"index":553},{"krate":0,"index":673},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"! Date and time types unconcerned with timezones.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20715,"byte_end":20766,"line_start":474,"line_end":474,"column_start":5,"column_end":56}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20771,"byte_end":20774,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"! They are primarily building blocks for other types","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20779,"byte_end":20833,"line_start":476,"line_end":476,"column_start":5,"column_end":59}},{"value":"! (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20838,"byte_end":20893,"line_start":477,"line_end":477,"column_start":5,"column_end":60}},{"value":"! but can be also used for the simpler date and time handling.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20898,"byte_end":20962,"line_start":478,"line_end":478,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1508},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":118213,"byte_end":118222,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1509}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":115635,"byte_end":115679,"line_start":52,"line_end":52,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":115680,"byte_end":115743,"line_start":53,"line_end":53,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":115744,"byte_end":115792,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":115793,"byte_end":115862,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":115863,"byte_end":115866,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":115867,"byte_end":115886,"line_start":57,"line_end":57,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":115887,"byte_end":115890,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":115891,"byte_end":115967,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":115968,"byte_end":116040,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116041,"byte_end":116044,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116045,"byte_end":116141,"line_start":62,"line_end":62,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116142,"byte_end":116229,"line_start":63,"line_end":63,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116230,"byte_end":116319,"line_start":64,"line_end":64,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116320,"byte_end":116323,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116324,"byte_end":116414,"line_start":66,"line_end":66,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116415,"byte_end":116496,"line_start":67,"line_end":67,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116497,"byte_end":116583,"line_start":68,"line_end":68,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116584,"byte_end":116587,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116588,"byte_end":116665,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116666,"byte_end":116737,"line_start":71,"line_end":71,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116738,"byte_end":116820,"line_start":72,"line_end":72,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116821,"byte_end":116824,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116825,"byte_end":116840,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116841,"byte_end":116844,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116845,"byte_end":116915,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116916,"byte_end":116989,"line_start":77,"line_end":77,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116990,"byte_end":116993,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":116994,"byte_end":117082,"line_start":79,"line_end":79,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117083,"byte_end":117153,"line_start":80,"line_end":80,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117154,"byte_end":117157,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117158,"byte_end":117252,"line_start":82,"line_end":82,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117253,"byte_end":117333,"line_start":83,"line_end":83,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117334,"byte_end":117337,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117338,"byte_end":117427,"line_start":85,"line_end":85,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117428,"byte_end":117508,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117509,"byte_end":117512,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117513,"byte_end":117593,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117594,"byte_end":117670,"line_start":89,"line_end":89,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117671,"byte_end":117745,"line_start":90,"line_end":90,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117746,"byte_end":117797,"line_start":91,"line_end":91,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117798,"byte_end":117801,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117802,"byte_end":117820,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117821,"byte_end":117824,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117825,"byte_end":117916,"line_start":95,"line_end":95,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117917,"byte_end":117990,"line_start":96,"line_end":96,"column_start":1,"column_end":74}},{"value":"/ The year number is the same as that of the [calendar date](#calendar-date).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":117991,"byte_end":118070,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":118071,"byte_end":118074,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":118075,"byte_end":118140,"line_start":99,"line_end":99,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":369},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":118341,"byte_end":118349,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":118269,"byte_end":118330,"line_start":105,"line_end":105,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":370},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":118499,"byte_end":118507,"line_start":108,"line_end":108,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":118426,"byte_end":118488,"line_start":107,"line_end":107,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120817,"byte_end":120825,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"fn (year: i32, month: u32, day: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120087,"byte_end":120155,"line_start":145,"line_end":145,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120160,"byte_end":120186,"line_start":146,"line_end":146,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120191,"byte_end":120194,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120199,"byte_end":120261,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120266,"byte_end":120269,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120274,"byte_end":120287,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120292,"byte_end":120295,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120300,"byte_end":120308,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120313,"byte_end":120360,"line_start":153,"line_end":153,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120365,"byte_end":120368,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120373,"byte_end":120418,"line_start":155,"line_end":155,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120423,"byte_end":120454,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120459,"byte_end":120488,"line_start":157,"line_end":157,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120493,"byte_end":120521,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120526,"byte_end":120573,"line_start":159,"line_end":159,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120578,"byte_end":120620,"line_start":160,"line_end":160,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120625,"byte_end":120665,"line_start":161,"line_end":161,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120670,"byte_end":120712,"line_start":162,"line_end":162,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120717,"byte_end":120792,"line_start":163,"line_end":163,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120797,"byte_end":120805,"line_start":164,"line_end":164,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121676,"byte_end":121688,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"fn (year: i32, month: u32, day: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":120974,"byte_end":121042,"line_start":169,"line_end":169,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121047,"byte_end":121073,"line_start":170,"line_end":170,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121078,"byte_end":121081,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121086,"byte_end":121156,"line_start":172,"line_end":172,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121161,"byte_end":121164,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121169,"byte_end":121182,"line_start":174,"line_end":174,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121187,"byte_end":121190,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121195,"byte_end":121203,"line_start":176,"line_end":176,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121208,"byte_end":121234,"line_start":177,"line_end":177,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121239,"byte_end":121242,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121247,"byte_end":121294,"line_start":179,"line_end":179,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121299,"byte_end":121302,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121307,"byte_end":121356,"line_start":181,"line_end":181,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121361,"byte_end":121410,"line_start":182,"line_end":182,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121415,"byte_end":121464,"line_start":183,"line_end":183,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121469,"byte_end":121540,"line_start":184,"line_end":184,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121545,"byte_end":121595,"line_start":185,"line_end":185,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121600,"byte_end":121651,"line_start":186,"line_end":186,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121656,"byte_end":121664,"line_start":187,"line_end":187,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122582,"byte_end":122589,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"fn (year: i32, ordinal: u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121867,"byte_end":121933,"line_start":193,"line_end":193,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121938,"byte_end":121969,"line_start":194,"line_end":194,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121974,"byte_end":121977,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":121982,"byte_end":122045,"line_start":196,"line_end":196,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122050,"byte_end":122053,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122058,"byte_end":122071,"line_start":198,"line_end":198,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122076,"byte_end":122079,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122084,"byte_end":122092,"line_start":200,"line_end":200,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122097,"byte_end":122144,"line_start":201,"line_end":201,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122149,"byte_end":122152,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122157,"byte_end":122198,"line_start":203,"line_end":203,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122203,"byte_end":122235,"line_start":204,"line_end":204,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122240,"byte_end":122271,"line_start":205,"line_end":205,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122276,"byte_end":122305,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122310,"byte_end":122338,"line_start":207,"line_end":207,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122343,"byte_end":122385,"line_start":208,"line_end":208,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122390,"byte_end":122430,"line_start":209,"line_end":209,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122435,"byte_end":122477,"line_start":210,"line_end":210,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122482,"byte_end":122557,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122562,"byte_end":122570,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123459,"byte_end":123470,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"fn (year: i32, ordinal: u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122726,"byte_end":122792,"line_start":217,"line_end":217,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122797,"byte_end":122828,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122833,"byte_end":122836,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122841,"byte_end":122912,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122917,"byte_end":122920,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122925,"byte_end":122938,"line_start":222,"line_end":222,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122943,"byte_end":122946,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122951,"byte_end":122959,"line_start":224,"line_end":224,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122964,"byte_end":122990,"line_start":225,"line_end":225,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":122995,"byte_end":122998,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123003,"byte_end":123048,"line_start":227,"line_end":227,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123053,"byte_end":123056,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123061,"byte_end":123107,"line_start":229,"line_end":229,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123112,"byte_end":123156,"line_start":230,"line_end":230,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123161,"byte_end":123207,"line_start":231,"line_end":231,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123212,"byte_end":123258,"line_start":232,"line_end":232,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123263,"byte_end":123331,"line_start":233,"line_end":233,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123336,"byte_end":123382,"line_start":234,"line_end":234,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123387,"byte_end":123434,"line_start":235,"line_end":235,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123439,"byte_end":123447,"line_start":236,"line_end":236,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124476,"byte_end":124487,"line_start":263,"line_end":263,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"fn (year: i32, week: u32, weekday: Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123636,"byte_end":123700,"line_start":242,"line_end":242,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123705,"byte_end":123749,"line_start":243,"line_end":243,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123754,"byte_end":123830,"line_start":244,"line_end":244,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123835,"byte_end":123838,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123843,"byte_end":123906,"line_start":246,"line_end":246,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123911,"byte_end":123914,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123919,"byte_end":123932,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123937,"byte_end":123940,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123945,"byte_end":123953,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":123958,"byte_end":124005,"line_start":251,"line_end":251,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124010,"byte_end":124013,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124018,"byte_end":124077,"line_start":253,"line_end":253,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124082,"byte_end":124124,"line_start":254,"line_end":254,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124129,"byte_end":124169,"line_start":255,"line_end":255,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124174,"byte_end":124216,"line_start":256,"line_end":256,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124221,"byte_end":124252,"line_start":257,"line_end":257,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124257,"byte_end":124286,"line_start":258,"line_end":258,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124291,"byte_end":124319,"line_start":259,"line_end":259,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124324,"byte_end":124371,"line_start":260,"line_end":260,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124376,"byte_end":124451,"line_start":261,"line_end":261,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124456,"byte_end":124464,"line_start":262,"line_end":262,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126850,"byte_end":126865,"line_start":311,"line_end":311,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"fn (year: i32, week: u32, weekday: Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124649,"byte_end":124713,"line_start":267,"line_end":267,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124718,"byte_end":124762,"line_start":268,"line_end":268,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124767,"byte_end":124843,"line_start":269,"line_end":269,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124848,"byte_end":124851,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124856,"byte_end":124927,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124932,"byte_end":124935,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124940,"byte_end":124953,"line_start":273,"line_end":273,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124958,"byte_end":124961,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124966,"byte_end":124974,"line_start":275,"line_end":275,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":124979,"byte_end":125016,"line_start":276,"line_end":276,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125021,"byte_end":125024,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125029,"byte_end":125068,"line_start":278,"line_end":278,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125073,"byte_end":125126,"line_start":279,"line_end":279,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125131,"byte_end":125134,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125139,"byte_end":125200,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125205,"byte_end":125289,"line_start":282,"line_end":282,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125294,"byte_end":125379,"line_start":283,"line_end":283,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125384,"byte_end":125446,"line_start":284,"line_end":284,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125451,"byte_end":125454,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125459,"byte_end":125523,"line_start":286,"line_end":286,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125528,"byte_end":125593,"line_start":287,"line_end":287,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125598,"byte_end":125606,"line_start":288,"line_end":288,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125611,"byte_end":125614,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125619,"byte_end":125698,"line_start":290,"line_end":290,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125703,"byte_end":125706,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125711,"byte_end":125719,"line_start":292,"line_end":292,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125724,"byte_end":125763,"line_start":293,"line_end":293,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125768,"byte_end":125809,"line_start":294,"line_end":294,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125814,"byte_end":125869,"line_start":295,"line_end":295,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125874,"byte_end":125911,"line_start":296,"line_end":296,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125916,"byte_end":125981,"line_start":297,"line_end":297,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":125986,"byte_end":126052,"line_start":298,"line_end":298,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126057,"byte_end":126143,"line_start":299,"line_end":299,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126148,"byte_end":126210,"line_start":300,"line_end":300,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126215,"byte_end":126300,"line_start":301,"line_end":301,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126305,"byte_end":126308,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126313,"byte_end":126378,"line_start":303,"line_end":303,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126383,"byte_end":126448,"line_start":304,"line_end":304,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126453,"byte_end":126490,"line_start":305,"line_end":305,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126495,"byte_end":126581,"line_start":306,"line_end":306,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126586,"byte_end":126670,"line_start":307,"line_end":307,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126675,"byte_end":126737,"line_start":308,"line_end":308,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126742,"byte_end":126825,"line_start":309,"line_end":309,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":126830,"byte_end":126838,"line_start":310,"line_end":310,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129746,"byte_end":129767,"line_start":381,"line_end":381,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"fn (days: i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128015,"byte_end":128104,"line_start":337,"line_end":337,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128109,"byte_end":128138,"line_start":338,"line_end":338,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128143,"byte_end":128146,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128151,"byte_end":128190,"line_start":340,"line_end":340,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128195,"byte_end":128198,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128203,"byte_end":128216,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128221,"byte_end":128224,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128229,"byte_end":128237,"line_start":344,"line_end":344,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128242,"byte_end":128289,"line_start":345,"line_end":345,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128294,"byte_end":128297,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128302,"byte_end":128355,"line_start":347,"line_end":347,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128360,"byte_end":128435,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128440,"byte_end":128471,"line_start":349,"line_end":349,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128476,"byte_end":128505,"line_start":350,"line_end":350,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128510,"byte_end":128538,"line_start":351,"line_end":351,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128543,"byte_end":128590,"line_start":352,"line_end":352,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128595,"byte_end":128637,"line_start":353,"line_end":353,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128642,"byte_end":128682,"line_start":354,"line_end":354,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128687,"byte_end":128729,"line_start":355,"line_end":355,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128734,"byte_end":128742,"line_start":356,"line_end":356,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128747,"byte_end":128750,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128755,"byte_end":128798,"line_start":358,"line_end":358,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128803,"byte_end":128855,"line_start":359,"line_end":359,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128860,"byte_end":128922,"line_start":360,"line_end":360,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128927,"byte_end":128961,"line_start":361,"line_end":361,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":128966,"byte_end":129020,"line_start":362,"line_end":362,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129025,"byte_end":129028,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129033,"byte_end":129041,"line_start":364,"line_end":364,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129046,"byte_end":129072,"line_start":365,"line_end":365,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129077,"byte_end":129080,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129085,"byte_end":129126,"line_start":367,"line_end":367,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129131,"byte_end":129192,"line_start":368,"line_end":368,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129197,"byte_end":129253,"line_start":369,"line_end":369,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129258,"byte_end":129312,"line_start":370,"line_end":370,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129317,"byte_end":129322,"line_start":371,"line_end":371,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129327,"byte_end":129330,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129335,"byte_end":129408,"line_start":373,"line_end":373,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129413,"byte_end":129479,"line_start":374,"line_end":374,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129484,"byte_end":129487,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129492,"byte_end":129558,"line_start":376,"line_end":376,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129563,"byte_end":129633,"line_start":377,"line_end":377,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129638,"byte_end":129707,"line_start":378,"line_end":378,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129712,"byte_end":129720,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129725,"byte_end":129734,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130716,"byte_end":130741,"line_start":405,"line_end":405,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"fn (days: i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129884,"byte_end":129973,"line_start":385,"line_end":385,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":129978,"byte_end":130007,"line_start":386,"line_end":386,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130012,"byte_end":130015,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130020,"byte_end":130067,"line_start":388,"line_end":388,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130072,"byte_end":130075,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130080,"byte_end":130093,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130098,"byte_end":130101,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130106,"byte_end":130114,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130119,"byte_end":130145,"line_start":393,"line_end":393,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130150,"byte_end":130153,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130158,"byte_end":130220,"line_start":395,"line_end":395,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130225,"byte_end":130264,"line_start":396,"line_end":396,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130269,"byte_end":130272,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130277,"byte_end":130350,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130355,"byte_end":130425,"line_start":399,"line_end":399,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130430,"byte_end":130502,"line_start":400,"line_end":400,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130507,"byte_end":130579,"line_start":401,"line_end":401,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130584,"byte_end":130635,"line_start":402,"line_end":402,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130640,"byte_end":130691,"line_start":403,"line_end":403,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":130696,"byte_end":130704,"line_start":404,"line_end":404,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132478,"byte_end":132499,"line_start":439,"line_end":439,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131194,"byte_end":131287,"line_start":414,"line_end":414,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131292,"byte_end":131386,"line_start":415,"line_end":415,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131391,"byte_end":131476,"line_start":416,"line_end":416,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131481,"byte_end":131484,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131489,"byte_end":131501,"line_start":418,"line_end":418,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131506,"byte_end":131509,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ The resulting `NaiveDate` is guaranteed to be in `month`.  If `n` is larger than the number","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131514,"byte_end":131609,"line_start":420,"line_end":420,"column_start":5,"column_end":100}},{"value":"/ of `weekday` in `month` (eg. the 6th Friday of March 2017) then this function will panic.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131614,"byte_end":131707,"line_start":421,"line_end":421,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131712,"byte_end":131715,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ `n` is 1-indexed.  Passing `n=0` will cause a panic.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131720,"byte_end":131776,"line_start":423,"line_end":423,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131781,"byte_end":131784,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131789,"byte_end":131802,"line_start":425,"line_end":425,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131807,"byte_end":131810,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131815,"byte_end":131823,"line_start":427,"line_end":427,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131828,"byte_end":131865,"line_start":428,"line_end":428,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131870,"byte_end":131873,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let from_weekday_of_month = NaiveDate::from_weekday_of_month;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131878,"byte_end":131943,"line_start":430,"line_end":430,"column_start":5,"column_end":70}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131948,"byte_end":131987,"line_start":431,"line_end":431,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":131992,"byte_end":131995,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Wed, 1), from_ymd(2018, 8, 1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132000,"byte_end":132086,"line_start":433,"line_end":433,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 1), from_ymd(2018, 8, 3));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132091,"byte_end":132177,"line_start":434,"line_end":434,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Tue, 2), from_ymd(2018, 8, 14));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132182,"byte_end":132269,"line_start":435,"line_end":435,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 4), from_ymd(2018, 8, 24));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132274,"byte_end":132361,"line_start":436,"line_end":436,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 5), from_ymd(2018, 8, 31));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132366,"byte_end":132453,"line_start":437,"line_end":437,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132458,"byte_end":132466,"line_start":438,"line_end":438,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133374,"byte_end":133399,"line_start":455,"line_end":455,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"fn (year: i32, month: u32, weekday: Weekday, n: u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132672,"byte_end":132765,"line_start":443,"line_end":443,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132770,"byte_end":132864,"line_start":444,"line_end":444,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132869,"byte_end":132973,"line_start":445,"line_end":445,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132978,"byte_end":132981,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132986,"byte_end":132994,"line_start":447,"line_end":447,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":132999,"byte_end":133036,"line_start":448,"line_end":448,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133041,"byte_end":133119,"line_start":449,"line_end":449,"column_start":5,"column_end":83}},{"value":"/            NaiveDate::from_ymd_opt(2017, 3, 10))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133124,"byte_end":133176,"line_start":450,"line_end":450,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133181,"byte_end":133189,"line_start":451,"line_end":451,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133194,"byte_end":133197,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `n` out-of-range; ie. if `n` is larger than the number of `weekday` in","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133202,"byte_end":133294,"line_start":453,"line_end":453,"column_start":5,"column_end":97}},{"value":"/ `month` (eg. the 6th Friday of March 2017), or if `n == 0`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133299,"byte_end":133362,"line_start":454,"line_end":454,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135360,"byte_end":135374,"line_start":505,"line_end":505,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133791,"byte_end":133874,"line_start":463,"line_end":463,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133879,"byte_end":133949,"line_start":464,"line_end":464,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133954,"byte_end":133992,"line_start":465,"line_end":465,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":133997,"byte_end":134000,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134005,"byte_end":134018,"line_start":467,"line_end":467,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134023,"byte_end":134026,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134031,"byte_end":134039,"line_start":469,"line_end":469,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134044,"byte_end":134070,"line_start":470,"line_end":470,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134075,"byte_end":134078,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134083,"byte_end":134134,"line_start":472,"line_end":472,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134139,"byte_end":134142,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134147,"byte_end":134203,"line_start":474,"line_end":474,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134208,"byte_end":134260,"line_start":475,"line_end":475,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134265,"byte_end":134317,"line_start":476,"line_end":476,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134322,"byte_end":134374,"line_start":477,"line_end":477,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134379,"byte_end":134387,"line_start":478,"line_end":478,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134392,"byte_end":134395,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134400,"byte_end":134458,"line_start":480,"line_end":480,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134463,"byte_end":134466,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134471,"byte_end":134479,"line_start":482,"line_end":482,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134484,"byte_end":134512,"line_start":483,"line_end":483,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134517,"byte_end":134570,"line_start":484,"line_end":484,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134575,"byte_end":134656,"line_start":485,"line_end":485,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134661,"byte_end":134714,"line_start":486,"line_end":486,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134719,"byte_end":134727,"line_start":487,"line_end":487,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134732,"byte_end":134735,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134740,"byte_end":134797,"line_start":489,"line_end":489,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134802,"byte_end":134805,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134810,"byte_end":134818,"line_start":491,"line_end":491,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134823,"byte_end":134851,"line_start":492,"line_end":492,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134856,"byte_end":134909,"line_start":493,"line_end":493,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134914,"byte_end":134970,"line_start":494,"line_end":494,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":134975,"byte_end":135037,"line_start":495,"line_end":495,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135042,"byte_end":135050,"line_start":496,"line_end":496,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135055,"byte_end":135058,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135063,"byte_end":135145,"line_start":498,"line_end":498,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135150,"byte_end":135153,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135158,"byte_end":135166,"line_start":500,"line_end":500,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135171,"byte_end":135199,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135204,"byte_end":135257,"line_start":502,"line_end":502,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135262,"byte_end":135335,"line_start":503,"line_end":503,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135340,"byte_end":135348,"line_start":504,"line_end":504,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136023,"byte_end":136031,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"fn (&self, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135562,"byte_end":135638,"line_start":511,"line_end":511,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135643,"byte_end":135646,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135651,"byte_end":135664,"line_start":513,"line_end":513,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135669,"byte_end":135672,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135677,"byte_end":135685,"line_start":515,"line_end":515,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135690,"byte_end":135744,"line_start":516,"line_end":516,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135749,"byte_end":135752,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135757,"byte_end":135801,"line_start":518,"line_end":518,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135806,"byte_end":135861,"line_start":519,"line_end":519,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135866,"byte_end":135869,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135874,"byte_end":135916,"line_start":521,"line_end":521,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135921,"byte_end":135950,"line_start":522,"line_end":522,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135955,"byte_end":135984,"line_start":523,"line_end":523,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":135989,"byte_end":135997,"line_start":524,"line_end":524,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136002,"byte_end":136011,"line_start":525,"line_end":525,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136847,"byte_end":136854,"line_start":550,"line_end":550,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136126,"byte_end":136205,"line_start":530,"line_end":530,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136210,"byte_end":136213,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136218,"byte_end":136301,"line_start":532,"line_end":532,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136306,"byte_end":136380,"line_start":533,"line_end":533,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136385,"byte_end":136388,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136393,"byte_end":136442,"line_start":535,"line_end":535,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136447,"byte_end":136450,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136455,"byte_end":136468,"line_start":537,"line_end":537,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136473,"byte_end":136476,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136481,"byte_end":136489,"line_start":539,"line_end":539,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136494,"byte_end":136566,"line_start":540,"line_end":540,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136571,"byte_end":136574,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136579,"byte_end":136623,"line_start":542,"line_end":542,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136628,"byte_end":136631,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136636,"byte_end":136686,"line_start":544,"line_end":544,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136691,"byte_end":136723,"line_start":545,"line_end":545,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136728,"byte_end":136771,"line_start":546,"line_end":546,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136776,"byte_end":136808,"line_start":547,"line_end":547,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136813,"byte_end":136821,"line_start":548,"line_end":548,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136826,"byte_end":136835,"line_start":549,"line_end":549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137740,"byte_end":137751,"line_start":573,"line_end":573,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":136987,"byte_end":137066,"line_start":554,"line_end":554,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137071,"byte_end":137074,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137079,"byte_end":137162,"line_start":556,"line_end":556,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137167,"byte_end":137245,"line_start":557,"line_end":557,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137250,"byte_end":137253,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137258,"byte_end":137315,"line_start":559,"line_end":559,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137320,"byte_end":137323,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137328,"byte_end":137341,"line_start":561,"line_end":561,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137346,"byte_end":137349,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137354,"byte_end":137362,"line_start":563,"line_end":563,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137367,"byte_end":137393,"line_start":564,"line_end":564,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137398,"byte_end":137401,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137406,"byte_end":137450,"line_start":566,"line_end":566,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137455,"byte_end":137504,"line_start":567,"line_end":567,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137509,"byte_end":137593,"line_start":568,"line_end":568,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137598,"byte_end":137647,"line_start":569,"line_end":569,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137652,"byte_end":137701,"line_start":570,"line_end":570,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137706,"byte_end":137714,"line_start":571,"line_end":571,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137719,"byte_end":137728,"line_start":572,"line_end":572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138690,"byte_end":138703,"line_start":598,"line_end":598,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":137908,"byte_end":138000,"line_start":577,"line_end":577,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138005,"byte_end":138008,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138013,"byte_end":138054,"line_start":579,"line_end":579,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138059,"byte_end":138149,"line_start":580,"line_end":580,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138154,"byte_end":138157,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138162,"byte_end":138224,"line_start":582,"line_end":582,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138229,"byte_end":138232,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138237,"byte_end":138250,"line_start":584,"line_end":584,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138255,"byte_end":138258,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138263,"byte_end":138271,"line_start":586,"line_end":586,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138276,"byte_end":138348,"line_start":587,"line_end":587,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138353,"byte_end":138356,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138361,"byte_end":138405,"line_start":589,"line_end":589,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138410,"byte_end":138413,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138418,"byte_end":138479,"line_start":591,"line_end":591,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138484,"byte_end":138516,"line_start":592,"line_end":592,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138521,"byte_end":138564,"line_start":593,"line_end":593,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138569,"byte_end":138601,"line_start":594,"line_end":594,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138606,"byte_end":138651,"line_start":595,"line_end":595,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138656,"byte_end":138664,"line_start":596,"line_end":596,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138669,"byte_end":138678,"line_start":597,"line_end":597,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139776,"byte_end":139793,"line_start":623,"line_end":623,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138861,"byte_end":138953,"line_start":602,"line_end":602,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138958,"byte_end":138961,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":138966,"byte_end":139007,"line_start":604,"line_end":604,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139012,"byte_end":139102,"line_start":605,"line_end":605,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139107,"byte_end":139110,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139115,"byte_end":139185,"line_start":607,"line_end":607,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139190,"byte_end":139193,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139198,"byte_end":139211,"line_start":609,"line_end":609,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139216,"byte_end":139219,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139224,"byte_end":139232,"line_start":611,"line_end":611,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139237,"byte_end":139263,"line_start":612,"line_end":612,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139268,"byte_end":139271,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139276,"byte_end":139320,"line_start":614,"line_end":614,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139325,"byte_end":139387,"line_start":615,"line_end":615,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139392,"byte_end":139469,"line_start":616,"line_end":616,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139474,"byte_end":139536,"line_start":617,"line_end":617,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139541,"byte_end":139603,"line_start":618,"line_end":618,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139608,"byte_end":139670,"line_start":619,"line_end":619,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139675,"byte_end":139737,"line_start":620,"line_end":620,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139742,"byte_end":139750,"line_start":621,"line_end":621,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":139755,"byte_end":139764,"line_start":622,"line_end":622,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140794,"byte_end":140807,"line_start":649,"line_end":649,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140004,"byte_end":140096,"line_start":628,"line_end":628,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140101,"byte_end":140104,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140109,"byte_end":140154,"line_start":630,"line_end":630,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140159,"byte_end":140249,"line_start":631,"line_end":631,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140254,"byte_end":140257,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140262,"byte_end":140324,"line_start":633,"line_end":633,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140329,"byte_end":140332,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140337,"byte_end":140350,"line_start":635,"line_end":635,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140355,"byte_end":140358,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140363,"byte_end":140371,"line_start":637,"line_end":637,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140376,"byte_end":140448,"line_start":638,"line_end":638,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140453,"byte_end":140456,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140461,"byte_end":140505,"line_start":640,"line_end":640,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140510,"byte_end":140513,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140518,"byte_end":140583,"line_start":642,"line_end":642,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140588,"byte_end":140620,"line_start":643,"line_end":643,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140625,"byte_end":140668,"line_start":644,"line_end":644,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140673,"byte_end":140705,"line_start":645,"line_end":645,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140710,"byte_end":140755,"line_start":646,"line_end":646,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140760,"byte_end":140768,"line_start":647,"line_end":647,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140773,"byte_end":140782,"line_start":648,"line_end":648,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141908,"byte_end":141925,"line_start":674,"line_end":674,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":140965,"byte_end":141057,"line_start":653,"line_end":653,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141062,"byte_end":141065,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141070,"byte_end":141115,"line_start":655,"line_end":655,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141120,"byte_end":141210,"line_start":656,"line_end":656,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141215,"byte_end":141218,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141223,"byte_end":141293,"line_start":658,"line_end":658,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141298,"byte_end":141301,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141306,"byte_end":141319,"line_start":660,"line_end":660,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141324,"byte_end":141327,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141332,"byte_end":141340,"line_start":662,"line_end":662,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141345,"byte_end":141371,"line_start":663,"line_end":663,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141376,"byte_end":141379,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141384,"byte_end":141428,"line_start":665,"line_end":665,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141433,"byte_end":141499,"line_start":666,"line_end":666,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141504,"byte_end":141585,"line_start":667,"line_end":667,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141590,"byte_end":141656,"line_start":668,"line_end":668,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141661,"byte_end":141727,"line_start":669,"line_end":669,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141732,"byte_end":141798,"line_start":670,"line_end":670,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141803,"byte_end":141869,"line_start":671,"line_end":671,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141874,"byte_end":141882,"line_start":672,"line_end":672,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":141887,"byte_end":141896,"line_start":673,"line_end":673,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142930,"byte_end":142942,"line_start":700,"line_end":700,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142136,"byte_end":142227,"line_start":679,"line_end":679,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142232,"byte_end":142235,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142240,"byte_end":142288,"line_start":681,"line_end":681,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142293,"byte_end":142383,"line_start":682,"line_end":682,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142388,"byte_end":142391,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142396,"byte_end":142457,"line_start":684,"line_end":684,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142462,"byte_end":142465,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142470,"byte_end":142483,"line_start":686,"line_end":686,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142488,"byte_end":142491,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142496,"byte_end":142504,"line_start":688,"line_end":688,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142509,"byte_end":142581,"line_start":689,"line_end":689,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142586,"byte_end":142589,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142594,"byte_end":142638,"line_start":691,"line_end":691,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142643,"byte_end":142646,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142651,"byte_end":142719,"line_start":693,"line_end":693,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142724,"byte_end":142756,"line_start":694,"line_end":694,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142761,"byte_end":142804,"line_start":695,"line_end":695,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142809,"byte_end":142841,"line_start":696,"line_end":696,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142846,"byte_end":142891,"line_start":697,"line_end":697,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142896,"byte_end":142904,"line_start":698,"line_end":698,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":142909,"byte_end":142918,"line_start":699,"line_end":699,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144059,"byte_end":144075,"line_start":725,"line_end":725,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143097,"byte_end":143188,"line_start":704,"line_end":704,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143193,"byte_end":143196,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143201,"byte_end":143249,"line_start":706,"line_end":706,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143254,"byte_end":143344,"line_start":707,"line_end":707,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143349,"byte_end":143352,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143357,"byte_end":143426,"line_start":709,"line_end":709,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143431,"byte_end":143434,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143439,"byte_end":143452,"line_start":711,"line_end":711,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143457,"byte_end":143460,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143465,"byte_end":143473,"line_start":713,"line_end":713,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143478,"byte_end":143504,"line_start":714,"line_end":714,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143509,"byte_end":143512,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143517,"byte_end":143561,"line_start":716,"line_end":716,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143566,"byte_end":143635,"line_start":717,"line_end":717,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143640,"byte_end":143724,"line_start":718,"line_end":718,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143729,"byte_end":143798,"line_start":719,"line_end":719,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143803,"byte_end":143872,"line_start":720,"line_end":720,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143877,"byte_end":143946,"line_start":721,"line_end":721,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":143951,"byte_end":144020,"line_start":722,"line_end":722,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144025,"byte_end":144033,"line_start":723,"line_end":723,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":144038,"byte_end":144047,"line_start":724,"line_end":724,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145748,"byte_end":145752,"line_start":777,"line_end":777,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145216,"byte_end":145271,"line_start":763,"line_end":763,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145276,"byte_end":145279,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145284,"byte_end":145338,"line_start":765,"line_end":765,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145343,"byte_end":145346,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145351,"byte_end":145364,"line_start":767,"line_end":767,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145369,"byte_end":145372,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145377,"byte_end":145385,"line_start":769,"line_end":769,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145390,"byte_end":145416,"line_start":770,"line_end":770,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145421,"byte_end":145424,"line_start":771,"line_end":771,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145429,"byte_end":145519,"line_start":772,"line_end":772,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145524,"byte_end":145614,"line_start":773,"line_end":773,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145619,"byte_end":145709,"line_start":774,"line_end":774,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145714,"byte_end":145722,"line_start":775,"line_end":775,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145727,"byte_end":145736,"line_start":776,"line_end":776,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146294,"byte_end":146302,"line_start":796,"line_end":796,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145833,"byte_end":145888,"line_start":781,"line_end":781,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145893,"byte_end":145896,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145901,"byte_end":145963,"line_start":783,"line_end":783,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145968,"byte_end":145971,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145976,"byte_end":145989,"line_start":785,"line_end":785,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":145994,"byte_end":145997,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146002,"byte_end":146010,"line_start":787,"line_end":787,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146015,"byte_end":146041,"line_start":788,"line_end":788,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146046,"byte_end":146078,"line_start":789,"line_end":789,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146083,"byte_end":146086,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146091,"byte_end":146149,"line_start":791,"line_end":791,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146154,"byte_end":146208,"line_start":792,"line_end":792,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146213,"byte_end":146255,"line_start":793,"line_end":793,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146260,"byte_end":146268,"line_start":794,"line_end":794,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146273,"byte_end":146282,"line_start":795,"line_end":795,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146979,"byte_end":146983,"line_start":814,"line_end":814,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146442,"byte_end":146501,"line_start":800,"line_end":800,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146506,"byte_end":146509,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146514,"byte_end":146569,"line_start":802,"line_end":802,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146574,"byte_end":146577,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146582,"byte_end":146595,"line_start":804,"line_end":804,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146600,"byte_end":146603,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146608,"byte_end":146616,"line_start":806,"line_end":806,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146621,"byte_end":146647,"line_start":807,"line_end":807,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146652,"byte_end":146655,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146660,"byte_end":146750,"line_start":809,"line_end":809,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146755,"byte_end":146845,"line_start":810,"line_end":810,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146850,"byte_end":146940,"line_start":811,"line_end":811,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146945,"byte_end":146953,"line_start":812,"line_end":812,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":146958,"byte_end":146967,"line_start":813,"line_end":813,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147530,"byte_end":147538,"line_start":833,"line_end":833,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"fn (&self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147064,"byte_end":147123,"line_start":818,"line_end":818,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147128,"byte_end":147131,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147136,"byte_end":147199,"line_start":820,"line_end":820,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147204,"byte_end":147207,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147212,"byte_end":147225,"line_start":822,"line_end":822,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147230,"byte_end":147233,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147238,"byte_end":147246,"line_start":824,"line_end":824,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147251,"byte_end":147277,"line_start":825,"line_end":825,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147282,"byte_end":147314,"line_start":826,"line_end":826,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147319,"byte_end":147322,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147327,"byte_end":147385,"line_start":828,"line_end":828,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147390,"byte_end":147444,"line_start":829,"line_end":829,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147449,"byte_end":147491,"line_start":830,"line_end":830,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147496,"byte_end":147504,"line_start":831,"line_end":831,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147509,"byte_end":147518,"line_start":832,"line_end":832,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148585,"byte_end":148603,"line_start":859,"line_end":859,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147680,"byte_end":147745,"line_start":837,"line_end":837,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147750,"byte_end":147753,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147758,"byte_end":147809,"line_start":839,"line_end":839,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147814,"byte_end":147817,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147822,"byte_end":147835,"line_start":841,"line_end":841,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147840,"byte_end":147843,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147848,"byte_end":147856,"line_start":843,"line_end":843,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147861,"byte_end":147918,"line_start":844,"line_end":844,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147923,"byte_end":147949,"line_start":845,"line_end":845,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147954,"byte_end":147986,"line_start":846,"line_end":846,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":147991,"byte_end":148014,"line_start":847,"line_end":847,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148019,"byte_end":148022,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148027,"byte_end":148071,"line_start":849,"line_end":849,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148076,"byte_end":148132,"line_start":850,"line_end":850,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148137,"byte_end":148193,"line_start":851,"line_end":851,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148198,"byte_end":148255,"line_start":852,"line_end":852,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148260,"byte_end":148315,"line_start":853,"line_end":853,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148320,"byte_end":148394,"line_start":854,"line_end":854,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148399,"byte_end":148474,"line_start":855,"line_end":855,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148479,"byte_end":148548,"line_start":856,"line_end":856,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148553,"byte_end":148560,"line_start":857,"line_end":857,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":148565,"byte_end":148573,"line_start":858,"line_end":858,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150236,"byte_end":150254,"line_start":895,"line_end":895,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149324,"byte_end":149396,"line_start":873,"line_end":873,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149401,"byte_end":149404,"line_start":874,"line_end":874,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149409,"byte_end":149460,"line_start":875,"line_end":875,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149465,"byte_end":149468,"line_start":876,"line_end":876,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149473,"byte_end":149486,"line_start":877,"line_end":877,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149491,"byte_end":149494,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149499,"byte_end":149507,"line_start":879,"line_end":879,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149512,"byte_end":149569,"line_start":880,"line_end":880,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149574,"byte_end":149600,"line_start":881,"line_end":881,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149605,"byte_end":149637,"line_start":882,"line_end":882,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149642,"byte_end":149665,"line_start":883,"line_end":883,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149670,"byte_end":149673,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149678,"byte_end":149722,"line_start":885,"line_end":885,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149727,"byte_end":149783,"line_start":886,"line_end":886,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149788,"byte_end":149843,"line_start":887,"line_end":887,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149848,"byte_end":149905,"line_start":888,"line_end":888,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149910,"byte_end":149966,"line_start":889,"line_end":889,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":149971,"byte_end":150045,"line_start":890,"line_end":890,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150050,"byte_end":150125,"line_start":891,"line_end":891,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150130,"byte_end":150199,"line_start":892,"line_end":892,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150204,"byte_end":150211,"line_start":893,"line_end":893,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150216,"byte_end":150224,"line_start":894,"line_end":894,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152180,"byte_end":152201,"line_start":934,"line_end":934,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"fn (self, rhs: NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":150975,"byte_end":151031,"line_start":909,"line_end":909,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151036,"byte_end":151081,"line_start":910,"line_end":910,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151086,"byte_end":151089,"line_start":911,"line_end":911,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151094,"byte_end":151141,"line_start":912,"line_end":912,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151146,"byte_end":151205,"line_start":913,"line_end":913,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151210,"byte_end":151213,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151218,"byte_end":151231,"line_start":915,"line_end":915,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151236,"byte_end":151239,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151244,"byte_end":151252,"line_start":917,"line_end":917,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151257,"byte_end":151314,"line_start":918,"line_end":918,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151319,"byte_end":151345,"line_start":919,"line_end":919,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151350,"byte_end":151373,"line_start":920,"line_end":920,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151378,"byte_end":151381,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151386,"byte_end":151425,"line_start":922,"line_end":922,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151430,"byte_end":151479,"line_start":923,"line_end":923,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151484,"byte_end":151487,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151492,"byte_end":151576,"line_start":925,"line_end":925,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151581,"byte_end":151668,"line_start":926,"line_end":926,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151673,"byte_end":151759,"line_start":927,"line_end":927,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151764,"byte_end":151852,"line_start":928,"line_end":928,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151857,"byte_end":151944,"line_start":929,"line_end":929,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":151949,"byte_end":152042,"line_start":930,"line_end":930,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152047,"byte_end":152143,"line_start":931,"line_end":931,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152148,"byte_end":152155,"line_start":932,"line_end":932,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152160,"byte_end":152168,"line_start":933,"line_end":933,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153964,"byte_end":153981,"line_start":974,"line_end":974,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152795,"byte_end":152852,"line_start":945,"line_end":945,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary `format` method.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152857,"byte_end":152918,"line_start":946,"line_end":946,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152923,"byte_end":152926,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152931,"byte_end":152981,"line_start":948,"line_end":948,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":152986,"byte_end":153064,"line_start":949,"line_end":949,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153069,"byte_end":153072,"line_start":950,"line_end":950,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153077,"byte_end":153090,"line_start":951,"line_end":951,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153095,"byte_end":153098,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153103,"byte_end":153111,"line_start":953,"line_end":953,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153116,"byte_end":153142,"line_start":954,"line_end":954,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153147,"byte_end":153195,"line_start":955,"line_end":955,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153200,"byte_end":153203,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153208,"byte_end":153253,"line_start":957,"line_end":957,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153258,"byte_end":153302,"line_start":958,"line_end":958,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153307,"byte_end":153382,"line_start":959,"line_end":959,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153387,"byte_end":153462,"line_start":960,"line_end":960,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153467,"byte_end":153475,"line_start":961,"line_end":961,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153480,"byte_end":153483,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153488,"byte_end":153572,"line_start":963,"line_end":963,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153577,"byte_end":153580,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153585,"byte_end":153593,"line_start":965,"line_end":965,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153598,"byte_end":153626,"line_start":966,"line_end":966,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153631,"byte_end":153681,"line_start":967,"line_end":967,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153686,"byte_end":153741,"line_start":968,"line_end":968,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153746,"byte_end":153792,"line_start":969,"line_end":969,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153797,"byte_end":153867,"line_start":970,"line_end":970,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153872,"byte_end":153880,"line_start":971,"line_end":971,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153885,"byte_end":153938,"line_start":972,"line_end":972,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":153943,"byte_end":153952,"line_start":973,"line_end":973,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155654,"byte_end":155660,"line_start":1013,"line_end":1013,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154162,"byte_end":154216,"line_start":979,"line_end":979,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154221,"byte_end":154291,"line_start":980,"line_end":980,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154296,"byte_end":154334,"line_start":981,"line_end":981,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154339,"byte_end":154342,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154347,"byte_end":154382,"line_start":983,"line_end":983,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154387,"byte_end":154460,"line_start":984,"line_end":984,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154465,"byte_end":154522,"line_start":985,"line_end":985,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154527,"byte_end":154589,"line_start":986,"line_end":986,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154594,"byte_end":154654,"line_start":987,"line_end":987,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154659,"byte_end":154662,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154667,"byte_end":154731,"line_start":989,"line_end":989,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154736,"byte_end":154799,"line_start":990,"line_end":990,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154804,"byte_end":154879,"line_start":991,"line_end":991,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154884,"byte_end":154887,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154892,"byte_end":154905,"line_start":993,"line_end":993,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154910,"byte_end":154913,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154918,"byte_end":154926,"line_start":995,"line_end":995,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154931,"byte_end":154957,"line_start":996,"line_end":996,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154962,"byte_end":154965,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":154970,"byte_end":155014,"line_start":998,"line_end":998,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155019,"byte_end":155082,"line_start":999,"line_end":999,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155087,"byte_end":155175,"line_start":1000,"line_end":1000,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155180,"byte_end":155188,"line_start":1001,"line_end":1001,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155193,"byte_end":155196,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155201,"byte_end":155285,"line_start":1003,"line_end":1003,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155290,"byte_end":155293,"line_start":1004,"line_end":1004,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155298,"byte_end":155306,"line_start":1005,"line_end":1005,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155311,"byte_end":155339,"line_start":1006,"line_end":1006,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155344,"byte_end":155390,"line_start":1007,"line_end":1007,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155395,"byte_end":155461,"line_start":1008,"line_end":1008,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155466,"byte_end":155557,"line_start":1009,"line_end":1009,"column_start":5,"column_end":96}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155562,"byte_end":155570,"line_start":1010,"line_end":1010,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155575,"byte_end":155628,"line_start":1011,"line_end":1011,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155633,"byte_end":155642,"line_start":1012,"line_end":1012,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1531},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":202999,"byte_end":203006,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1532}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":202593,"byte_end":202611,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":202612,"byte_end":202615,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":202616,"byte_end":202679,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":202680,"byte_end":202755,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":202756,"byte_end":202847,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":202848,"byte_end":202932,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204944,"byte_end":204948,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"fn (&self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204286,"byte_end":204332,"line_start":47,"line_end":47,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204337,"byte_end":204340,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204345,"byte_end":204358,"line_start":49,"line_end":49,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204363,"byte_end":204366,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204371,"byte_end":204379,"line_start":51,"line_end":51,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204384,"byte_end":204431,"line_start":52,"line_end":52,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204436,"byte_end":204439,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204444,"byte_end":204502,"line_start":54,"line_end":54,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204507,"byte_end":204549,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204554,"byte_end":204562,"line_start":56,"line_end":56,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204567,"byte_end":204570,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204575,"byte_end":204637,"line_start":58,"line_end":58,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204642,"byte_end":204671,"line_start":59,"line_end":59,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204676,"byte_end":204679,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204684,"byte_end":204692,"line_start":61,"line_end":61,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204697,"byte_end":204746,"line_start":62,"line_end":62,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204751,"byte_end":204811,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204816,"byte_end":204847,"line_start":64,"line_end":64,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204852,"byte_end":204905,"line_start":65,"line_end":65,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204910,"byte_end":204918,"line_start":66,"line_end":66,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204923,"byte_end":204932,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205398,"byte_end":205402,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204999,"byte_end":205047,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205052,"byte_end":205055,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205060,"byte_end":205143,"line_start":74,"line_end":74,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205148,"byte_end":205151,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205156,"byte_end":205169,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205174,"byte_end":205177,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205182,"byte_end":205190,"line_start":78,"line_end":78,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205195,"byte_end":205242,"line_start":79,"line_end":79,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205247,"byte_end":205250,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205255,"byte_end":205314,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205319,"byte_end":205359,"line_start":82,"line_end":82,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205364,"byte_end":205372,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205377,"byte_end":205386,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205870,"byte_end":205875,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205470,"byte_end":205518,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205523,"byte_end":205526,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205531,"byte_end":205614,"line_start":91,"line_end":91,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205619,"byte_end":205622,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205627,"byte_end":205640,"line_start":93,"line_end":93,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205645,"byte_end":205648,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205653,"byte_end":205661,"line_start":95,"line_end":95,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205666,"byte_end":205713,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205718,"byte_end":205721,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205726,"byte_end":205785,"line_start":98,"line_end":98,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205790,"byte_end":205831,"line_start":99,"line_end":99,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205836,"byte_end":205844,"line_start":100,"line_end":100,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":205849,"byte_end":205858,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1551},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215639,"byte_end":215648,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1552},{"krate":0,"index":1553}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208428,"byte_end":208463,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208464,"byte_end":208544,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208545,"byte_end":208548,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208549,"byte_end":208575,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208576,"byte_end":208579,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208580,"byte_end":208647,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208648,"byte_end":208701,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208702,"byte_end":208780,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208781,"byte_end":208851,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208852,"byte_end":208930,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":208931,"byte_end":209020,"line_start":29,"line_end":29,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209021,"byte_end":209091,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209092,"byte_end":209169,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209170,"byte_end":209201,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209202,"byte_end":209285,"line_start":33,"line_end":33,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209286,"byte_end":209369,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209370,"byte_end":209373,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209374,"byte_end":209411,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209412,"byte_end":209480,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209481,"byte_end":209557,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209558,"byte_end":209639,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209640,"byte_end":209714,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209715,"byte_end":209785,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209786,"byte_end":209871,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209872,"byte_end":209941,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209942,"byte_end":209945,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":209946,"byte_end":210025,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210026,"byte_end":210121,"line_start":46,"line_end":46,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210122,"byte_end":210184,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210185,"byte_end":210248,"line_start":48,"line_end":48,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210249,"byte_end":210252,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210253,"byte_end":210294,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210295,"byte_end":210374,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210375,"byte_end":210455,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210456,"byte_end":210527,"line_start":53,"line_end":53,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210528,"byte_end":210531,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210532,"byte_end":210564,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210565,"byte_end":210568,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210569,"byte_end":210644,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210645,"byte_end":210720,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210721,"byte_end":210769,"line_start":59,"line_end":59,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210770,"byte_end":210838,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210839,"byte_end":210842,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210843,"byte_end":210912,"line_start":62,"line_end":62,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210913,"byte_end":210916,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210917,"byte_end":210925,"line_start":64,"line_end":64,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210926,"byte_end":210980,"line_start":65,"line_end":65,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210981,"byte_end":210984,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":210985,"byte_end":211041,"line_start":67,"line_end":67,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211042,"byte_end":211045,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211046,"byte_end":211128,"line_start":69,"line_end":69,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211129,"byte_end":211132,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211133,"byte_end":211208,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211209,"byte_end":211237,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211238,"byte_end":211246,"line_start":73,"line_end":73,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211247,"byte_end":211250,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211251,"byte_end":211331,"line_start":75,"line_end":75,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211332,"byte_end":211411,"line_start":76,"line_end":76,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211412,"byte_end":211497,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211498,"byte_end":211585,"line_start":78,"line_end":78,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211586,"byte_end":211589,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211590,"byte_end":211622,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211623,"byte_end":211626,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211627,"byte_end":211715,"line_start":82,"line_end":82,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211716,"byte_end":211791,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211792,"byte_end":211866,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211867,"byte_end":211870,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211871,"byte_end":211892,"line_start":86,"line_end":86,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211893,"byte_end":211979,"line_start":87,"line_end":87,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211980,"byte_end":211983,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":211984,"byte_end":212017,"line_start":89,"line_end":89,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212018,"byte_end":212052,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212053,"byte_end":212086,"line_start":91,"line_end":91,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212087,"byte_end":212120,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212121,"byte_end":212174,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212175,"byte_end":212209,"line_start":94,"line_end":94,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212210,"byte_end":212244,"line_start":95,"line_end":95,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212245,"byte_end":212284,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212285,"byte_end":212288,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212289,"byte_end":212310,"line_start":98,"line_end":98,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212311,"byte_end":212397,"line_start":99,"line_end":99,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212398,"byte_end":212401,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212402,"byte_end":212435,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212436,"byte_end":212469,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212470,"byte_end":212504,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212505,"byte_end":212539,"line_start":104,"line_end":104,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212540,"byte_end":212596,"line_start":105,"line_end":105,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212597,"byte_end":212636,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212637,"byte_end":212676,"line_start":107,"line_end":107,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212677,"byte_end":212680,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212681,"byte_end":212698,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212699,"byte_end":212783,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212784,"byte_end":212787,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212788,"byte_end":212824,"line_start":112,"line_end":112,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212825,"byte_end":212859,"line_start":113,"line_end":113,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212860,"byte_end":212894,"line_start":114,"line_end":114,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212895,"byte_end":212955,"line_start":115,"line_end":115,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212956,"byte_end":212995,"line_start":116,"line_end":116,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":212996,"byte_end":213033,"line_start":117,"line_end":117,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213034,"byte_end":213071,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213072,"byte_end":213131,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213132,"byte_end":213208,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213209,"byte_end":213241,"line_start":121,"line_end":121,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213242,"byte_end":213323,"line_start":122,"line_end":122,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213324,"byte_end":213362,"line_start":123,"line_end":123,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213363,"byte_end":213366,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213367,"byte_end":213382,"line_start":125,"line_end":125,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213383,"byte_end":213386,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213387,"byte_end":213455,"line_start":127,"line_end":127,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213456,"byte_end":213459,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213460,"byte_end":213531,"line_start":129,"line_end":129,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213532,"byte_end":213535,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213536,"byte_end":213603,"line_start":131,"line_end":131,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213604,"byte_end":213607,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213608,"byte_end":213660,"line_start":133,"line_end":133,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213661,"byte_end":213752,"line_start":134,"line_end":134,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213753,"byte_end":213786,"line_start":135,"line_end":135,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213787,"byte_end":213790,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213791,"byte_end":213881,"line_start":137,"line_end":137,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213882,"byte_end":213885,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213886,"byte_end":213961,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":213962,"byte_end":214001,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214002,"byte_end":214087,"line_start":141,"line_end":141,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214088,"byte_end":214125,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214126,"byte_end":214129,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214130,"byte_end":214169,"line_start":144,"line_end":144,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214170,"byte_end":214173,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214174,"byte_end":214231,"line_start":146,"line_end":146,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214232,"byte_end":214289,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214290,"byte_end":214346,"line_start":148,"line_end":148,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214347,"byte_end":214424,"line_start":149,"line_end":149,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214425,"byte_end":214428,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214429,"byte_end":214437,"line_start":151,"line_end":151,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214438,"byte_end":214470,"line_start":152,"line_end":152,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214471,"byte_end":214474,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214475,"byte_end":214542,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214543,"byte_end":214603,"line_start":155,"line_end":155,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214604,"byte_end":214612,"line_start":156,"line_end":156,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214613,"byte_end":214616,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214617,"byte_end":214683,"line_start":158,"line_end":158,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214684,"byte_end":214721,"line_start":159,"line_end":159,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214722,"byte_end":214788,"line_start":160,"line_end":160,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214789,"byte_end":214886,"line_start":161,"line_end":161,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214887,"byte_end":214952,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":214953,"byte_end":215008,"line_start":163,"line_end":163,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215009,"byte_end":215012,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215013,"byte_end":215021,"line_start":165,"line_end":165,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215022,"byte_end":215064,"line_start":166,"line_end":166,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215065,"byte_end":215068,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215069,"byte_end":215135,"line_start":168,"line_end":168,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215136,"byte_end":215196,"line_start":169,"line_end":169,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215197,"byte_end":215200,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215201,"byte_end":215254,"line_start":171,"line_end":171,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215255,"byte_end":215315,"line_start":172,"line_end":172,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215316,"byte_end":215398,"line_start":173,"line_end":173,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215399,"byte_end":215407,"line_start":174,"line_end":174,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215408,"byte_end":215411,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215412,"byte_end":215482,"line_start":176,"line_end":176,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215483,"byte_end":215572,"line_start":177,"line_end":177,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216306,"byte_end":216314,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"fn (hour: u32, min: u32, sec: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215705,"byte_end":215762,"line_start":185,"line_end":185,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215767,"byte_end":215770,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215775,"byte_end":215835,"line_start":187,"line_end":187,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215840,"byte_end":215915,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215920,"byte_end":215923,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215928,"byte_end":215977,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215982,"byte_end":215985,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215990,"byte_end":216003,"line_start":192,"line_end":192,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216008,"byte_end":216011,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216016,"byte_end":216024,"line_start":194,"line_end":194,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216029,"byte_end":216067,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216072,"byte_end":216075,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216080,"byte_end":216123,"line_start":197,"line_end":197,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216128,"byte_end":216157,"line_start":198,"line_end":198,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216162,"byte_end":216193,"line_start":199,"line_end":199,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216198,"byte_end":216228,"line_start":200,"line_end":200,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216233,"byte_end":216267,"line_start":201,"line_end":201,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216272,"byte_end":216280,"line_start":202,"line_end":202,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216285,"byte_end":216294,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217171,"byte_end":217183,"line_start":229,"line_end":229,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"fn (hour: u32, min: u32, sec: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216443,"byte_end":216500,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216505,"byte_end":216508,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216513,"byte_end":216573,"line_start":210,"line_end":210,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216578,"byte_end":216657,"line_start":211,"line_end":211,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216662,"byte_end":216665,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216670,"byte_end":216727,"line_start":213,"line_end":213,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216732,"byte_end":216735,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216740,"byte_end":216753,"line_start":215,"line_end":215,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216758,"byte_end":216761,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216766,"byte_end":216774,"line_start":217,"line_end":217,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216779,"byte_end":216805,"line_start":218,"line_end":218,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216810,"byte_end":216813,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216818,"byte_end":216865,"line_start":220,"line_end":220,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216870,"byte_end":216873,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216878,"byte_end":216923,"line_start":222,"line_end":222,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216928,"byte_end":216976,"line_start":223,"line_end":223,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":216981,"byte_end":217027,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217032,"byte_end":217079,"line_start":225,"line_end":225,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217084,"byte_end":217132,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217137,"byte_end":217145,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217150,"byte_end":217159,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217924,"byte_end":217938,"line_start":252,"line_end":252,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217305,"byte_end":217375,"line_start":233,"line_end":233,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217380,"byte_end":217383,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217388,"byte_end":217429,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217434,"byte_end":217501,"line_start":236,"line_end":236,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217506,"byte_end":217509,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217514,"byte_end":217576,"line_start":238,"line_end":238,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217581,"byte_end":217584,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217589,"byte_end":217602,"line_start":240,"line_end":240,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217607,"byte_end":217610,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217615,"byte_end":217623,"line_start":242,"line_end":242,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217628,"byte_end":217666,"line_start":243,"line_end":243,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217671,"byte_end":217674,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217679,"byte_end":217732,"line_start":245,"line_end":245,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217737,"byte_end":217766,"line_start":246,"line_end":246,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217771,"byte_end":217802,"line_start":247,"line_end":247,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217807,"byte_end":217837,"line_start":248,"line_end":248,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217842,"byte_end":217885,"line_start":249,"line_end":249,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217890,"byte_end":217898,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":217903,"byte_end":217912,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218998,"byte_end":219016,"line_start":279,"line_end":279,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"fn (hour: u32, min: u32, sec: u32, milli: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218092,"byte_end":218162,"line_start":256,"line_end":256,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218167,"byte_end":218170,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218175,"byte_end":218216,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218221,"byte_end":218288,"line_start":259,"line_end":259,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218293,"byte_end":218296,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218301,"byte_end":218371,"line_start":261,"line_end":261,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218376,"byte_end":218379,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218384,"byte_end":218397,"line_start":263,"line_end":263,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218402,"byte_end":218405,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218410,"byte_end":218418,"line_start":265,"line_end":265,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218423,"byte_end":218449,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218454,"byte_end":218457,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218462,"byte_end":218516,"line_start":268,"line_end":268,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218521,"byte_end":218524,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218529,"byte_end":218578,"line_start":270,"line_end":270,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218583,"byte_end":218637,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218642,"byte_end":218730,"line_start":272,"line_end":272,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218735,"byte_end":218785,"line_start":273,"line_end":273,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218790,"byte_end":218841,"line_start":274,"line_end":274,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218846,"byte_end":218898,"line_start":275,"line_end":275,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218903,"byte_end":218959,"line_start":276,"line_end":276,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218964,"byte_end":218972,"line_start":277,"line_end":277,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":218977,"byte_end":218986,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219840,"byte_end":219854,"line_start":303,"line_end":303,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219213,"byte_end":219283,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219288,"byte_end":219291,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219296,"byte_end":219341,"line_start":286,"line_end":286,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219346,"byte_end":219413,"line_start":287,"line_end":287,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219418,"byte_end":219421,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219426,"byte_end":219488,"line_start":289,"line_end":289,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219493,"byte_end":219496,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219501,"byte_end":219514,"line_start":291,"line_end":291,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219519,"byte_end":219522,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219527,"byte_end":219535,"line_start":293,"line_end":293,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219540,"byte_end":219578,"line_start":294,"line_end":294,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219583,"byte_end":219586,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219591,"byte_end":219648,"line_start":296,"line_end":296,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219653,"byte_end":219682,"line_start":297,"line_end":297,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219687,"byte_end":219718,"line_start":298,"line_end":298,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219723,"byte_end":219753,"line_start":299,"line_end":299,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219758,"byte_end":219801,"line_start":300,"line_end":300,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219806,"byte_end":219814,"line_start":301,"line_end":301,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":219819,"byte_end":219828,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220930,"byte_end":220948,"line_start":330,"line_end":330,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"fn (hour: u32, min: u32, sec: u32, micro: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220008,"byte_end":220078,"line_start":307,"line_end":307,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220083,"byte_end":220086,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220091,"byte_end":220136,"line_start":309,"line_end":309,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220141,"byte_end":220208,"line_start":310,"line_end":310,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220213,"byte_end":220216,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220221,"byte_end":220291,"line_start":312,"line_end":312,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220296,"byte_end":220299,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220304,"byte_end":220317,"line_start":314,"line_end":314,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220322,"byte_end":220325,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220330,"byte_end":220338,"line_start":316,"line_end":316,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220343,"byte_end":220369,"line_start":317,"line_end":317,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220374,"byte_end":220377,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220382,"byte_end":220436,"line_start":319,"line_end":319,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220441,"byte_end":220444,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220449,"byte_end":220498,"line_start":321,"line_end":321,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220503,"byte_end":220561,"line_start":322,"line_end":322,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220566,"byte_end":220658,"line_start":323,"line_end":323,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220663,"byte_end":220713,"line_start":324,"line_end":324,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220718,"byte_end":220769,"line_start":325,"line_end":325,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220774,"byte_end":220826,"line_start":326,"line_end":326,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220831,"byte_end":220891,"line_start":327,"line_end":327,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220896,"byte_end":220904,"line_start":328,"line_end":328,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":220909,"byte_end":220918,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221772,"byte_end":221785,"line_start":354,"line_end":354,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221141,"byte_end":221210,"line_start":335,"line_end":335,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221215,"byte_end":221218,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221223,"byte_end":221271,"line_start":337,"line_end":337,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221276,"byte_end":221343,"line_start":338,"line_end":338,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221348,"byte_end":221351,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221356,"byte_end":221417,"line_start":340,"line_end":340,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221422,"byte_end":221425,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221430,"byte_end":221443,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221448,"byte_end":221451,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221456,"byte_end":221464,"line_start":344,"line_end":344,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221469,"byte_end":221507,"line_start":345,"line_end":345,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221512,"byte_end":221515,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221520,"byte_end":221580,"line_start":347,"line_end":347,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221585,"byte_end":221614,"line_start":348,"line_end":348,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221619,"byte_end":221650,"line_start":349,"line_end":349,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221655,"byte_end":221685,"line_start":350,"line_end":350,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221690,"byte_end":221733,"line_start":351,"line_end":351,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221738,"byte_end":221746,"line_start":352,"line_end":352,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221751,"byte_end":221760,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222870,"byte_end":222887,"line_start":381,"line_end":381,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"fn (hour: u32, min: u32, sec: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":221936,"byte_end":222005,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222010,"byte_end":222013,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222018,"byte_end":222066,"line_start":360,"line_end":360,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222071,"byte_end":222138,"line_start":361,"line_end":361,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222143,"byte_end":222146,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222151,"byte_end":222220,"line_start":363,"line_end":363,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222225,"byte_end":222228,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222233,"byte_end":222246,"line_start":365,"line_end":365,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222251,"byte_end":222254,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222259,"byte_end":222267,"line_start":367,"line_end":367,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222272,"byte_end":222298,"line_start":368,"line_end":368,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222303,"byte_end":222306,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222311,"byte_end":222364,"line_start":370,"line_end":370,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222369,"byte_end":222372,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222377,"byte_end":222426,"line_start":372,"line_end":372,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222431,"byte_end":222493,"line_start":373,"line_end":373,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222498,"byte_end":222594,"line_start":374,"line_end":374,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222599,"byte_end":222649,"line_start":375,"line_end":375,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222654,"byte_end":222705,"line_start":376,"line_end":376,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222710,"byte_end":222762,"line_start":377,"line_end":377,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222767,"byte_end":222831,"line_start":378,"line_end":378,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222836,"byte_end":222844,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":222849,"byte_end":222858,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223811,"byte_end":223841,"line_start":406,"line_end":406,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"fn (secs: u32, nano: u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223154,"byte_end":223239,"line_start":387,"line_end":387,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223244,"byte_end":223247,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223252,"byte_end":223300,"line_start":389,"line_end":389,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223305,"byte_end":223372,"line_start":390,"line_end":390,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223377,"byte_end":223380,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223385,"byte_end":223443,"line_start":392,"line_end":392,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223448,"byte_end":223451,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223456,"byte_end":223469,"line_start":394,"line_end":394,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223474,"byte_end":223477,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223482,"byte_end":223490,"line_start":396,"line_end":396,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223495,"byte_end":223533,"line_start":397,"line_end":397,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223538,"byte_end":223541,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223546,"byte_end":223619,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223624,"byte_end":223653,"line_start":400,"line_end":400,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223658,"byte_end":223689,"line_start":401,"line_end":401,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223694,"byte_end":223724,"line_start":402,"line_end":402,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223729,"byte_end":223772,"line_start":403,"line_end":403,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223777,"byte_end":223785,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223790,"byte_end":223799,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224813,"byte_end":224847,"line_start":431,"line_end":431,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"fn (secs: u32, nano: u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":223979,"byte_end":224064,"line_start":410,"line_end":410,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224069,"byte_end":224072,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224077,"byte_end":224125,"line_start":412,"line_end":412,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224130,"byte_end":224197,"line_start":413,"line_end":413,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224202,"byte_end":224205,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224210,"byte_end":224276,"line_start":415,"line_end":415,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224281,"byte_end":224284,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224289,"byte_end":224302,"line_start":417,"line_end":417,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224307,"byte_end":224310,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224315,"byte_end":224323,"line_start":419,"line_end":419,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224328,"byte_end":224354,"line_start":420,"line_end":420,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224359,"byte_end":224362,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224367,"byte_end":224438,"line_start":422,"line_end":422,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224443,"byte_end":224446,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224451,"byte_end":224495,"line_start":424,"line_end":424,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224500,"byte_end":224558,"line_start":425,"line_end":425,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224563,"byte_end":224655,"line_start":426,"line_end":426,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224660,"byte_end":224709,"line_start":427,"line_end":427,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224714,"byte_end":224774,"line_start":428,"line_end":428,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224779,"byte_end":224787,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":224792,"byte_end":224801,"line_start":430,"line_end":430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227497,"byte_end":227511,"line_start":497,"line_end":497,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225023,"byte_end":225106,"line_start":436,"line_end":436,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225111,"byte_end":225181,"line_start":437,"line_end":437,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225186,"byte_end":225224,"line_start":438,"line_end":438,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225229,"byte_end":225232,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225237,"byte_end":225250,"line_start":440,"line_end":440,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225255,"byte_end":225258,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225263,"byte_end":225271,"line_start":442,"line_end":442,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225276,"byte_end":225302,"line_start":443,"line_end":443,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225307,"byte_end":225310,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225315,"byte_end":225366,"line_start":445,"line_end":445,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225371,"byte_end":225374,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225379,"byte_end":225433,"line_start":447,"line_end":447,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225438,"byte_end":225489,"line_start":448,"line_end":448,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225494,"byte_end":225556,"line_start":449,"line_end":449,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225561,"byte_end":225628,"line_start":450,"line_end":450,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225633,"byte_end":225641,"line_start":451,"line_end":451,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225646,"byte_end":225649,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225654,"byte_end":225712,"line_start":453,"line_end":453,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225717,"byte_end":225720,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225725,"byte_end":225733,"line_start":455,"line_end":455,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225738,"byte_end":225766,"line_start":456,"line_end":456,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225771,"byte_end":225824,"line_start":457,"line_end":457,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225829,"byte_end":225910,"line_start":458,"line_end":458,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225915,"byte_end":225967,"line_start":459,"line_end":459,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225972,"byte_end":225980,"line_start":460,"line_end":460,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225985,"byte_end":225988,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":225993,"byte_end":226059,"line_start":462,"line_end":462,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226064,"byte_end":226126,"line_start":463,"line_end":463,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226131,"byte_end":226207,"line_start":464,"line_end":464,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226212,"byte_end":226215,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226220,"byte_end":226228,"line_start":466,"line_end":466,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226233,"byte_end":226261,"line_start":467,"line_end":467,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226266,"byte_end":226319,"line_start":468,"line_end":468,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226324,"byte_end":226385,"line_start":469,"line_end":469,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226390,"byte_end":226454,"line_start":470,"line_end":470,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226459,"byte_end":226467,"line_start":471,"line_end":471,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226472,"byte_end":226475,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226480,"byte_end":226523,"line_start":473,"line_end":473,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226528,"byte_end":226599,"line_start":474,"line_end":474,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226604,"byte_end":226607,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226612,"byte_end":226620,"line_start":476,"line_end":476,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226625,"byte_end":226653,"line_start":477,"line_end":477,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226658,"byte_end":226711,"line_start":478,"line_end":478,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226716,"byte_end":226763,"line_start":479,"line_end":479,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226768,"byte_end":226818,"line_start":480,"line_end":480,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226823,"byte_end":226826,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226831,"byte_end":226888,"line_start":482,"line_end":482,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226893,"byte_end":226942,"line_start":483,"line_end":483,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":226947,"byte_end":227002,"line_start":484,"line_end":484,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227007,"byte_end":227068,"line_start":485,"line_end":485,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227073,"byte_end":227081,"line_start":486,"line_end":486,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227086,"byte_end":227089,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227094,"byte_end":227176,"line_start":488,"line_end":488,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227181,"byte_end":227230,"line_start":489,"line_end":489,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227235,"byte_end":227294,"line_start":490,"line_end":490,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227299,"byte_end":227302,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227307,"byte_end":227315,"line_start":492,"line_end":492,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227320,"byte_end":227348,"line_start":493,"line_end":493,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227353,"byte_end":227406,"line_start":494,"line_end":494,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227411,"byte_end":227472,"line_start":495,"line_end":495,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227477,"byte_end":227485,"line_start":496,"line_end":496,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228674,"byte_end":228696,"line_start":526,"line_end":526,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"fn (&self, mut rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227699,"byte_end":227745,"line_start":503,"line_end":503,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227750,"byte_end":227794,"line_start":504,"line_end":504,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227799,"byte_end":227860,"line_start":505,"line_end":505,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227865,"byte_end":227946,"line_start":506,"line_end":506,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227951,"byte_end":227954,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227959,"byte_end":227972,"line_start":508,"line_end":508,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227977,"byte_end":227980,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227985,"byte_end":227993,"line_start":510,"line_end":510,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":227998,"byte_end":228055,"line_start":511,"line_end":511,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228060,"byte_end":228086,"line_start":512,"line_end":512,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228091,"byte_end":228114,"line_start":513,"line_end":513,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228119,"byte_end":228122,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228127,"byte_end":228166,"line_start":515,"line_end":515,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228171,"byte_end":228174,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228179,"byte_end":228256,"line_start":517,"line_end":517,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228261,"byte_end":228301,"line_start":518,"line_end":518,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228306,"byte_end":228383,"line_start":519,"line_end":519,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228388,"byte_end":228432,"line_start":520,"line_end":520,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228437,"byte_end":228514,"line_start":521,"line_end":521,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228519,"byte_end":228565,"line_start":522,"line_end":522,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228570,"byte_end":228577,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":228582,"byte_end":228590,"line_start":524,"line_end":524,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232205,"byte_end":232227,"line_start":612,"line_end":612,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"fn (&self, rhs: OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231279,"byte_end":231332,"line_start":589,"line_end":589,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231337,"byte_end":231381,"line_start":590,"line_end":590,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231386,"byte_end":231450,"line_start":591,"line_end":591,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231455,"byte_end":231536,"line_start":592,"line_end":592,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231541,"byte_end":231544,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231549,"byte_end":231562,"line_start":594,"line_end":594,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231567,"byte_end":231570,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231575,"byte_end":231583,"line_start":596,"line_end":596,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231588,"byte_end":231645,"line_start":597,"line_end":597,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231650,"byte_end":231676,"line_start":598,"line_end":598,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231681,"byte_end":231704,"line_start":599,"line_end":599,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231709,"byte_end":231712,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231717,"byte_end":231756,"line_start":601,"line_end":601,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231761,"byte_end":231764,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231769,"byte_end":231845,"line_start":603,"line_end":603,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231850,"byte_end":231889,"line_start":604,"line_end":604,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231894,"byte_end":231971,"line_start":605,"line_end":605,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":231976,"byte_end":232021,"line_start":606,"line_end":606,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232026,"byte_end":232104,"line_start":607,"line_end":607,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232109,"byte_end":232154,"line_start":608,"line_end":608,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232159,"byte_end":232166,"line_start":609,"line_end":609,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232171,"byte_end":232179,"line_start":610,"line_end":610,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232184,"byte_end":232193,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235281,"byte_end":235302,"line_start":677,"line_end":677,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"fn (self, rhs: NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232419,"byte_end":232475,"line_start":617,"line_end":617,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232480,"byte_end":232522,"line_start":618,"line_end":618,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232527,"byte_end":232574,"line_start":619,"line_end":619,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232579,"byte_end":232582,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232587,"byte_end":232659,"line_start":621,"line_end":621,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232664,"byte_end":232730,"line_start":622,"line_end":622,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232735,"byte_end":232810,"line_start":623,"line_end":623,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232815,"byte_end":232860,"line_start":624,"line_end":624,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232865,"byte_end":232924,"line_start":625,"line_end":625,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232929,"byte_end":232932,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232937,"byte_end":232950,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232955,"byte_end":232958,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232963,"byte_end":232971,"line_start":629,"line_end":629,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":232976,"byte_end":233033,"line_start":630,"line_end":630,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233038,"byte_end":233064,"line_start":631,"line_end":631,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233069,"byte_end":233092,"line_start":632,"line_end":632,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233097,"byte_end":233100,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233105,"byte_end":233151,"line_start":634,"line_end":634,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233156,"byte_end":233205,"line_start":635,"line_end":635,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233210,"byte_end":233213,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233218,"byte_end":233289,"line_start":637,"line_end":637,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233294,"byte_end":233327,"line_start":638,"line_end":638,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233332,"byte_end":233403,"line_start":639,"line_end":639,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233408,"byte_end":233451,"line_start":640,"line_end":640,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233456,"byte_end":233527,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233532,"byte_end":233576,"line_start":642,"line_end":642,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233581,"byte_end":233652,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233657,"byte_end":233694,"line_start":644,"line_end":644,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233699,"byte_end":233770,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233775,"byte_end":233817,"line_start":646,"line_end":646,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233822,"byte_end":233893,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233898,"byte_end":233942,"line_start":648,"line_end":648,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":233947,"byte_end":234018,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234023,"byte_end":234064,"line_start":650,"line_end":650,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234069,"byte_end":234140,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234145,"byte_end":234224,"line_start":652,"line_end":652,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234229,"byte_end":234236,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234241,"byte_end":234249,"line_start":654,"line_end":654,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234254,"byte_end":234257,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234262,"byte_end":234324,"line_start":656,"line_end":656,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234329,"byte_end":234375,"line_start":657,"line_end":657,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234380,"byte_end":234383,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234388,"byte_end":234396,"line_start":659,"line_end":659,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234401,"byte_end":234458,"line_start":660,"line_end":660,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234463,"byte_end":234491,"line_start":661,"line_end":661,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234496,"byte_end":234521,"line_start":662,"line_end":662,"column_start":5,"column_end":30}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234526,"byte_end":234574,"line_start":663,"line_end":663,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234579,"byte_end":234630,"line_start":664,"line_end":664,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234635,"byte_end":234708,"line_start":665,"line_end":665,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234713,"byte_end":234750,"line_start":666,"line_end":666,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234755,"byte_end":234828,"line_start":667,"line_end":667,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234833,"byte_end":234878,"line_start":668,"line_end":668,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234883,"byte_end":234955,"line_start":669,"line_end":669,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":234960,"byte_end":234998,"line_start":670,"line_end":670,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235003,"byte_end":235076,"line_start":671,"line_end":671,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235081,"byte_end":235118,"line_start":672,"line_end":672,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235123,"byte_end":235201,"line_start":673,"line_end":673,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235206,"byte_end":235244,"line_start":674,"line_end":674,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235249,"byte_end":235256,"line_start":675,"line_end":675,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":235261,"byte_end":235269,"line_start":676,"line_end":676,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237752,"byte_end":237769,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236573,"byte_end":236630,"line_start":703,"line_end":703,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236635,"byte_end":236714,"line_start":704,"line_end":704,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236719,"byte_end":236722,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236727,"byte_end":236777,"line_start":706,"line_end":706,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236782,"byte_end":236860,"line_start":707,"line_end":707,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236865,"byte_end":236868,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236873,"byte_end":236886,"line_start":709,"line_end":709,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236891,"byte_end":236894,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236899,"byte_end":236907,"line_start":711,"line_end":711,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236912,"byte_end":236938,"line_start":712,"line_end":712,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236943,"byte_end":236991,"line_start":713,"line_end":713,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":236996,"byte_end":236999,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237004,"byte_end":237049,"line_start":715,"line_end":715,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237054,"byte_end":237097,"line_start":716,"line_end":716,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237102,"byte_end":237175,"line_start":717,"line_end":717,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237180,"byte_end":237253,"line_start":718,"line_end":718,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237258,"byte_end":237266,"line_start":719,"line_end":719,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237271,"byte_end":237274,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237279,"byte_end":237363,"line_start":721,"line_end":721,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237368,"byte_end":237371,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237376,"byte_end":237384,"line_start":723,"line_end":723,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237389,"byte_end":237417,"line_start":724,"line_end":724,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237422,"byte_end":237472,"line_start":725,"line_end":725,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237477,"byte_end":237532,"line_start":726,"line_end":726,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237537,"byte_end":237582,"line_start":727,"line_end":727,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237587,"byte_end":237655,"line_start":728,"line_end":728,"column_start":5,"column_end":73}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237660,"byte_end":237668,"line_start":729,"line_end":729,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237673,"byte_end":237726,"line_start":730,"line_end":730,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237731,"byte_end":237740,"line_start":731,"line_end":731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239575,"byte_end":239581,"line_start":773,"line_end":773,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":237950,"byte_end":238004,"line_start":737,"line_end":737,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238009,"byte_end":238079,"line_start":738,"line_end":738,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238084,"byte_end":238122,"line_start":739,"line_end":739,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238127,"byte_end":238130,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238135,"byte_end":238170,"line_start":741,"line_end":741,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238175,"byte_end":238248,"line_start":742,"line_end":742,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238253,"byte_end":238310,"line_start":743,"line_end":743,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238315,"byte_end":238377,"line_start":744,"line_end":744,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238382,"byte_end":238442,"line_start":745,"line_end":745,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238447,"byte_end":238450,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238455,"byte_end":238519,"line_start":747,"line_end":747,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238524,"byte_end":238587,"line_start":748,"line_end":748,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238592,"byte_end":238667,"line_start":749,"line_end":749,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238672,"byte_end":238675,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238680,"byte_end":238693,"line_start":751,"line_end":751,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238698,"byte_end":238701,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238706,"byte_end":238714,"line_start":753,"line_end":753,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238719,"byte_end":238745,"line_start":754,"line_end":754,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238750,"byte_end":238753,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238758,"byte_end":238818,"line_start":756,"line_end":756,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238823,"byte_end":238884,"line_start":757,"line_end":757,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238889,"byte_end":238961,"line_start":758,"line_end":758,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":238966,"byte_end":239028,"line_start":759,"line_end":759,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239033,"byte_end":239041,"line_start":760,"line_end":760,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239046,"byte_end":239049,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239054,"byte_end":239138,"line_start":762,"line_end":762,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239143,"byte_end":239146,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239151,"byte_end":239159,"line_start":764,"line_end":764,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239164,"byte_end":239192,"line_start":765,"line_end":765,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239197,"byte_end":239259,"line_start":766,"line_end":766,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239264,"byte_end":239328,"line_start":767,"line_end":767,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239333,"byte_end":239408,"line_start":768,"line_end":768,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239413,"byte_end":239478,"line_start":769,"line_end":769,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239483,"byte_end":239491,"line_start":770,"line_end":770,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239496,"byte_end":239549,"line_start":771,"line_end":771,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239554,"byte_end":239563,"line_start":772,"line_end":772,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1576},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280510,"byte_end":280523,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1577},{"krate":0,"index":1578}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279646,"byte_end":279699,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279700,"byte_end":279703,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279704,"byte_end":279717,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279718,"byte_end":279721,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279722,"byte_end":279806,"line_start":33,"line_end":33,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279807,"byte_end":279810,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279811,"byte_end":279819,"line_start":35,"line_end":35,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279820,"byte_end":279863,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279864,"byte_end":279867,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279868,"byte_end":279947,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279948,"byte_end":279965,"line_start":39,"line_end":39,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279966,"byte_end":279974,"line_start":40,"line_end":40,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279975,"byte_end":279978,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":279979,"byte_end":280042,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280043,"byte_end":280091,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280092,"byte_end":280143,"line_start":44,"line_end":44,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280144,"byte_end":280147,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280148,"byte_end":280156,"line_start":46,"line_end":46,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280157,"byte_end":280202,"line_start":47,"line_end":47,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280203,"byte_end":280284,"line_start":48,"line_end":48,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280285,"byte_end":280331,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280332,"byte_end":280335,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280336,"byte_end":280379,"line_start":51,"line_end":51,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280380,"byte_end":280434,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280435,"byte_end":280443,"line_start":53,"line_end":53,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281185,"byte_end":281188,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"fn (date: NaiveDate, time: NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280596,"byte_end":280658,"line_start":61,"line_end":61,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280663,"byte_end":280745,"line_start":62,"line_end":62,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280750,"byte_end":280804,"line_start":63,"line_end":63,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280809,"byte_end":280812,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280817,"byte_end":280830,"line_start":65,"line_end":65,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280835,"byte_end":280838,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280843,"byte_end":280851,"line_start":67,"line_end":67,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280856,"byte_end":280910,"line_start":68,"line_end":68,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280915,"byte_end":280918,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280923,"byte_end":280967,"line_start":70,"line_end":70,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280972,"byte_end":281027,"line_start":71,"line_end":71,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281032,"byte_end":281035,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281040,"byte_end":281078,"line_start":73,"line_end":73,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281083,"byte_end":281112,"line_start":74,"line_end":74,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281117,"byte_end":281146,"line_start":75,"line_end":75,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281151,"byte_end":281159,"line_start":76,"line_end":76,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281164,"byte_end":281173,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282471,"byte_end":282485,"line_start":108,"line_end":108,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"fn (secs: i64, nsecs: u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281302,"byte_end":281371,"line_start":82,"line_end":82,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281376,"byte_end":281415,"line_start":83,"line_end":83,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281420,"byte_end":281488,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281493,"byte_end":281564,"line_start":85,"line_end":85,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281569,"byte_end":281572,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281577,"byte_end":281625,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281630,"byte_end":281706,"line_start":88,"line_end":88,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281711,"byte_end":281714,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281719,"byte_end":281793,"line_start":90,"line_end":90,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281798,"byte_end":281878,"line_start":91,"line_end":91,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281883,"byte_end":281944,"line_start":92,"line_end":92,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281949,"byte_end":281952,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":281957,"byte_end":282032,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282037,"byte_end":282040,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282045,"byte_end":282058,"line_start":96,"line_end":96,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282063,"byte_end":282066,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282071,"byte_end":282079,"line_start":98,"line_end":98,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282084,"byte_end":282127,"line_start":99,"line_end":99,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282132,"byte_end":282135,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282140,"byte_end":282198,"line_start":101,"line_end":101,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282203,"byte_end":282282,"line_start":102,"line_end":102,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282287,"byte_end":282290,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282295,"byte_end":282356,"line_start":104,"line_end":104,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282361,"byte_end":282432,"line_start":105,"line_end":105,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282437,"byte_end":282445,"line_start":106,"line_end":106,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282450,"byte_end":282459,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283827,"byte_end":283845,"line_start":139,"line_end":139,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"fn (secs: i64, nsecs: u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282670,"byte_end":282739,"line_start":113,"line_end":113,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282744,"byte_end":282783,"line_start":114,"line_end":114,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282788,"byte_end":282856,"line_start":115,"line_end":115,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282861,"byte_end":282932,"line_start":116,"line_end":116,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282937,"byte_end":282940,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282945,"byte_end":282993,"line_start":118,"line_end":118,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":282998,"byte_end":283088,"line_start":119,"line_end":119,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283093,"byte_end":283170,"line_start":120,"line_end":120,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283175,"byte_end":283178,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283183,"byte_end":283266,"line_start":122,"line_end":122,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283271,"byte_end":283274,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283279,"byte_end":283292,"line_start":124,"line_end":124,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283297,"byte_end":283300,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283305,"byte_end":283313,"line_start":126,"line_end":126,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283318,"byte_end":283361,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283366,"byte_end":283383,"line_start":128,"line_end":128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283388,"byte_end":283391,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283396,"byte_end":283459,"line_start":130,"line_end":130,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283464,"byte_end":283467,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283472,"byte_end":283520,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283525,"byte_end":283583,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283588,"byte_end":283663,"line_start":134,"line_end":134,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283668,"byte_end":283728,"line_start":135,"line_end":135,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283733,"byte_end":283788,"line_start":136,"line_end":136,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283793,"byte_end":283801,"line_start":137,"line_end":137,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":283806,"byte_end":283815,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287224,"byte_end":287238,"line_start":211,"line_end":211,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284361,"byte_end":284448,"line_start":150,"line_end":150,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284453,"byte_end":284523,"line_start":151,"line_end":151,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284528,"byte_end":284566,"line_start":152,"line_end":152,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284571,"byte_end":284574,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284579,"byte_end":284592,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284597,"byte_end":284600,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284605,"byte_end":284613,"line_start":156,"line_end":156,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284618,"byte_end":284661,"line_start":157,"line_end":157,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284666,"byte_end":284669,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284674,"byte_end":284729,"line_start":159,"line_end":159,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284734,"byte_end":284737,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284742,"byte_end":284816,"line_start":161,"line_end":161,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284821,"byte_end":284892,"line_start":162,"line_end":162,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284897,"byte_end":284973,"line_start":163,"line_end":163,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":284978,"byte_end":285065,"line_start":164,"line_end":164,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285070,"byte_end":285078,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285083,"byte_end":285086,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285091,"byte_end":285140,"line_start":167,"line_end":167,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285145,"byte_end":285148,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285153,"byte_end":285161,"line_start":169,"line_end":169,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285166,"byte_end":285211,"line_start":170,"line_end":170,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285216,"byte_end":285273,"line_start":171,"line_end":171,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285278,"byte_end":285359,"line_start":172,"line_end":172,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285364,"byte_end":285437,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285442,"byte_end":285450,"line_start":174,"line_end":174,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285455,"byte_end":285458,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285463,"byte_end":285552,"line_start":176,"line_end":176,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285557,"byte_end":285619,"line_start":177,"line_end":177,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285624,"byte_end":285700,"line_start":178,"line_end":178,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285705,"byte_end":285708,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285713,"byte_end":285721,"line_start":180,"line_end":180,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285726,"byte_end":285771,"line_start":181,"line_end":181,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285776,"byte_end":285833,"line_start":182,"line_end":182,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285838,"byte_end":285919,"line_start":183,"line_end":183,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":285924,"byte_end":286008,"line_start":184,"line_end":184,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286013,"byte_end":286021,"line_start":185,"line_end":185,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286026,"byte_end":286029,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286034,"byte_end":286077,"line_start":187,"line_end":187,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286082,"byte_end":286153,"line_start":188,"line_end":188,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286158,"byte_end":286161,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286166,"byte_end":286174,"line_start":190,"line_end":190,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286179,"byte_end":286224,"line_start":191,"line_end":191,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286229,"byte_end":286286,"line_start":192,"line_end":192,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286291,"byte_end":286354,"line_start":193,"line_end":193,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286359,"byte_end":286429,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286434,"byte_end":286437,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286442,"byte_end":286499,"line_start":196,"line_end":196,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286504,"byte_end":286569,"line_start":197,"line_end":197,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286574,"byte_end":286645,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286650,"byte_end":286727,"line_start":199,"line_end":199,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286732,"byte_end":286740,"line_start":200,"line_end":200,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286745,"byte_end":286748,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286753,"byte_end":286835,"line_start":202,"line_end":202,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286840,"byte_end":286843,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286848,"byte_end":286856,"line_start":204,"line_end":204,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286861,"byte_end":286893,"line_start":205,"line_end":205,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286898,"byte_end":286955,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":286960,"byte_end":287014,"line_start":207,"line_end":207,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287019,"byte_end":287110,"line_start":208,"line_end":208,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287115,"byte_end":287199,"line_start":209,"line_end":209,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287204,"byte_end":287212,"line_start":210,"line_end":210,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287760,"byte_end":287764,"line_start":228,"line_end":228,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287471,"byte_end":287502,"line_start":217,"line_end":217,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287507,"byte_end":287510,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287515,"byte_end":287528,"line_start":219,"line_end":219,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287533,"byte_end":287536,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287541,"byte_end":287549,"line_start":221,"line_end":221,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287554,"byte_end":287580,"line_start":222,"line_end":222,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287585,"byte_end":287588,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287593,"byte_end":287657,"line_start":224,"line_end":224,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287662,"byte_end":287721,"line_start":225,"line_end":225,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287726,"byte_end":287734,"line_start":226,"line_end":226,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287739,"byte_end":287748,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288117,"byte_end":288121,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287816,"byte_end":287847,"line_start":232,"line_end":232,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287852,"byte_end":287855,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287860,"byte_end":287873,"line_start":234,"line_end":234,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287878,"byte_end":287881,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287886,"byte_end":287894,"line_start":236,"line_end":236,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287899,"byte_end":287938,"line_start":237,"line_end":237,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287943,"byte_end":287946,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":287951,"byte_end":288015,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288020,"byte_end":288078,"line_start":240,"line_end":240,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288083,"byte_end":288091,"line_start":241,"line_end":241,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288096,"byte_end":288105,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289028,"byte_end":289037,"line_start":270,"line_end":270,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288173,"byte_end":288254,"line_start":247,"line_end":247,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288259,"byte_end":288262,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288267,"byte_end":288322,"line_start":249,"line_end":249,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288327,"byte_end":288415,"line_start":250,"line_end":250,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288420,"byte_end":288423,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288428,"byte_end":288441,"line_start":252,"line_end":252,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288446,"byte_end":288449,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288454,"byte_end":288462,"line_start":254,"line_end":254,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288467,"byte_end":288493,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288498,"byte_end":288501,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288506,"byte_end":288579,"line_start":257,"line_end":257,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288584,"byte_end":288618,"line_start":258,"line_end":258,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288623,"byte_end":288626,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288631,"byte_end":288695,"line_start":260,"line_end":260,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288700,"byte_end":288746,"line_start":261,"line_end":261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288751,"byte_end":288754,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288759,"byte_end":288826,"line_start":263,"line_end":263,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288831,"byte_end":288866,"line_start":264,"line_end":264,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288871,"byte_end":288874,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288879,"byte_end":288939,"line_start":266,"line_end":266,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288944,"byte_end":288989,"line_start":267,"line_end":267,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":288994,"byte_end":289002,"line_start":268,"line_end":268,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289007,"byte_end":289016,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290415,"byte_end":290431,"line_start":302,"line_end":302,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289339,"byte_end":289423,"line_start":277,"line_end":277,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289428,"byte_end":289431,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289436,"byte_end":289491,"line_start":279,"line_end":279,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289496,"byte_end":289584,"line_start":280,"line_end":280,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289589,"byte_end":289592,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289597,"byte_end":289664,"line_start":282,"line_end":282,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289669,"byte_end":289742,"line_start":283,"line_end":283,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289747,"byte_end":289816,"line_start":284,"line_end":284,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289821,"byte_end":289872,"line_start":285,"line_end":285,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289877,"byte_end":289880,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289885,"byte_end":289898,"line_start":287,"line_end":287,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289903,"byte_end":289906,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289911,"byte_end":289919,"line_start":289,"line_end":289,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289924,"byte_end":289950,"line_start":290,"line_end":290,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289955,"byte_end":289958,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":289963,"byte_end":290036,"line_start":292,"line_end":292,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290041,"byte_end":290086,"line_start":293,"line_end":293,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290091,"byte_end":290094,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290099,"byte_end":290174,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290179,"byte_end":290236,"line_start":296,"line_end":296,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290241,"byte_end":290244,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290249,"byte_end":290327,"line_start":298,"line_end":298,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290332,"byte_end":290376,"line_start":299,"line_end":299,"column_start":5,"column_end":49}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290381,"byte_end":290389,"line_start":300,"line_end":300,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290394,"byte_end":290403,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291899,"byte_end":291914,"line_start":341,"line_end":341,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290562,"byte_end":290645,"line_start":307,"line_end":307,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290650,"byte_end":290653,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290658,"byte_end":290713,"line_start":309,"line_end":309,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290718,"byte_end":290806,"line_start":310,"line_end":310,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290811,"byte_end":290814,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290819,"byte_end":290831,"line_start":312,"line_end":312,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290836,"byte_end":290839,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290844,"byte_end":290911,"line_start":314,"line_end":314,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290916,"byte_end":290986,"line_start":315,"line_end":315,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":290991,"byte_end":291059,"line_start":316,"line_end":316,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291064,"byte_end":291098,"line_start":317,"line_end":317,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291103,"byte_end":291106,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291111,"byte_end":291185,"line_start":319,"line_end":319,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millennia, I'm curious.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291190,"byte_end":291250,"line_start":320,"line_end":320,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291255,"byte_end":291258,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291263,"byte_end":291276,"line_start":322,"line_end":322,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291281,"byte_end":291284,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291289,"byte_end":291297,"line_start":324,"line_end":324,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291302,"byte_end":291345,"line_start":325,"line_end":325,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291350,"byte_end":291353,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291358,"byte_end":291430,"line_start":327,"line_end":327,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291435,"byte_end":291487,"line_start":328,"line_end":328,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291492,"byte_end":291495,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291500,"byte_end":291574,"line_start":330,"line_end":330,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291579,"byte_end":291582,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291587,"byte_end":291628,"line_start":332,"line_end":332,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291633,"byte_end":291670,"line_start":333,"line_end":333,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291675,"byte_end":291724,"line_start":334,"line_end":334,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291729,"byte_end":291744,"line_start":335,"line_end":335,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291749,"byte_end":291760,"line_start":336,"line_end":336,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291765,"byte_end":291849,"line_start":337,"line_end":337,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291854,"byte_end":291860,"line_start":338,"line_end":338,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291865,"byte_end":291873,"line_start":339,"line_end":339,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":291878,"byte_end":291887,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292692,"byte_end":292715,"line_start":363,"line_end":363,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292053,"byte_end":292129,"line_start":346,"line_end":346,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292134,"byte_end":292137,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292142,"byte_end":292184,"line_start":348,"line_end":348,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292189,"byte_end":292271,"line_start":349,"line_end":349,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292276,"byte_end":292279,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292284,"byte_end":292297,"line_start":351,"line_end":351,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292302,"byte_end":292305,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292310,"byte_end":292318,"line_start":353,"line_end":353,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292323,"byte_end":292349,"line_start":354,"line_end":354,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292354,"byte_end":292357,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292362,"byte_end":292444,"line_start":356,"line_end":356,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292449,"byte_end":292499,"line_start":357,"line_end":357,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292504,"byte_end":292507,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292512,"byte_end":292596,"line_start":359,"line_end":359,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292601,"byte_end":292653,"line_start":360,"line_end":360,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292658,"byte_end":292666,"line_start":361,"line_end":361,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292671,"byte_end":292680,"line_start":362,"line_end":362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293448,"byte_end":293471,"line_start":384,"line_end":384,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292793,"byte_end":292869,"line_start":367,"line_end":367,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292874,"byte_end":292877,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292882,"byte_end":292928,"line_start":369,"line_end":369,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":292933,"byte_end":293019,"line_start":370,"line_end":370,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293024,"byte_end":293027,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293032,"byte_end":293045,"line_start":372,"line_end":372,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293050,"byte_end":293053,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293058,"byte_end":293066,"line_start":374,"line_end":374,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293071,"byte_end":293097,"line_start":375,"line_end":375,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293102,"byte_end":293105,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293110,"byte_end":293192,"line_start":377,"line_end":377,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293197,"byte_end":293251,"line_start":378,"line_end":378,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293256,"byte_end":293259,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293264,"byte_end":293348,"line_start":380,"line_end":380,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293353,"byte_end":293409,"line_start":381,"line_end":381,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293414,"byte_end":293422,"line_start":382,"line_end":382,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293427,"byte_end":293436,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294213,"byte_end":294235,"line_start":405,"line_end":405,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293545,"byte_end":293620,"line_start":388,"line_end":388,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293625,"byte_end":293628,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293633,"byte_end":293683,"line_start":390,"line_end":390,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293688,"byte_end":293778,"line_start":391,"line_end":391,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293783,"byte_end":293786,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293791,"byte_end":293804,"line_start":393,"line_end":393,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293809,"byte_end":293812,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293817,"byte_end":293825,"line_start":395,"line_end":395,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293830,"byte_end":293856,"line_start":396,"line_end":396,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293861,"byte_end":293864,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293869,"byte_end":293951,"line_start":398,"line_end":398,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":293956,"byte_end":294013,"line_start":399,"line_end":399,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294018,"byte_end":294021,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294026,"byte_end":294110,"line_start":401,"line_end":401,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294115,"byte_end":294174,"line_start":402,"line_end":402,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294179,"byte_end":294187,"line_start":403,"line_end":403,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294192,"byte_end":294201,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297614,"byte_end":297632,"line_start":483,"line_end":483,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294294,"byte_end":294349,"line_start":409,"line_end":409,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294354,"byte_end":294357,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294362,"byte_end":294457,"line_start":411,"line_end":411,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294462,"byte_end":294525,"line_start":412,"line_end":412,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294530,"byte_end":294597,"line_start":413,"line_end":413,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294602,"byte_end":294695,"line_start":414,"line_end":414,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294700,"byte_end":294703,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294708,"byte_end":294759,"line_start":416,"line_end":416,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294764,"byte_end":294767,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294772,"byte_end":294785,"line_start":418,"line_end":418,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294790,"byte_end":294793,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294798,"byte_end":294806,"line_start":420,"line_end":420,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294811,"byte_end":294868,"line_start":421,"line_end":421,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294873,"byte_end":294899,"line_start":422,"line_end":422,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294904,"byte_end":294927,"line_start":423,"line_end":423,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294932,"byte_end":294935,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294940,"byte_end":294979,"line_start":425,"line_end":425,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294984,"byte_end":294987,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":294992,"byte_end":295025,"line_start":427,"line_end":427,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295030,"byte_end":295073,"line_start":428,"line_end":428,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295078,"byte_end":295143,"line_start":429,"line_end":429,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295148,"byte_end":295183,"line_start":430,"line_end":430,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295188,"byte_end":295257,"line_start":431,"line_end":431,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295262,"byte_end":295297,"line_start":432,"line_end":432,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295302,"byte_end":295372,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295377,"byte_end":295412,"line_start":434,"line_end":434,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295417,"byte_end":295494,"line_start":435,"line_end":435,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295499,"byte_end":295534,"line_start":436,"line_end":436,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295539,"byte_end":295613,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295618,"byte_end":295678,"line_start":438,"line_end":438,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295683,"byte_end":295686,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295691,"byte_end":295755,"line_start":440,"line_end":440,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295760,"byte_end":295842,"line_start":441,"line_end":441,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295847,"byte_end":295888,"line_start":442,"line_end":442,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295893,"byte_end":295900,"line_start":443,"line_end":443,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295905,"byte_end":295913,"line_start":444,"line_end":444,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295918,"byte_end":295921,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295926,"byte_end":295954,"line_start":446,"line_end":446,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295959,"byte_end":295962,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295967,"byte_end":295975,"line_start":448,"line_end":448,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":295980,"byte_end":296037,"line_start":449,"line_end":449,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296042,"byte_end":296070,"line_start":450,"line_end":450,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296075,"byte_end":296100,"line_start":451,"line_end":451,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296105,"byte_end":296180,"line_start":452,"line_end":452,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296185,"byte_end":296270,"line_start":453,"line_end":453,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296275,"byte_end":296282,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296287,"byte_end":296295,"line_start":455,"line_end":455,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296300,"byte_end":296303,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296308,"byte_end":296337,"line_start":457,"line_end":457,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296342,"byte_end":296412,"line_start":458,"line_end":458,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296417,"byte_end":296420,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296425,"byte_end":296433,"line_start":460,"line_end":460,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296438,"byte_end":296495,"line_start":461,"line_end":461,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296500,"byte_end":296528,"line_start":462,"line_end":462,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296533,"byte_end":296558,"line_start":463,"line_end":463,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296563,"byte_end":296604,"line_start":464,"line_end":464,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296609,"byte_end":296694,"line_start":465,"line_end":465,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296699,"byte_end":296736,"line_start":466,"line_end":466,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296741,"byte_end":296798,"line_start":467,"line_end":467,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296803,"byte_end":296847,"line_start":468,"line_end":468,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296852,"byte_end":296921,"line_start":469,"line_end":469,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296926,"byte_end":296968,"line_start":470,"line_end":470,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":296973,"byte_end":297041,"line_start":471,"line_end":471,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297046,"byte_end":297090,"line_start":472,"line_end":472,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297095,"byte_end":297163,"line_start":473,"line_end":473,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297168,"byte_end":297209,"line_start":474,"line_end":474,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297214,"byte_end":297276,"line_start":475,"line_end":475,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297281,"byte_end":297322,"line_start":476,"line_end":476,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297327,"byte_end":297390,"line_start":477,"line_end":477,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297395,"byte_end":297437,"line_start":478,"line_end":478,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297442,"byte_end":297500,"line_start":479,"line_end":479,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297505,"byte_end":297577,"line_start":480,"line_end":480,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297582,"byte_end":297589,"line_start":481,"line_end":481,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":297594,"byte_end":297602,"line_start":482,"line_end":482,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301176,"byte_end":301194,"line_start":565,"line_end":565,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298079,"byte_end":298141,"line_start":495,"line_end":495,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298146,"byte_end":298149,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298154,"byte_end":298249,"line_start":497,"line_end":497,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298254,"byte_end":298320,"line_start":498,"line_end":498,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298325,"byte_end":298392,"line_start":499,"line_end":499,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298397,"byte_end":298490,"line_start":500,"line_end":500,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298495,"byte_end":298498,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298503,"byte_end":298554,"line_start":502,"line_end":502,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298559,"byte_end":298562,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298567,"byte_end":298580,"line_start":504,"line_end":504,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298585,"byte_end":298588,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298593,"byte_end":298601,"line_start":506,"line_end":506,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298606,"byte_end":298663,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298668,"byte_end":298694,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298699,"byte_end":298722,"line_start":509,"line_end":509,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298727,"byte_end":298730,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298735,"byte_end":298774,"line_start":511,"line_end":511,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298779,"byte_end":298782,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298787,"byte_end":298820,"line_start":513,"line_end":513,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298825,"byte_end":298868,"line_start":514,"line_end":514,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298873,"byte_end":298938,"line_start":515,"line_end":515,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298943,"byte_end":298978,"line_start":516,"line_end":516,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":298983,"byte_end":299052,"line_start":517,"line_end":517,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299057,"byte_end":299092,"line_start":518,"line_end":518,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299097,"byte_end":299167,"line_start":519,"line_end":519,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299172,"byte_end":299207,"line_start":520,"line_end":520,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299212,"byte_end":299289,"line_start":521,"line_end":521,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299294,"byte_end":299329,"line_start":522,"line_end":522,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299334,"byte_end":299408,"line_start":523,"line_end":523,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299413,"byte_end":299473,"line_start":524,"line_end":524,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299478,"byte_end":299481,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299486,"byte_end":299550,"line_start":526,"line_end":526,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299555,"byte_end":299637,"line_start":527,"line_end":527,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299642,"byte_end":299683,"line_start":528,"line_end":528,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299688,"byte_end":299695,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299700,"byte_end":299708,"line_start":530,"line_end":530,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299713,"byte_end":299716,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299721,"byte_end":299749,"line_start":532,"line_end":532,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299754,"byte_end":299757,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299762,"byte_end":299770,"line_start":534,"line_end":534,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299775,"byte_end":299832,"line_start":535,"line_end":535,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299837,"byte_end":299865,"line_start":536,"line_end":536,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299870,"byte_end":299895,"line_start":537,"line_end":537,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299900,"byte_end":299975,"line_start":538,"line_end":538,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":299980,"byte_end":300065,"line_start":539,"line_end":539,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300070,"byte_end":300077,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300082,"byte_end":300090,"line_start":541,"line_end":541,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300095,"byte_end":300098,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300103,"byte_end":300132,"line_start":543,"line_end":543,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300137,"byte_end":300210,"line_start":544,"line_end":544,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300215,"byte_end":300218,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300223,"byte_end":300231,"line_start":546,"line_end":546,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300236,"byte_end":300293,"line_start":547,"line_end":547,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300298,"byte_end":300326,"line_start":548,"line_end":548,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300331,"byte_end":300356,"line_start":549,"line_end":549,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300361,"byte_end":300402,"line_start":550,"line_end":550,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300407,"byte_end":300492,"line_start":551,"line_end":551,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300497,"byte_end":300534,"line_start":552,"line_end":552,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300539,"byte_end":300596,"line_start":553,"line_end":553,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300601,"byte_end":300645,"line_start":554,"line_end":554,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300650,"byte_end":300718,"line_start":555,"line_end":555,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300723,"byte_end":300767,"line_start":556,"line_end":556,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300772,"byte_end":300840,"line_start":557,"line_end":557,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300845,"byte_end":300887,"line_start":558,"line_end":558,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300892,"byte_end":300954,"line_start":559,"line_end":559,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":300959,"byte_end":301000,"line_start":560,"line_end":560,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301005,"byte_end":301063,"line_start":561,"line_end":561,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301068,"byte_end":301139,"line_start":562,"line_end":562,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301144,"byte_end":301151,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301156,"byte_end":301164,"line_start":564,"line_end":564,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303603,"byte_end":303624,"line_start":621,"line_end":621,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"fn (self, rhs: NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301641,"byte_end":301710,"line_start":577,"line_end":577,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301715,"byte_end":301762,"line_start":578,"line_end":578,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301767,"byte_end":301770,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301775,"byte_end":301870,"line_start":580,"line_end":580,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301875,"byte_end":301941,"line_start":581,"line_end":581,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":301946,"byte_end":302025,"line_start":582,"line_end":582,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302030,"byte_end":302075,"line_start":583,"line_end":583,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302080,"byte_end":302139,"line_start":584,"line_end":584,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302144,"byte_end":302147,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302152,"byte_end":302165,"line_start":586,"line_end":586,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302170,"byte_end":302173,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302178,"byte_end":302186,"line_start":588,"line_end":588,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302191,"byte_end":302248,"line_start":589,"line_end":589,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302253,"byte_end":302279,"line_start":590,"line_end":590,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302284,"byte_end":302307,"line_start":591,"line_end":591,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302312,"byte_end":302315,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302320,"byte_end":302359,"line_start":593,"line_end":593,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302364,"byte_end":302367,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302372,"byte_end":302405,"line_start":595,"line_end":595,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302410,"byte_end":302486,"line_start":596,"line_end":596,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302491,"byte_end":302540,"line_start":597,"line_end":597,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302545,"byte_end":302548,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302553,"byte_end":302596,"line_start":599,"line_end":599,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302601,"byte_end":302635,"line_start":600,"line_end":600,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302640,"byte_end":302728,"line_start":601,"line_end":601,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302733,"byte_end":302824,"line_start":602,"line_end":602,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302829,"byte_end":302836,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302841,"byte_end":302849,"line_start":604,"line_end":604,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302854,"byte_end":302857,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302862,"byte_end":302924,"line_start":606,"line_end":606,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302929,"byte_end":302975,"line_start":607,"line_end":607,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302980,"byte_end":302983,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":302988,"byte_end":302996,"line_start":609,"line_end":609,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303001,"byte_end":303058,"line_start":610,"line_end":610,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303063,"byte_end":303091,"line_start":611,"line_end":611,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303096,"byte_end":303121,"line_start":612,"line_end":612,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303126,"byte_end":303167,"line_start":613,"line_end":613,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303172,"byte_end":303242,"line_start":614,"line_end":614,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303247,"byte_end":303330,"line_start":615,"line_end":615,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303335,"byte_end":303405,"line_start":616,"line_end":616,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303410,"byte_end":303491,"line_start":617,"line_end":617,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303496,"byte_end":303566,"line_start":618,"line_end":618,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303571,"byte_end":303578,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303583,"byte_end":303591,"line_start":620,"line_end":620,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305066,"byte_end":305083,"line_start":654,"line_end":654,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303773,"byte_end":303848,"line_start":625,"line_end":625,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303853,"byte_end":303932,"line_start":626,"line_end":626,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303937,"byte_end":303940,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":303945,"byte_end":303995,"line_start":628,"line_end":628,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304000,"byte_end":304078,"line_start":629,"line_end":629,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304083,"byte_end":304086,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304091,"byte_end":304104,"line_start":631,"line_end":631,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304109,"byte_end":304112,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304117,"byte_end":304125,"line_start":633,"line_end":633,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304130,"byte_end":304156,"line_start":634,"line_end":634,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304161,"byte_end":304209,"line_start":635,"line_end":635,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304214,"byte_end":304217,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304222,"byte_end":304276,"line_start":637,"line_end":637,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304281,"byte_end":304345,"line_start":638,"line_end":638,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304350,"byte_end":304435,"line_start":639,"line_end":639,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304440,"byte_end":304525,"line_start":640,"line_end":640,"column_start":5,"column_end":90}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304530,"byte_end":304538,"line_start":641,"line_end":641,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304543,"byte_end":304546,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304551,"byte_end":304635,"line_start":643,"line_end":643,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304640,"byte_end":304643,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304648,"byte_end":304656,"line_start":645,"line_end":645,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304661,"byte_end":304689,"line_start":646,"line_end":646,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304694,"byte_end":304744,"line_start":647,"line_end":647,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304749,"byte_end":304813,"line_start":648,"line_end":648,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304818,"byte_end":304884,"line_start":649,"line_end":649,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304889,"byte_end":304969,"line_start":650,"line_end":650,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304974,"byte_end":304982,"line_start":651,"line_end":651,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":304987,"byte_end":305040,"line_start":652,"line_end":652,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305045,"byte_end":305054,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306869,"byte_end":306875,"line_start":693,"line_end":693,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305279,"byte_end":305351,"line_start":659,"line_end":659,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305356,"byte_end":305426,"line_start":660,"line_end":660,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305431,"byte_end":305469,"line_start":661,"line_end":661,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305474,"byte_end":305477,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305482,"byte_end":305517,"line_start":663,"line_end":663,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305522,"byte_end":305595,"line_start":664,"line_end":664,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305600,"byte_end":305657,"line_start":665,"line_end":665,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305662,"byte_end":305724,"line_start":666,"line_end":666,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305729,"byte_end":305789,"line_start":667,"line_end":667,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305794,"byte_end":305797,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305802,"byte_end":305866,"line_start":669,"line_end":669,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305871,"byte_end":305934,"line_start":670,"line_end":670,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":305939,"byte_end":306014,"line_start":671,"line_end":671,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306019,"byte_end":306022,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306027,"byte_end":306040,"line_start":673,"line_end":673,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306045,"byte_end":306048,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306053,"byte_end":306061,"line_start":675,"line_end":675,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306066,"byte_end":306092,"line_start":676,"line_end":676,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306097,"byte_end":306100,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306105,"byte_end":306169,"line_start":678,"line_end":678,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306174,"byte_end":306256,"line_start":679,"line_end":679,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306261,"byte_end":306350,"line_start":680,"line_end":680,"column_start":5,"column_end":94}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306355,"byte_end":306363,"line_start":681,"line_end":681,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306368,"byte_end":306371,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306376,"byte_end":306460,"line_start":683,"line_end":683,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306465,"byte_end":306468,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306473,"byte_end":306481,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306486,"byte_end":306514,"line_start":686,"line_end":686,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306519,"byte_end":306585,"line_start":687,"line_end":687,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306590,"byte_end":306675,"line_start":688,"line_end":688,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306680,"byte_end":306772,"line_start":689,"line_end":689,"column_start":5,"column_end":97}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306777,"byte_end":306785,"line_start":690,"line_end":690,"column_start":5,"column_end":13}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306790,"byte_end":306843,"line_start":691,"line_end":691,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":306848,"byte_end":306857,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1601},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373428,"byte_end":373432,"line_start":44,"line_end":44,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1603},{"krate":0,"index":1604}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372055,"byte_end":372097,"line_start":19,"line_end":19,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372098,"byte_end":372101,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372102,"byte_end":372155,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372156,"byte_end":372236,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372237,"byte_end":372323,"line_start":23,"line_end":23,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372324,"byte_end":372381,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372382,"byte_end":372385,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372386,"byte_end":372464,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372465,"byte_end":372535,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372536,"byte_end":372592,"line_start":28,"line_end":28,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372593,"byte_end":372596,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372597,"byte_end":372669,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372670,"byte_end":372722,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372723,"byte_end":372810,"line_start":32,"line_end":32,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372811,"byte_end":372879,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372880,"byte_end":372926,"line_start":34,"line_end":34,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372927,"byte_end":372930,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372931,"byte_end":372975,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":372976,"byte_end":373072,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373073,"byte_end":373168,"line_start":38,"line_end":38,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373169,"byte_end":373172,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373173,"byte_end":373249,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373250,"byte_end":373317,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373318,"byte_end":373399,"line_start":42,"line_end":42,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":706},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373540,"byte_end":373548,"line_start":50,"line_end":50,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373497,"byte_end":373529,"line_start":49,"line_end":49,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":707},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373650,"byte_end":373658,"line_start":52,"line_end":52,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373607,"byte_end":373639,"line_start":51,"line_end":51,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374006,"byte_end":374014,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"fn (date: NaiveDate, offset: Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373752,"byte_end":373808,"line_start":55,"line_end":55,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373813,"byte_end":373879,"line_start":56,"line_end":56,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373985,"byte_end":373994,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374315,"byte_end":374323,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"fn (&self, time: NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374121,"byte_end":374192,"line_start":64,"line_end":64,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374197,"byte_end":374245,"line_start":65,"line_end":65,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374250,"byte_end":374253,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374258,"byte_end":374289,"line_start":67,"line_end":67,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374294,"byte_end":374303,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374720,"byte_end":374727,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"fn (&self, hour: u32, min: u32, sec: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374505,"byte_end":374579,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374584,"byte_end":374632,"line_start":75,"line_end":75,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374637,"byte_end":374640,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374645,"byte_end":374694,"line_start":77,"line_end":77,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374699,"byte_end":374708,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375082,"byte_end":375093,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"fn (&self, hour: u32, min: u32, sec: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374859,"byte_end":374933,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374938,"byte_end":374986,"line_start":84,"line_end":84,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374991,"byte_end":374994,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":374999,"byte_end":375056,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375061,"byte_end":375070,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375580,"byte_end":375593,"line_start":98,"line_end":98,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375254,"byte_end":375341,"line_start":92,"line_end":92,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375346,"byte_end":375426,"line_start":93,"line_end":93,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375431,"byte_end":375479,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375484,"byte_end":375487,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375492,"byte_end":375554,"line_start":96,"line_end":96,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375559,"byte_end":375568,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376084,"byte_end":376101,"line_start":108,"line_end":108,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, milli: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375750,"byte_end":375837,"line_start":102,"line_end":102,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375842,"byte_end":375922,"line_start":103,"line_end":103,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375927,"byte_end":375975,"line_start":104,"line_end":104,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375980,"byte_end":375983,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":375988,"byte_end":376058,"line_start":106,"line_end":106,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376063,"byte_end":376072,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376646,"byte_end":376659,"line_start":119,"line_end":119,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376316,"byte_end":376403,"line_start":113,"line_end":113,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376408,"byte_end":376492,"line_start":114,"line_end":114,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376497,"byte_end":376545,"line_start":115,"line_end":115,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376550,"byte_end":376553,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376558,"byte_end":376620,"line_start":117,"line_end":117,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376625,"byte_end":376634,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377154,"byte_end":377171,"line_start":129,"line_end":129,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, micro: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376816,"byte_end":376903,"line_start":123,"line_end":123,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376908,"byte_end":376992,"line_start":124,"line_end":124,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":376997,"byte_end":377045,"line_start":125,"line_end":125,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377050,"byte_end":377053,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377058,"byte_end":377128,"line_start":127,"line_end":127,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377133,"byte_end":377142,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377717,"byte_end":377729,"line_start":140,"line_end":140,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377386,"byte_end":377472,"line_start":134,"line_end":134,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377477,"byte_end":377564,"line_start":135,"line_end":135,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377569,"byte_end":377617,"line_start":136,"line_end":136,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377622,"byte_end":377625,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377630,"byte_end":377691,"line_start":138,"line_end":138,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377696,"byte_end":377705,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378222,"byte_end":378238,"line_start":150,"line_end":150,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"fn (&self, hour: u32, min: u32, sec: u32, nano: u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377883,"byte_end":377969,"line_start":144,"line_end":144,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":377974,"byte_end":378061,"line_start":145,"line_end":145,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378066,"byte_end":378114,"line_start":146,"line_end":146,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378119,"byte_end":378122,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378127,"byte_end":378196,"line_start":148,"line_end":148,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378201,"byte_end":378210,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378583,"byte_end":378587,"line_start":159,"line_end":159,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378449,"byte_end":378490,"line_start":155,"line_end":155,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378495,"byte_end":378498,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378503,"byte_end":378557,"line_start":157,"line_end":157,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378562,"byte_end":378571,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378809,"byte_end":378817,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378667,"byte_end":378708,"line_start":163,"line_end":163,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378713,"byte_end":378716,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378721,"byte_end":378783,"line_start":165,"line_end":165,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378788,"byte_end":378797,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379077,"byte_end":379081,"line_start":175,"line_end":175,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378941,"byte_end":378983,"line_start":171,"line_end":171,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378988,"byte_end":378991,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":378996,"byte_end":379051,"line_start":173,"line_end":173,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379056,"byte_end":379065,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379305,"byte_end":379313,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"fn (&self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379161,"byte_end":379203,"line_start":179,"line_end":179,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379208,"byte_end":379211,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379216,"byte_end":379279,"line_start":181,"line_end":181,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379284,"byte_end":379293,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379507,"byte_end":379513,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379437,"byte_end":379481,"line_start":187,"line_end":187,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379486,"byte_end":379495,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379634,"byte_end":379642,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379570,"byte_end":379608,"line_start":193,"line_end":193,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379613,"byte_end":379622,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379868,"byte_end":379881,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379713,"byte_end":379750,"line_start":199,"line_end":199,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379755,"byte_end":379842,"line_start":200,"line_end":200,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379847,"byte_end":379856,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380113,"byte_end":380131,"line_start":210,"line_end":210,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":379977,"byte_end":380023,"line_start":206,"line_end":206,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380028,"byte_end":380031,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380036,"byte_end":380087,"line_start":208,"line_end":208,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380092,"byte_end":380101,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380451,"byte_end":380469,"line_start":219,"line_end":219,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380308,"byte_end":380361,"line_start":215,"line_end":215,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380366,"byte_end":380369,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380374,"byte_end":380425,"line_start":217,"line_end":217,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380430,"byte_end":380439,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380970,"byte_end":380991,"line_start":231,"line_end":231,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380646,"byte_end":380697,"line_start":224,"line_end":224,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380702,"byte_end":380747,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380752,"byte_end":380755,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380760,"byte_end":380807,"line_start":227,"line_end":227,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380812,"byte_end":380871,"line_start":228,"line_end":228,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":380949,"byte_end":380958,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381174,"byte_end":381183,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381107,"byte_end":381148,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381153,"byte_end":381162,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381493,"byte_end":381504,"line_start":247,"line_end":247,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"fn (&self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381235,"byte_end":381278,"line_start":241,"line_end":241,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381283,"byte_end":381286,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This is technically the same as [`naive_utc`](#method.naive_utc)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381291,"byte_end":381359,"line_start":243,"line_end":243,"column_start":5,"column_end":73}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381364,"byte_end":381425,"line_start":244,"line_end":244,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381430,"byte_end":381467,"line_start":245,"line_end":245,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381472,"byte_end":381481,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382049,"byte_end":382066,"line_start":262,"line_end":262,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381908,"byte_end":381965,"line_start":259,"line_end":259,"column_start":5,"column_end":62}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381970,"byte_end":382023,"line_start":260,"line_end":260,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382028,"byte_end":382037,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382541,"byte_end":382547,"line_start":272,"line_end":272,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382286,"byte_end":382340,"line_start":267,"line_end":267,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382345,"byte_end":382414,"line_start":268,"line_end":268,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382419,"byte_end":382457,"line_start":269,"line_end":269,"column_start":5,"column_end":43}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382462,"byte_end":382515,"line_start":270,"line_end":270,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382520,"byte_end":382529,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1609},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387365,"byte_end":387369,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387292,"byte_end":387360,"line_start":36,"line_end":36,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1611},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387508,"byte_end":387514,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387376,"byte_end":387429,"line_start":39,"line_end":39,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387434,"byte_end":387503,"line_start":40,"line_end":40,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1613},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387653,"byte_end":387659,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387521,"byte_end":387574,"line_start":43,"line_end":43,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387579,"byte_end":387648,"line_start":44,"line_end":44,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1615},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387798,"byte_end":387803,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387666,"byte_end":387719,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387724,"byte_end":387793,"line_start":48,"line_end":48,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1617},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388039,"byte_end":388045,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387810,"byte_end":387883,"line_start":51,"line_end":51,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387888,"byte_end":387962,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387967,"byte_end":388034,"line_start":53,"line_end":53,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1619},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388105,"byte_end":388120,"line_start":58,"line_end":58,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":1608},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1608},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387272,"byte_end":387285,"line_start":35,"line_end":35,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"SecondsFormat::{Secs, Millis, Micros, Nanos, AutoSi, __NonExhaustive}","parent":null,"children":[{"krate":0,"index":1609},{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1615},{"krate":0,"index":1617},{"krate":0,"index":1619}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387009,"byte_end":387081,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387082,"byte_end":387153,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387154,"byte_end":387157,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":387158,"byte_end":387217,"line_start":33,"line_end":33,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1632},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388418,"byte_end":388426,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1634},{"krate":0,"index":1635}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388125,"byte_end":388176,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388177,"byte_end":388180,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388181,"byte_end":388257,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388258,"byte_end":388325,"line_start":64,"line_end":64,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388326,"byte_end":388389,"line_start":65,"line_end":65,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389066,"byte_end":389074,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"fn (datetime: NaiveDateTime, offset: Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388537,"byte_end":388601,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388606,"byte_end":388676,"line_start":74,"line_end":74,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388681,"byte_end":388684,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388689,"byte_end":388702,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388707,"byte_end":388710,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388715,"byte_end":388723,"line_start":78,"line_end":78,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388728,"byte_end":388785,"line_start":79,"line_end":79,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388790,"byte_end":388793,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388798,"byte_end":388880,"line_start":81,"line_end":81,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388885,"byte_end":388926,"line_start":82,"line_end":82,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388931,"byte_end":388939,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389045,"byte_end":389054,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389262,"byte_end":389266,"line_start":93,"line_end":93,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"fn (&self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389205,"byte_end":389236,"line_start":91,"line_end":91,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389241,"byte_end":389250,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389491,"byte_end":389495,"line_start":100,"line_end":100,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"fn (&self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389370,"byte_end":389401,"line_start":97,"line_end":97,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389406,"byte_end":389465,"line_start":98,"line_end":98,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389470,"byte_end":389479,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389712,"byte_end":389721,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389578,"byte_end":389654,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389659,"byte_end":389686,"line_start":105,"line_end":105,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389691,"byte_end":389700,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390542,"byte_end":390558,"line_start":131,"line_end":131,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389783,"byte_end":389856,"line_start":111,"line_end":111,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389861,"byte_end":389864,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389869,"byte_end":389943,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":389948,"byte_end":390021,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390026,"byte_end":390098,"line_start":115,"line_end":115,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390103,"byte_end":390139,"line_start":116,"line_end":116,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390144,"byte_end":390147,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390152,"byte_end":390165,"line_start":118,"line_end":118,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390170,"byte_end":390173,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390178,"byte_end":390186,"line_start":120,"line_end":120,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390191,"byte_end":390211,"line_start":121,"line_end":121,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390216,"byte_end":390241,"line_start":122,"line_end":122,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390246,"byte_end":390249,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390254,"byte_end":390315,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390320,"byte_end":390365,"line_start":125,"line_end":125,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390370,"byte_end":390373,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390378,"byte_end":390441,"line_start":127,"line_end":127,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390446,"byte_end":390503,"line_start":128,"line_end":128,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390508,"byte_end":390516,"line_start":129,"line_end":129,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390521,"byte_end":390530,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391380,"byte_end":391395,"line_start":155,"line_end":155,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"fn (&self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390627,"byte_end":390699,"line_start":135,"line_end":135,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390704,"byte_end":390707,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390712,"byte_end":390786,"line_start":137,"line_end":137,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390791,"byte_end":390856,"line_start":138,"line_end":138,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390861,"byte_end":390932,"line_start":139,"line_end":139,"column_start":5,"column_end":76}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390937,"byte_end":390965,"line_start":140,"line_end":140,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390970,"byte_end":390973,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390978,"byte_end":390991,"line_start":142,"line_end":142,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":390996,"byte_end":390999,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391004,"byte_end":391012,"line_start":144,"line_end":144,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391017,"byte_end":391037,"line_start":145,"line_end":145,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391042,"byte_end":391067,"line_start":146,"line_end":146,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391072,"byte_end":391075,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391080,"byte_end":391140,"line_start":148,"line_end":148,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391145,"byte_end":391197,"line_start":149,"line_end":149,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391202,"byte_end":391205,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391210,"byte_end":391272,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391277,"byte_end":391341,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391346,"byte_end":391354,"line_start":153,"line_end":153,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391359,"byte_end":391368,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391725,"byte_end":391748,"line_start":165,"line_end":165,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391463,"byte_end":391532,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391537,"byte_end":391540,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391545,"byte_end":391604,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391609,"byte_end":391612,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391617,"byte_end":391699,"line_start":163,"line_end":163,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391704,"byte_end":391713,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392090,"byte_end":392113,"line_start":175,"line_end":175,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391824,"byte_end":391893,"line_start":169,"line_end":169,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391898,"byte_end":391901,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391906,"byte_end":391969,"line_start":171,"line_end":171,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391974,"byte_end":391977,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":391982,"byte_end":392064,"line_start":173,"line_end":173,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392069,"byte_end":392078,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392457,"byte_end":392479,"line_start":185,"line_end":185,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392189,"byte_end":392257,"line_start":179,"line_end":179,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392262,"byte_end":392265,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392270,"byte_end":392337,"line_start":181,"line_end":181,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392342,"byte_end":392345,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392350,"byte_end":392431,"line_start":183,"line_end":183,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392436,"byte_end":392445,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392624,"byte_end":392630,"line_start":191,"line_end":191,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"fn (&self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392554,"byte_end":392598,"line_start":189,"line_end":189,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392603,"byte_end":392612,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392751,"byte_end":392759,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"fn (&self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392687,"byte_end":392725,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392730,"byte_end":392739,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392989,"byte_end":393002,"line_start":204,"line_end":204,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"fn <Tz2> (&self, tz: &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392830,"byte_end":392867,"line_start":201,"line_end":201,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392872,"byte_end":392963,"line_start":202,"line_end":202,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":392968,"byte_end":392977,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393255,"byte_end":393273,"line_start":212,"line_end":212,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393110,"byte_end":393165,"line_start":208,"line_end":208,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393170,"byte_end":393173,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393178,"byte_end":393229,"line_start":210,"line_end":210,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393234,"byte_end":393243,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393639,"byte_end":393657,"line_start":222,"line_end":222,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"fn (self, rhs: OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393487,"byte_end":393549,"line_start":218,"line_end":218,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393554,"byte_end":393557,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393562,"byte_end":393613,"line_start":220,"line_end":220,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393618,"byte_end":393627,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394086,"byte_end":394107,"line_start":232,"line_end":232,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"fn <Tz2> (self, rhs: DateTime<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393871,"byte_end":393935,"line_start":228,"line_end":228,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":393940,"byte_end":393987,"line_start":229,"line_end":229,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394065,"byte_end":394074,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394306,"byte_end":394315,"line_start":238,"line_end":238,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394235,"byte_end":394280,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394285,"byte_end":394294,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394448,"byte_end":394459,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"fn (&self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394375,"byte_end":394422,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394427,"byte_end":394436,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398261,"byte_end":398279,"line_start":338,"line_end":338,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":397687,"byte_end":397772,"line_start":325,"line_end":325,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":397777,"byte_end":397839,"line_start":326,"line_end":326,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":397844,"byte_end":397847,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ RFC 2822 is the internet message standard that specifices the","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":397852,"byte_end":397917,"line_start":328,"line_end":328,"column_start":5,"column_end":70}},{"value":"/ representation of times in HTTP and email headers.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":397922,"byte_end":397976,"line_start":329,"line_end":329,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":397981,"byte_end":397984,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":397989,"byte_end":397996,"line_start":331,"line_end":331,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398001,"byte_end":398053,"line_start":332,"line_end":332,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398058,"byte_end":398073,"line_start":333,"line_end":333,"column_start":5,"column_end":20}},{"value":"/     DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398078,"byte_end":398157,"line_start":334,"line_end":334,"column_start":5,"column_end":84}},{"value":"/     FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398162,"byte_end":398226,"line_start":335,"line_end":335,"column_start":5,"column_end":69}},{"value":"/ );","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398231,"byte_end":398237,"line_start":336,"line_end":336,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398242,"byte_end":398249,"line_start":337,"line_end":337,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398904,"byte_end":398922,"line_start":350,"line_end":350,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"fn (s: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398535,"byte_end":398628,"line_start":345,"line_end":345,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398633,"byte_end":398695,"line_start":346,"line_end":346,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398700,"byte_end":398703,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398708,"byte_end":398798,"line_start":348,"line_end":348,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":398803,"byte_end":398892,"line_start":349,"line_end":349,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400130,"byte_end":400144,"line_start":377,"line_end":377,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"fn (s: &str, fmt: &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399178,"byte_end":399234,"line_start":357,"line_end":357,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399239,"byte_end":399296,"line_start":358,"line_end":358,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399301,"byte_end":399370,"line_start":359,"line_end":359,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399375,"byte_end":399413,"line_start":360,"line_end":360,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399418,"byte_end":399421,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399426,"byte_end":399520,"line_start":362,"line_end":362,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399525,"byte_end":399528,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399533,"byte_end":399599,"line_start":364,"line_end":364,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399604,"byte_end":399698,"line_start":365,"line_end":365,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399703,"byte_end":399778,"line_start":366,"line_end":366,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399783,"byte_end":399786,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399791,"byte_end":399804,"line_start":368,"line_end":368,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399809,"byte_end":399812,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399817,"byte_end":399828,"line_start":370,"line_end":370,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399833,"byte_end":399883,"line_start":371,"line_end":371,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399888,"byte_end":399891,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399896,"byte_end":399934,"line_start":373,"line_end":373,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":399939,"byte_end":400009,"line_start":374,"line_end":374,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400014,"byte_end":400106,"line_start":375,"line_end":375,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400111,"byte_end":400118,"line_start":376,"line_end":376,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400565,"byte_end":400575,"line_start":387,"line_end":387,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400409,"byte_end":400495,"line_start":385,"line_end":385,"column_start":5,"column_end":91}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400500,"byte_end":400553,"line_start":386,"line_end":386,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400907,"byte_end":400917,"line_start":394,"line_end":394,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400743,"byte_end":400837,"line_start":392,"line_end":392,"column_start":5,"column_end":99}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400842,"byte_end":400895,"line_start":393,"line_end":393,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":402380,"byte_end":402395,"line_start":424,"line_end":424,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"fn (&self, secform: SecondsFormat, use_z: bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401085,"byte_end":401157,"line_start":399,"line_end":399,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`. If passed `use_z` true and the","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401162,"byte_end":401232,"line_start":400,"line_end":400,"column_start":5,"column_end":75}},{"value":"/ timezone is UTC (offset 0), use 'Z', as per","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401237,"byte_end":401284,"line_start":401,"line_end":401,"column_start":5,"column_end":52}},{"value":"/ [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401289,"byte_end":401376,"line_start":402,"line_end":402,"column_start":5,"column_end":92}},{"value":"/ If passed `use_z` false, use","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401381,"byte_end":401413,"line_start":403,"line_end":403,"column_start":5,"column_end":37}},{"value":"/ [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401418,"byte_end":401503,"line_start":404,"line_end":404,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401508,"byte_end":401511,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401516,"byte_end":401530,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401535,"byte_end":401538,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401543,"byte_end":401554,"line_start":408,"line_end":408,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401559,"byte_end":401631,"line_start":409,"line_end":409,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401636,"byte_end":401704,"line_start":410,"line_end":410,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401709,"byte_end":401773,"line_start":411,"line_end":411,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401778,"byte_end":401826,"line_start":412,"line_end":412,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401831,"byte_end":401894,"line_start":413,"line_end":413,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401899,"byte_end":401942,"line_start":414,"line_end":414,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":401947,"byte_end":402008,"line_start":415,"line_end":415,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":402013,"byte_end":402052,"line_start":416,"line_end":416,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":402057,"byte_end":402060,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":402065,"byte_end":402110,"line_start":418,"line_end":418,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":402115,"byte_end":402183,"line_start":419,"line_end":419,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":402188,"byte_end":402249,"line_start":420,"line_end":420,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":402254,"byte_end":402298,"line_start":421,"line_end":421,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":402303,"byte_end":402310,"line_start":422,"line_end":422,"column_start":5,"column_end":12}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":402315,"byte_end":402368,"line_start":423,"line_end":423,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404154,"byte_end":404171,"line_start":477,"line_end":477,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"fn <'a, I, B> (&self, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":403995,"byte_end":404070,"line_start":474,"line_end":474,"column_start":5,"column_end":80}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404075,"byte_end":404128,"line_start":475,"line_end":475,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404133,"byte_end":404142,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404712,"byte_end":404718,"line_start":488,"line_end":488,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"fn <'a> (&self, fmt: &'a str) -> DelayedFormat<StrftimeItems<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404439,"byte_end":404511,"line_start":483,"line_end":483,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404516,"byte_end":404585,"line_start":484,"line_end":484,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404590,"byte_end":404628,"line_start":485,"line_end":485,"column_start":5,"column_end":43}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404633,"byte_end":404686,"line_start":486,"line_end":486,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404691,"byte_end":404700,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1009},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1639},{"krate":0,"index":1646},{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1648},{"krate":0,"index":1665},{"krate":0,"index":1663},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1655},{"krate":0,"index":1666},{"krate":0,"index":1719},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1710},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1721},{"krate":0,"index":1768},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1759},{"krate":0,"index":1770},{"krate":0,"index":1781},{"krate":0,"index":1779},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1783},{"krate":0,"index":1800},{"krate":0,"index":1798},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1802},{"krate":0,"index":1839},{"krate":0,"index":1833},{"krate":0,"index":1835},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1825},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1842},{"krate":0,"index":1855},{"krate":0,"index":1853},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1845},{"krate":0,"index":1857},{"krate":0,"index":1881},{"krate":0,"index":1879},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1872},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1116},{"krate":0,"index":1185},{"krate":0,"index":1229},{"krate":0,"index":1298},{"krate":0,"index":1933},{"krate":0,"index":1939},{"krate":0,"index":1322},{"krate":0,"index":1329},{"krate":0,"index":1334}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"! Formatting (and parsing) utilities for date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472124,"byte_end":472181,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472182,"byte_end":472185,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This module provides the common types and routines to implement,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472186,"byte_end":472254,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"! for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472255,"byte_end":472334,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472335,"byte_end":472423,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"! For most cases you should use these high-level interfaces.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472424,"byte_end":472486,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472487,"byte_end":472490,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472491,"byte_end":472579,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"! which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472580,"byte_end":472673,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"! the [`Item`](./enum.Item.html) type.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472674,"byte_end":472714,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"! They are generated from more readable **format strings**;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472715,"byte_end":472776,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"! currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472777,"byte_end":472846,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"! C's `strftime` format](./strftime/index.html).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472847,"byte_end":472897,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":472899,"byte_end":472943,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1649},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473911,"byte_end":473915,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1648},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473891,"byte_end":473906,"line_start":51,"line_end":51,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1651},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473949,"byte_end":473953,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1648},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473921,"byte_end":473944,"line_start":53,"line_end":53,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1653},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473982,"byte_end":473987,"line_start":56,"line_end":56,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1648},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473959,"byte_end":473977,"line_start":55,"line_end":55,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1648},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473881,"byte_end":473884,"line_start":50,"line_end":50,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"Pad::{None, Zero, Space}","parent":null,"children":[{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1653}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473785,"byte_end":473826,"line_start":48,"line_end":48,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1667},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474883,"byte_end":474887,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474760,"byte_end":474799,"line_start":74,"line_end":74,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474804,"byte_end":474878,"line_start":75,"line_end":75,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1669},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474989,"byte_end":474999,"line_start":78,"line_end":78,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474893,"byte_end":474984,"line_start":77,"line_end":77,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1671},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475070,"byte_end":475080,"line_start":80,"line_end":80,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475005,"byte_end":475065,"line_start":79,"line_end":79,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1673},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475215,"byte_end":475222,"line_start":83,"line_end":83,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475086,"byte_end":475131,"line_start":81,"line_end":81,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475136,"byte_end":475210,"line_start":82,"line_end":82,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1675},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475320,"byte_end":475333,"line_start":85,"line_end":85,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475228,"byte_end":475315,"line_start":84,"line_end":84,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1677},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475416,"byte_end":475429,"line_start":87,"line_end":87,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475339,"byte_end":475411,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1679},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475460,"byte_end":475465,"line_start":89,"line_end":89,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475435,"byte_end":475455,"line_start":88,"line_end":88,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1681},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475507,"byte_end":475510,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475471,"byte_end":475502,"line_start":90,"line_end":90,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1683},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475603,"byte_end":475614,"line_start":93,"line_end":93,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475516,"byte_end":475598,"line_start":92,"line_end":92,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1685},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475707,"byte_end":475718,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475620,"byte_end":475702,"line_start":94,"line_end":94,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1687},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475776,"byte_end":475783,"line_start":97,"line_end":97,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475724,"byte_end":475771,"line_start":96,"line_end":96,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1689},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475859,"byte_end":475873,"line_start":99,"line_end":99,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475789,"byte_end":475854,"line_start":98,"line_end":98,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1691},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475947,"byte_end":475961,"line_start":101,"line_end":101,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475879,"byte_end":475942,"line_start":100,"line_end":100,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1693},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476002,"byte_end":476009,"line_start":103,"line_end":103,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":475967,"byte_end":475997,"line_start":102,"line_end":102,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1695},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476068,"byte_end":476072,"line_start":105,"line_end":105,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476015,"byte_end":476063,"line_start":104,"line_end":104,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1697},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476131,"byte_end":476137,"line_start":107,"line_end":107,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476078,"byte_end":476126,"line_start":106,"line_end":106,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1699},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476210,"byte_end":476216,"line_start":109,"line_end":109,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476143,"byte_end":476205,"line_start":108,"line_end":108,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1701},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476291,"byte_end":476297,"line_start":111,"line_end":111,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476222,"byte_end":476286,"line_start":110,"line_end":110,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1703},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476500,"byte_end":476510,"line_start":115,"line_end":115,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476303,"byte_end":476371,"line_start":112,"line_end":112,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476376,"byte_end":476417,"line_start":113,"line_end":113,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476422,"byte_end":476495,"line_start":114,"line_end":114,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1705},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476690,"byte_end":476699,"line_start":118,"line_end":118,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476516,"byte_end":476608,"line_start":116,"line_end":116,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476613,"byte_end":476685,"line_start":117,"line_end":117,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1707},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476918,"byte_end":476926,"line_start":124,"line_end":124,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":1666},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476706,"byte_end":476729,"line_start":120,"line_end":120,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476734,"byte_end":476737,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476742,"byte_end":476818,"line_start":122,"line_end":122,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476823,"byte_end":476913,"line_start":123,"line_end":123,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1666},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474746,"byte_end":474753,"line_start":73,"line_end":73,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"Numeric::{Year, YearDiv100, YearMod100, IsoYear, IsoYearDiv100, IsoYearMod100, Month, Day, WeekFromSun, WeekFromMon, IsoWeek, NumDaysFromSun, WeekdayFromMon, Ordinal, Hour, Hour12, Minute, Second, Nanosecond, Timestamp, Internal}","parent":null,"children":[{"krate":0,"index":1667},{"krate":0,"index":1669},{"krate":0,"index":1671},{"krate":0,"index":1673},{"krate":0,"index":1675},{"krate":0,"index":1677},{"krate":0,"index":1679},{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1685},{"krate":0,"index":1687},{"krate":0,"index":1689},{"krate":0,"index":1691},{"krate":0,"index":1693},{"krate":0,"index":1695},{"krate":0,"index":1697},{"krate":0,"index":1699},{"krate":0,"index":1701},{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1707}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":473992,"byte_end":474015,"line_start":59,"line_end":59,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474016,"byte_end":474086,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474087,"byte_end":474090,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474091,"byte_end":474157,"line_start":62,"line_end":62,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474158,"byte_end":474257,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474258,"byte_end":474285,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474286,"byte_end":474365,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474366,"byte_end":474369,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474370,"byte_end":474431,"line_start":67,"line_end":67,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474432,"byte_end":474515,"line_start":68,"line_end":68,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474516,"byte_end":474566,"line_start":69,"line_end":69,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474567,"byte_end":474654,"line_start":70,"line_end":70,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":474655,"byte_end":474697,"line_start":71,"line_end":71,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1032},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477034,"byte_end":477049,"line_start":128,"line_end":128,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1033}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":476948,"byte_end":477022,"line_start":127,"line_end":127,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1722},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477848,"byte_end":477862,"line_start":162,"line_end":162,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477715,"byte_end":477743,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477748,"byte_end":477751,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477756,"byte_end":477843,"line_start":161,"line_end":161,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1724},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477995,"byte_end":478008,"line_start":166,"line_end":166,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477868,"byte_end":477889,"line_start":163,"line_end":163,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477894,"byte_end":477897,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477902,"byte_end":477990,"line_start":165,"line_end":165,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1726},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478157,"byte_end":478173,"line_start":170,"line_end":170,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478014,"byte_end":478052,"line_start":167,"line_end":167,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478057,"byte_end":478060,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478065,"byte_end":478152,"line_start":169,"line_end":169,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1728},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478316,"byte_end":478331,"line_start":174,"line_end":174,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478179,"byte_end":478210,"line_start":171,"line_end":171,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478215,"byte_end":478218,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478223,"byte_end":478311,"line_start":173,"line_end":173,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1730},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478409,"byte_end":478418,"line_start":178,"line_end":178,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478337,"byte_end":478347,"line_start":175,"line_end":175,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478352,"byte_end":478355,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478360,"byte_end":478404,"line_start":177,"line_end":177,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1732},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478496,"byte_end":478505,"line_start":182,"line_end":182,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478424,"byte_end":478434,"line_start":179,"line_end":179,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478439,"byte_end":478442,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478447,"byte_end":478491,"line_start":181,"line_end":181,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1734},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478752,"byte_end":478762,"line_start":186,"line_end":186,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478511,"byte_end":478584,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478589,"byte_end":478665,"line_start":184,"line_end":184,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478670,"byte_end":478747,"line_start":185,"line_end":185,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1736},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478852,"byte_end":478863,"line_start":188,"line_end":188,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478768,"byte_end":478847,"line_start":187,"line_end":187,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1738},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478953,"byte_end":478964,"line_start":190,"line_end":190,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478869,"byte_end":478948,"line_start":189,"line_end":189,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1740},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479054,"byte_end":479065,"line_start":192,"line_end":192,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":478970,"byte_end":479049,"line_start":191,"line_end":191,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1742},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479186,"byte_end":479198,"line_start":196,"line_end":196,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479071,"byte_end":479089,"line_start":193,"line_end":193,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479094,"byte_end":479097,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479102,"byte_end":479181,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1744},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479533,"byte_end":479552,"line_start":202,"line_end":202,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479204,"byte_end":479277,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479282,"byte_end":479285,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479290,"byte_end":479382,"line_start":199,"line_end":199,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479387,"byte_end":479439,"line_start":200,"line_end":200,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479444,"byte_end":479528,"line_start":201,"line_end":201,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1746},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479944,"byte_end":479964,"line_start":209,"line_end":209,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479558,"byte_end":479626,"line_start":203,"line_end":203,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479631,"byte_end":479634,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479639,"byte_end":479731,"line_start":205,"line_end":205,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479736,"byte_end":479793,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479798,"byte_end":479850,"line_start":207,"line_end":207,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479855,"byte_end":479939,"line_start":208,"line_end":208,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1748},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480103,"byte_end":480117,"line_start":212,"line_end":212,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":479970,"byte_end":480056,"line_start":210,"line_end":210,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480061,"byte_end":480098,"line_start":211,"line_end":211,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1750},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480258,"byte_end":480273,"line_start":215,"line_end":215,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480123,"byte_end":480211,"line_start":213,"line_end":213,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480216,"byte_end":480253,"line_start":214,"line_end":214,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1752},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480366,"byte_end":480373,"line_start":217,"line_end":217,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480279,"byte_end":480361,"line_start":216,"line_end":216,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1754},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480429,"byte_end":480436,"line_start":219,"line_end":219,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480379,"byte_end":480424,"line_start":218,"line_end":218,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1756},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480655,"byte_end":480663,"line_start":225,"line_end":225,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":1721},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480443,"byte_end":480466,"line_start":221,"line_end":221,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480471,"byte_end":480474,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480479,"byte_end":480555,"line_start":223,"line_end":223,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480560,"byte_end":480650,"line_start":224,"line_end":224,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1721},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477703,"byte_end":477708,"line_start":158,"line_end":158,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"Fixed::{ShortMonthName, LongMonthName, ShortWeekdayName, LongWeekdayName, LowerAmPm, UpperAmPm, Nanosecond, Nanosecond3, Nanosecond6, Nanosecond9, TimezoneName, TimezoneOffsetColon, TimezoneOffsetColonZ, TimezoneOffset, TimezoneOffsetZ, RFC2822, RFC3339, Internal}","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477480,"byte_end":477508,"line_start":153,"line_end":153,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477509,"byte_end":477512,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477513,"byte_end":477569,"line_start":155,"line_end":155,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477570,"byte_end":477654,"line_start":156,"line_end":156,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1770},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480813,"byte_end":480826,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":1771}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":480683,"byte_end":480762,"line_start":228,"line_end":228,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1804},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":481842,"byte_end":481849,"line_start":257,"line_end":257,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":481797,"byte_end":481837,"line_start":256,"line_end":256,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1807},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":481987,"byte_end":481999,"line_start":260,"line_end":260,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Literal` but with the string owned by the item.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":481864,"byte_end":481924,"line_start":258,"line_end":258,"column_start":5,"column_end":65}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":481929,"byte_end":481982,"line_start":259,"line_end":259,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1810},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482087,"byte_end":482092,"line_start":262,"line_end":262,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482015,"byte_end":482082,"line_start":261,"line_end":261,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1813},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482228,"byte_end":482238,"line_start":265,"line_end":265,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Space` but with the string owned by the item.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482107,"byte_end":482165,"line_start":263,"line_end":263,"column_start":5,"column_end":63}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482170,"byte_end":482223,"line_start":264,"line_end":264,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1816},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482417,"byte_end":482424,"line_start":268,"line_end":268,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482254,"byte_end":482344,"line_start":266,"line_end":266,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482349,"byte_end":482412,"line_start":267,"line_end":267,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1820},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482471,"byte_end":482476,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482444,"byte_end":482466,"line_start":269,"line_end":269,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1823},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482565,"byte_end":482570,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":482489,"byte_end":482560,"line_start":271,"line_end":271,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1802},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":481782,"byte_end":481786,"line_start":255,"line_end":255,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"Item::{Literal, OwnedLiteral, Space, OwnedSpace, Numeric, Fixed, Error}","parent":null,"children":[{"krate":0,"index":1804},{"krate":0,"index":1807},{"krate":0,"index":1810},{"krate":0,"index":1813},{"krate":0,"index":1816},{"krate":0,"index":1820},{"krate":0,"index":1823}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":481658,"byte_end":481733,"line_start":253,"line_end":253,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1842},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":483189,"byte_end":483199,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":483093,"byte_end":483132,"line_start":283,"line_end":283,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1048},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":484467,"byte_end":484478,"line_start":320,"line_end":320,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same as `Result<T, ParseError>`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":484421,"byte_end":484457,"line_start":319,"line_end":319,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1061},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":486136,"byte_end":486142,"line_start":356,"line_end":356,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"fn <'a, I, B> (w: &mut fmt::Formatter, date: Option<&NaiveDate>, time: Option<&NaiveTime>, off: Option<&(String, FixedOffset)>, items: I) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":485970,"byte_end":486034,"line_start":353,"line_end":353,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":486035,"byte_end":486074,"line_start":354,"line_end":354,"column_start":1,"column_end":40}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":486075,"byte_end":486128,"line_start":355,"line_end":355,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1883},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502632,"byte_end":502638,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":1901},{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1904}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502114,"byte_end":502182,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502183,"byte_end":502186,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502187,"byte_end":502270,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502271,"byte_end":502363,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502364,"byte_end":502367,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502368,"byte_end":502450,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502451,"byte_end":502546,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502547,"byte_end":502585,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1884},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502815,"byte_end":502819,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502645,"byte_end":502654,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502659,"byte_end":502662,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502667,"byte_end":502742,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502747,"byte_end":502806,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1885},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503123,"byte_end":503135,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502839,"byte_end":502907,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502912,"byte_end":502915,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502920,"byte_end":502977,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":502982,"byte_end":503041,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503046,"byte_end":503114,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1886},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503228,"byte_end":503240,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503155,"byte_end":503219,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1887},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503507,"byte_end":503514,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503260,"byte_end":503334,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503339,"byte_end":503342,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503347,"byte_end":503432,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503437,"byte_end":503498,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1888},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503901,"byte_end":503916,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503534,"byte_end":503624,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503629,"byte_end":503676,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503681,"byte_end":503684,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503689,"byte_end":503746,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503751,"byte_end":503816,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503821,"byte_end":503892,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1889},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504083,"byte_end":504098,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":503936,"byte_end":504022,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504027,"byte_end":504074,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1890},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504145,"byte_end":504150,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504118,"byte_end":504136,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1891},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504305,"byte_end":504318,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504170,"byte_end":504241,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504246,"byte_end":504296,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1892},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504473,"byte_end":504486,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504338,"byte_end":504409,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504414,"byte_end":504464,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1893},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504626,"byte_end":504633,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504506,"byte_end":504569,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504574,"byte_end":504617,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1894},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504682,"byte_end":504689,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504653,"byte_end":504673,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1895},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504783,"byte_end":504790,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504713,"byte_end":504774,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1896},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504894,"byte_end":504897,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504810,"byte_end":504885,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1897},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504998,"byte_end":505009,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":504917,"byte_end":504989,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1898},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505072,"byte_end":505083,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505029,"byte_end":505063,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1899},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505138,"byte_end":505144,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505103,"byte_end":505129,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1900},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505228,"byte_end":505234,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505164,"byte_end":505219,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1901},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505333,"byte_end":505343,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505254,"byte_end":505324,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1902},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505546,"byte_end":505555,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505363,"byte_end":505440,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505445,"byte_end":505448,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505453,"byte_end":505537,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1903},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505634,"byte_end":505640,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":505575,"byte_end":505625,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":506745,"byte_end":506748,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"fn () -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":506687,"byte_end":506733,"line_start":139,"line_end":139,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":506898,"byte_end":506906,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":506800,"byte_end":506872,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":506877,"byte_end":506886,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507155,"byte_end":507171,"line_start":152,"line_end":152,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507041,"byte_end":507129,"line_start":150,"line_end":150,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507134,"byte_end":507143,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507479,"byte_end":507495,"line_start":159,"line_end":159,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507365,"byte_end":507453,"line_start":157,"line_end":157,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507458,"byte_end":507467,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507793,"byte_end":507804,"line_start":166,"line_end":166,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507689,"byte_end":507767,"line_start":164,"line_end":164,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507772,"byte_end":507781,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508062,"byte_end":508081,"line_start":172,"line_end":172,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":507942,"byte_end":508036,"line_start":170,"line_end":170,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508041,"byte_end":508050,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508398,"byte_end":508417,"line_start":179,"line_end":179,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508278,"byte_end":508372,"line_start":177,"line_end":177,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508377,"byte_end":508386,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508714,"byte_end":508723,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508614,"byte_end":508688,"line_start":184,"line_end":184,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508693,"byte_end":508702,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508975,"byte_end":508992,"line_start":192,"line_end":192,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508859,"byte_end":508949,"line_start":190,"line_end":190,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":508954,"byte_end":508963,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509252,"byte_end":509269,"line_start":198,"line_end":198,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509136,"byte_end":509226,"line_start":196,"line_end":196,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509231,"byte_end":509240,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509517,"byte_end":509528,"line_start":204,"line_end":204,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509413,"byte_end":509491,"line_start":202,"line_end":202,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509496,"byte_end":509505,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509770,"byte_end":509781,"line_start":210,"line_end":210,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"fn (&mut self, value: Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509666,"byte_end":509744,"line_start":208,"line_end":208,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509749,"byte_end":509758,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509997,"byte_end":510008,"line_start":216,"line_end":216,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509893,"byte_end":509971,"line_start":214,"line_end":214,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":509976,"byte_end":509985,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510242,"byte_end":510249,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510146,"byte_end":510216,"line_start":220,"line_end":220,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510221,"byte_end":510230,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510535,"byte_end":510543,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"fn (&mut self, value: bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510383,"byte_end":510469,"line_start":226,"line_end":226,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510474,"byte_end":510509,"line_start":227,"line_end":227,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510514,"byte_end":510523,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510816,"byte_end":510826,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510672,"byte_end":510745,"line_start":233,"line_end":233,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510750,"byte_end":510790,"line_start":234,"line_end":234,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":510795,"byte_end":510804,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511183,"byte_end":511191,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511015,"byte_end":511082,"line_start":241,"line_end":241,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511087,"byte_end":511157,"line_start":242,"line_end":242,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511162,"byte_end":511171,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511535,"byte_end":511545,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511433,"byte_end":511509,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511514,"byte_end":511523,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511784,"byte_end":511794,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511682,"byte_end":511758,"line_start":257,"line_end":257,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511763,"byte_end":511772,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512041,"byte_end":512055,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":511931,"byte_end":512015,"line_start":263,"line_end":263,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512020,"byte_end":512029,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512304,"byte_end":512317,"line_start":271,"line_end":271,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512196,"byte_end":512278,"line_start":269,"line_end":269,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512283,"byte_end":512292,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512529,"byte_end":512539,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"fn (&mut self, value: i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512427,"byte_end":512503,"line_start":275,"line_end":275,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512508,"byte_end":512517,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":513183,"byte_end":513196,"line_start":292,"line_end":292,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"fn (&self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512676,"byte_end":512728,"line_start":281,"line_end":281,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512733,"byte_end":512736,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512741,"byte_end":512815,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512820,"byte_end":512823,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512828,"byte_end":512851,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512856,"byte_end":512894,"line_start":286,"line_end":286,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512899,"byte_end":512970,"line_start":287,"line_end":287,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":512975,"byte_end":512995,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":513000,"byte_end":513003,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":513008,"byte_end":513102,"line_start":290,"line_end":290,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":513107,"byte_end":513171,"line_start":291,"line_end":291,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522184,"byte_end":522197,"line_start":477,"line_end":477,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"fn (&self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521781,"byte_end":521833,"line_start":468,"line_end":468,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521838,"byte_end":521841,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521846,"byte_end":521920,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521925,"byte_end":521928,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521933,"byte_end":521992,"line_start":472,"line_end":472,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":521997,"byte_end":522053,"line_start":473,"line_end":473,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522058,"byte_end":522097,"line_start":474,"line_end":474,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522102,"byte_end":522105,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":522110,"byte_end":522172,"line_start":476,"line_end":476,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523980,"byte_end":524009,"line_start":519,"line_end":519,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"fn (&self, offset: i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523495,"byte_end":523556,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523561,"byte_end":523650,"line_start":513,"line_end":513,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523655,"byte_end":523732,"line_start":514,"line_end":514,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523737,"byte_end":523740,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523745,"byte_end":523808,"line_start":516,"line_end":516,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523813,"byte_end":523899,"line_start":517,"line_end":517,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":523904,"byte_end":523968,"line_start":518,"line_end":518,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527376,"byte_end":527391,"line_start":589,"line_end":589,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"fn (&self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527300,"byte_end":527364,"line_start":588,"line_end":588,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527863,"byte_end":527874,"line_start":599,"line_end":599,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"fn (&self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527512,"byte_end":527582,"line_start":593,"line_end":593,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527587,"byte_end":527590,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527595,"byte_end":527658,"line_start":595,"line_end":595,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527663,"byte_end":527749,"line_start":596,"line_end":596,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527754,"byte_end":527782,"line_start":597,"line_end":597,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":527787,"byte_end":527851,"line_start":598,"line_end":598,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528902,"byte_end":528927,"line_start":619,"line_end":619,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"fn <Tz> (&self, tz: &Tz) -> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528345,"byte_end":528415,"line_start":610,"line_end":610,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528420,"byte_end":528500,"line_start":611,"line_end":611,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528505,"byte_end":528508,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528513,"byte_end":528576,"line_start":613,"line_end":613,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528581,"byte_end":528667,"line_start":614,"line_end":614,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528672,"byte_end":528700,"line_start":615,"line_end":615,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528705,"byte_end":528769,"line_start":616,"line_end":616,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528774,"byte_end":528849,"line_start":617,"line_end":617,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":528854,"byte_end":528890,"line_start":618,"line_end":618,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1265},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":576164,"byte_end":576169,"line_start":205,"line_end":205,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"fn <'a, I, B> (parsed: &mut Parsed, s: &str, items: I) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575261,"byte_end":575335,"line_start":189,"line_end":189,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575336,"byte_end":575432,"line_start":190,"line_end":190,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575433,"byte_end":575486,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575487,"byte_end":575571,"line_start":192,"line_end":192,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575572,"byte_end":575575,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575576,"byte_end":575620,"line_start":194,"line_end":194,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575621,"byte_end":575624,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575625,"byte_end":575683,"line_start":196,"line_end":196,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575684,"byte_end":575777,"line_start":197,"line_end":197,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575778,"byte_end":575853,"line_start":198,"line_end":198,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575854,"byte_end":575857,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575858,"byte_end":575901,"line_start":200,"line_end":200,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575902,"byte_end":575965,"line_start":201,"line_end":201,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":575966,"byte_end":576057,"line_start":202,"line_end":202,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":576058,"byte_end":576061,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":576062,"byte_end":576156,"line_start":204,"line_end":204,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1298},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","parent":null,"children":[{"krate":0,"index":1299},{"krate":0,"index":1914},{"krate":0,"index":1921},{"krate":0,"index":1918},{"krate":0,"index":1306},{"krate":0,"index":1311},{"krate":0,"index":1312}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"!\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [^1]           |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^2] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^2]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^3]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^4] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Same as `%D`.                                                         |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^5]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^8] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^8] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^8]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^8]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^8]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^8]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^8]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^8]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Same as `%T`.                                                         |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same as `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | *Formatting only:* Local time zone name.                                   |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|`ctime` date & time format. Same as `%a %b %e %T %Y` sans `\\n`.|\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^6]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^7]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n[^2]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^3]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^4]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^5]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^6]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^7]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^8]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n*/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":608686,"byte_end":619366,"line_start":4,"line_end":160,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1914},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":619534,"byte_end":619547,"line_start":166,"line_end":166,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":1916},{"krate":0,"index":1917}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":619442,"byte_end":619498,"line_start":164,"line_end":164,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":620023,"byte_end":620026,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"fn (s: &'a str) -> StrftimeItems<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":619937,"byte_end":620011,"line_start":176,"line_end":176,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1933},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499145,"byte_end":499158,"line_start":619,"line_end":619,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498899,"byte_end":498980,"line_start":615,"line_end":615,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498981,"byte_end":499062,"line_start":616,"line_end":616,"column_start":1,"column_end":82}},{"value":"cfg(any (feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499063,"byte_end":499116,"line_start":617,"line_end":617,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499682,"byte_end":499685,"line_start":633,"line_end":633,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"fn (date: Option<NaiveDate>, time: Option<NaiveTime>, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499605,"byte_end":499670,"line_start":632,"line_end":632,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499945,"byte_end":499960,"line_start":638,"line_end":638,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"fn <Off> (date: Option<NaiveDate>, time: Option<NaiveTime>, offset: &Off, items: I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499853,"byte_end":499933,"line_start":637,"line_end":637,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":1343},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":634910,"byte_end":634921,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1344},{"krate":0,"index":1345}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":634512,"byte_end":634588,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":634589,"byte_end":634660,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":634661,"byte_end":634733,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":634734,"byte_end":634809,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":634810,"byte_end":634887,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":634888,"byte_end":634899,"line_start":13,"line_end":13,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635451,"byte_end":635464,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1343},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":634928,"byte_end":635003,"line_start":15,"line_end":15,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635008,"byte_end":635077,"line_start":16,"line_end":16,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635082,"byte_end":635114,"line_start":17,"line_end":17,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635119,"byte_end":635122,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635127,"byte_end":635140,"line_start":19,"line_end":19,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635145,"byte_end":635157,"line_start":20,"line_end":20,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635162,"byte_end":635229,"line_start":21,"line_end":21,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635234,"byte_end":635297,"line_start":22,"line_end":22,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635302,"byte_end":635364,"line_start":23,"line_end":23,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635369,"byte_end":635431,"line_start":24,"line_end":24,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635436,"byte_end":635443,"line_start":25,"line_end":25,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635967,"byte_end":635980,"line_start":38,"line_end":38,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"fn (self, digits: u16) -> Self","parent":{"krate":0,"index":1343},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635498,"byte_end":635562,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635567,"byte_end":635630,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635635,"byte_end":635638,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635643,"byte_end":635656,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635661,"byte_end":635673,"line_start":32,"line_end":32,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635678,"byte_end":635745,"line_start":33,"line_end":33,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635750,"byte_end":635813,"line_start":34,"line_end":34,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635818,"byte_end":635880,"line_start":35,"line_end":35,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635885,"byte_end":635947,"line_start":36,"line_end":36,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":635952,"byte_end":635959,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1943},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24211,"byte_end":24214,"line_start":578,"line_end":578,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24195,"byte_end":24206,"line_start":577,"line_end":577,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1946},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24241,"byte_end":24244,"line_start":580,"line_end":580,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24224,"byte_end":24236,"line_start":579,"line_end":579,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1949},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24273,"byte_end":24276,"line_start":582,"line_end":582,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24254,"byte_end":24268,"line_start":581,"line_end":581,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1952},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24304,"byte_end":24307,"line_start":584,"line_end":584,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24286,"byte_end":24299,"line_start":583,"line_end":583,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1955},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24333,"byte_end":24336,"line_start":586,"line_end":586,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24317,"byte_end":24328,"line_start":585,"line_end":585,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1958},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24364,"byte_end":24367,"line_start":588,"line_end":588,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24346,"byte_end":24359,"line_start":587,"line_end":587,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1961},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24393,"byte_end":24396,"line_start":590,"line_end":590,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":1942},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24377,"byte_end":24388,"line_start":589,"line_end":589,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":1942},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24181,"byte_end":24188,"line_start":576,"line_end":576,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"Weekday::{Mon, Tue, Wed, Thu, Fri, Sat, Sun}","parent":null,"children":[{"krate":0,"index":1943},{"krate":0,"index":1946},{"krate":0,"index":1949},{"krate":0,"index":1952},{"krate":0,"index":1955},{"krate":0,"index":1958},{"krate":0,"index":1961}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23786,"byte_end":23806,"line_start":569,"line_end":569,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23807,"byte_end":23810,"line_start":570,"line_end":570,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23811,"byte_end":23868,"line_start":571,"line_end":571,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23869,"byte_end":23947,"line_start":572,"line_end":572,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":23948,"byte_end":24039,"line_start":573,"line_end":573,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24715,"byte_end":24719,"line_start":600,"line_end":600,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24424,"byte_end":24453,"line_start":594,"line_end":594,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24458,"byte_end":24461,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24466,"byte_end":24537,"line_start":596,"line_end":596,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24542,"byte_end":24613,"line_start":597,"line_end":597,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24618,"byte_end":24689,"line_start":598,"line_end":598,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24694,"byte_end":24703,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25372,"byte_end":25376,"line_start":618,"line_end":618,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"fn (&self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25077,"byte_end":25110,"line_start":612,"line_end":612,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25115,"byte_end":25118,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25123,"byte_end":25194,"line_start":614,"line_end":614,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25199,"byte_end":25270,"line_start":615,"line_end":615,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25275,"byte_end":25346,"line_start":616,"line_end":616,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25351,"byte_end":25360,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26118,"byte_end":26136,"line_start":636,"line_end":636,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25734,"byte_end":25818,"line_start":630,"line_end":630,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25823,"byte_end":25826,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25831,"byte_end":25916,"line_start":632,"line_end":632,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":25921,"byte_end":26006,"line_start":633,"line_end":633,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26011,"byte_end":26092,"line_start":634,"line_end":634,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26097,"byte_end":26106,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26771,"byte_end":26789,"line_start":654,"line_end":654,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26413,"byte_end":26471,"line_start":648,"line_end":648,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26476,"byte_end":26479,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26484,"byte_end":26569,"line_start":650,"line_end":650,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26574,"byte_end":26659,"line_start":651,"line_end":651,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26664,"byte_end":26745,"line_start":652,"line_end":652,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":26750,"byte_end":26759,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27430,"byte_end":27450,"line_start":672,"line_end":672,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27066,"byte_end":27124,"line_start":666,"line_end":666,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27129,"byte_end":27132,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27137,"byte_end":27224,"line_start":668,"line_end":668,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27229,"byte_end":27316,"line_start":669,"line_end":669,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27321,"byte_end":27404,"line_start":670,"line_end":670,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27409,"byte_end":27418,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":28091,"byte_end":28111,"line_start":690,"line_end":690,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27727,"byte_end":27785,"line_start":684,"line_end":684,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27790,"byte_end":27793,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27798,"byte_end":27885,"line_start":686,"line_end":686,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27890,"byte_end":27977,"line_start":687,"line_end":687,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":27982,"byte_end":28065,"line_start":688,"line_end":688,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":28070,"byte_end":28079,"line_start":689,"line_end":689,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1978},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":29950,"byte_end":29967,"line_start":754,"line_end":754,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":1979}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":29843,"byte_end":29910,"line_start":752,"line_end":752,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1366},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33067,"byte_end":33075,"line_start":873,"line_end":873,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33007,"byte_end":33056,"line_start":872,"line_end":872,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33193,"byte_end":33197,"line_start":875,"line_end":875,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"fn (&self) -> i32","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33089,"byte_end":33185,"line_start":874,"line_end":874,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33406,"byte_end":33413,"line_start":880,"line_end":880,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33218,"byte_end":33291,"line_start":877,"line_end":877,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33296,"byte_end":33384,"line_start":878,"line_end":878,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33389,"byte_end":33398,"line_start":879,"line_end":879,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33708,"byte_end":33713,"line_start":892,"line_end":892,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"fn (&self) -> u32","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33601,"byte_end":33646,"line_start":889,"line_end":889,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33651,"byte_end":33654,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33659,"byte_end":33700,"line_start":891,"line_end":891,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33841,"byte_end":33847,"line_start":897,"line_end":897,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33734,"byte_end":33779,"line_start":894,"line_end":894,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33784,"byte_end":33787,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33792,"byte_end":33833,"line_start":896,"line_end":896,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34018,"byte_end":34021,"line_start":902,"line_end":902,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"fn (&self) -> u32","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33868,"byte_end":33913,"line_start":899,"line_end":899,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33918,"byte_end":33921,"line_start":900,"line_end":900,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33926,"byte_end":34010,"line_start":901,"line_end":901,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34192,"byte_end":34196,"line_start":907,"line_end":907,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34042,"byte_end":34087,"line_start":904,"line_end":904,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34092,"byte_end":34095,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34100,"byte_end":34184,"line_start":906,"line_end":906,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34365,"byte_end":34372,"line_start":912,"line_end":912,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"fn (&self) -> u32","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34217,"byte_end":34261,"line_start":909,"line_end":909,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34266,"byte_end":34269,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34274,"byte_end":34357,"line_start":911,"line_end":911,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34541,"byte_end":34549,"line_start":917,"line_end":917,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"fn (&self) -> u32","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34393,"byte_end":34437,"line_start":914,"line_end":914,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34442,"byte_end":34445,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34450,"byte_end":34533,"line_start":916,"line_end":916,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34606,"byte_end":34613,"line_start":920,"line_end":920,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"fn (&self) -> Weekday","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34570,"byte_end":34598,"line_start":919,"line_end":919,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34671,"byte_end":34679,"line_start":923,"line_end":923,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"fn (&self) -> IsoWeek","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34638,"byte_end":34663,"line_start":922,"line_end":922,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34837,"byte_end":34846,"line_start":928,"line_end":928,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"fn (&self, year: i32) -> Option<Self>","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34704,"byte_end":34755,"line_start":925,"line_end":925,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34760,"byte_end":34763,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34768,"byte_end":34829,"line_start":927,"line_end":927,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35039,"byte_end":35049,"line_start":933,"line_end":933,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"fn (&self, month: u32) -> Option<Self>","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34887,"byte_end":34957,"line_start":930,"line_end":930,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34962,"byte_end":34965,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":34970,"byte_end":35031,"line_start":932,"line_end":932,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35243,"byte_end":35254,"line_start":938,"line_end":938,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"fn (&self, month0: u32) -> Option<Self>","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35091,"byte_end":35161,"line_start":935,"line_end":935,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35166,"byte_end":35169,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35174,"byte_end":35235,"line_start":937,"line_end":937,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35449,"byte_end":35457,"line_start":943,"line_end":943,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"fn (&self, day: u32) -> Option<Self>","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35297,"byte_end":35367,"line_start":940,"line_end":940,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35372,"byte_end":35375,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35380,"byte_end":35441,"line_start":942,"line_end":942,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35649,"byte_end":35658,"line_start":948,"line_end":948,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"fn (&self, day0: u32) -> Option<Self>","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35497,"byte_end":35567,"line_start":945,"line_end":945,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35572,"byte_end":35575,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35580,"byte_end":35641,"line_start":947,"line_end":947,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35850,"byte_end":35862,"line_start":953,"line_end":953,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"fn (&self, ordinal: u32) -> Option<Self>","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35699,"byte_end":35768,"line_start":950,"line_end":950,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35773,"byte_end":35776,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35781,"byte_end":35842,"line_start":952,"line_end":952,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36057,"byte_end":36070,"line_start":958,"line_end":958,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"fn (&self, ordinal0: u32) -> Option<Self>","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35906,"byte_end":35975,"line_start":955,"line_end":955,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35980,"byte_end":35983,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":35988,"byte_end":36049,"line_start":957,"line_end":957,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36629,"byte_end":36645,"line_start":972,"line_end":972,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"fn (&self) -> i32","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36115,"byte_end":36209,"line_start":960,"line_end":960,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36214,"byte_end":36217,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36222,"byte_end":36236,"line_start":962,"line_end":962,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36241,"byte_end":36244,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36249,"byte_end":36256,"line_start":964,"line_end":964,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36261,"byte_end":36299,"line_start":965,"line_end":965,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36304,"byte_end":36307,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36312,"byte_end":36388,"line_start":967,"line_end":967,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36393,"byte_end":36462,"line_start":968,"line_end":968,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36467,"byte_end":36534,"line_start":969,"line_end":969,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36539,"byte_end":36609,"line_start":970,"line_end":970,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":36614,"byte_end":36621,"line_start":971,"line_end":971,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1385},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37303,"byte_end":37311,"line_start":991,"line_end":991,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37243,"byte_end":37292,"line_start":990,"line_end":990,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37374,"byte_end":37378,"line_start":993,"line_end":993,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"fn (&self) -> u32","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37325,"byte_end":37366,"line_start":992,"line_end":992,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37529,"byte_end":37535,"line_start":998,"line_end":998,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"fn (&self) -> (bool, u32)","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37399,"byte_end":37460,"line_start":995,"line_end":995,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37465,"byte_end":37507,"line_start":996,"line_end":996,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37512,"byte_end":37521,"line_start":997,"line_end":997,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37779,"byte_end":37785,"line_start":1008,"line_end":1008,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"fn (&self) -> u32","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37728,"byte_end":37771,"line_start":1007,"line_end":1007,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37857,"byte_end":37863,"line_start":1011,"line_end":1011,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"fn (&self) -> u32","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37806,"byte_end":37849,"line_start":1010,"line_end":1010,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38106,"byte_end":38116,"line_start":1016,"line_end":1016,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"fn (&self) -> u32","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37884,"byte_end":37954,"line_start":1013,"line_end":1013,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37959,"byte_end":38019,"line_start":1014,"line_end":1014,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38024,"byte_end":38098,"line_start":1015,"line_end":1015,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38270,"byte_end":38279,"line_start":1021,"line_end":1021,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"fn (&self, hour: u32) -> Option<Self>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38137,"byte_end":38188,"line_start":1018,"line_end":1018,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38193,"byte_end":38196,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38201,"byte_end":38262,"line_start":1020,"line_end":1020,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38455,"byte_end":38466,"line_start":1026,"line_end":1026,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"fn (&self, min: u32) -> Option<Self>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38320,"byte_end":38373,"line_start":1023,"line_end":1023,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38378,"byte_end":38381,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38386,"byte_end":38447,"line_start":1025,"line_end":1025,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38753,"byte_end":38764,"line_start":1033,"line_end":1033,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"fn (&self, sec: u32) -> Option<Self>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38506,"byte_end":38559,"line_start":1028,"line_end":1028,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38564,"byte_end":38567,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38572,"byte_end":38633,"line_start":1030,"line_end":1030,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38638,"byte_end":38690,"line_start":1031,"line_end":1031,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38695,"byte_end":38745,"line_start":1032,"line_end":1032,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39097,"byte_end":39112,"line_start":1040,"line_end":1040,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"fn (&self, nano: u32) -> Option<Self>","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38804,"byte_end":38883,"line_start":1035,"line_end":1035,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38888,"byte_end":38891,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38896,"byte_end":38957,"line_start":1037,"line_end":1037,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":38962,"byte_end":39022,"line_start":1038,"line_end":1038,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39027,"byte_end":39089,"line_start":1039,"line_end":1039,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39241,"byte_end":39266,"line_start":1044,"line_end":1044,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"fn (&self) -> u32","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39153,"byte_end":39219,"line_start":1042,"line_end":1042,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":39224,"byte_end":39233,"line_start":1043,"line_end":1043,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45791,"byte_end":45802,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":46983,"byte_end":46994,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50210,"byte_end":50221,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65570,"byte_end":65581,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":68138,"byte_end":68149,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":68701,"byte_end":68712,"line_start":117,"line_end":117,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":68781,"byte_end":68792,"line_start":121,"line_end":121,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":69286,"byte_end":69297,"line_start":135,"line_end":135,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70050,"byte_end":70059,"line_start":153,"line_end":153,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70247,"byte_end":70256,"line_start":162,"line_end":162,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70445,"byte_end":70458,"line_start":171,"line_end":171,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70654,"byte_end":70667,"line_start":180,"line_end":180,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70878,"byte_end":70886,"line_start":189,"line_end":189,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":71098,"byte_end":71106,"line_start":198,"line_end":198,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74985,"byte_end":74990,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":75881,"byte_end":75886,"line_start":107,"line_end":107,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80152,"byte_end":80155,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":81214,"byte_end":81217,"line_start":63,"line_end":63,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":81701,"byte_end":81704,"line_start":79,"line_end":79,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":81788,"byte_end":81791,"line_start":83,"line_end":83,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":81895,"byte_end":81898,"line_start":87,"line_end":87,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":88153,"byte_end":88162,"line_start":111,"line_end":111,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":88939,"byte_end":88948,"line_start":144,"line_end":144,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":97341,"byte_end":97343,"line_start":281,"line_end":281,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":99377,"byte_end":99379,"line_start":366,"line_end":366,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":99923,"byte_end":99926,"line_start":382,"line_end":382,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":101799,"byte_end":101802,"line_start":463,"line_end":463,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":119507,"byte_end":119516,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155807,"byte_end":155816,"line_start":1018,"line_end":1018,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168148,"byte_end":168157,"line_start":1385,"line_end":1385,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168376,"byte_end":168385,"line_start":1394,"line_end":1394,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169800,"byte_end":169809,"line_start":1427,"line_end":1427,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170028,"byte_end":170037,"line_start":1436,"line_end":1436,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":171293,"byte_end":171302,"line_start":1470,"line_end":1470,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172295,"byte_end":172304,"line_start":1501,"line_end":1501,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173563,"byte_end":173572,"line_start":1536,"line_end":1536,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174162,"byte_end":174171,"line_start":1556,"line_end":1556,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204272,"byte_end":204279,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":206825,"byte_end":206832,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215689,"byte_end":215698,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":516},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239971,"byte_end":239980,"line_start":785,"line_end":785,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247194,"byte_end":247203,"line_start":991,"line_end":991,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250210,"byte_end":250219,"line_start":1056,"line_end":1056,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250400,"byte_end":250409,"line_start":1065,"line_end":1065,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253012,"byte_end":253021,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253202,"byte_end":253211,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":541}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":255746,"byte_end":255755,"line_start":1193,"line_end":1193,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257143,"byte_end":257152,"line_start":1230,"line_end":1230,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":259005,"byte_end":259014,"line_start":1280,"line_end":1280,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":259774,"byte_end":259783,"line_start":1303,"line_end":1303,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280576,"byte_end":280589,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307022,"byte_end":307035,"line_start":698,"line_end":698,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318091,"byte_end":318104,"line_start":1016,"line_end":1016,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":645},{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324365,"byte_end":324378,"line_start":1189,"line_end":1189,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":326993,"byte_end":327006,"line_start":1251,"line_end":1251,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":327237,"byte_end":327250,"line_start":1260,"line_end":1260,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":329761,"byte_end":329774,"line_start":1321,"line_end":1321,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":330005,"byte_end":330018,"line_start":1330,"line_end":1330,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":331956,"byte_end":331969,"line_start":1383,"line_end":1383,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":333177,"byte_end":333190,"line_start":1419,"line_end":1419,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":334286,"byte_end":334299,"line_start":1450,"line_end":1450,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":668}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":335037,"byte_end":335050,"line_start":1472,"line_end":1472,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373737,"byte_end":373741,"line_start":54,"line_end":54,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381862,"byte_end":381866,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382708,"byte_end":382712,"line_start":277,"line_end":277,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384403,"byte_end":384407,"line_start":325,"line_end":325,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384487,"byte_end":384491,"line_start":326,"line_end":326,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384596,"byte_end":384600,"line_start":328,"line_end":328,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384708,"byte_end":384712,"line_start":332,"line_end":332,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384756,"byte_end":384760,"line_start":335,"line_end":335,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384912,"byte_end":384916,"line_start":341,"line_end":341,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385039,"byte_end":385043,"line_start":345,"line_end":345,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385170,"byte_end":385174,"line_start":349,"line_end":349,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385398,"byte_end":385402,"line_start":358,"line_end":358,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":803},{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385623,"byte_end":385627,"line_start":367,"line_end":367,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385812,"byte_end":385816,"line_start":376,"line_end":376,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385990,"byte_end":385994,"line_start":382,"line_end":382,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388518,"byte_end":388526,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394646,"byte_end":394654,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":395158,"byte_end":395166,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":395576,"byte_end":395584,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":396034,"byte_end":396042,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":396488,"byte_end":396496,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":396932,"byte_end":396940,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":397659,"byte_end":397667,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400359,"byte_end":400367,"line_start":384,"line_end":384,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":909},{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404879,"byte_end":404887,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406600,"byte_end":406608,"line_start":540,"line_end":540,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407584,"byte_end":407592,"line_start":568,"line_end":568,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407672,"byte_end":407680,"line_start":569,"line_end":569,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407789,"byte_end":407797,"line_start":571,"line_end":571,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407917,"byte_end":407925,"line_start":575,"line_end":575,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407999,"byte_end":408007,"line_start":578,"line_end":578,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408746,"byte_end":408754,"line_start":599,"line_end":599,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408889,"byte_end":408897,"line_start":603,"line_end":603,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409028,"byte_end":409036,"line_start":607,"line_end":607,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409272,"byte_end":409280,"line_start":616,"line_end":616,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409517,"byte_end":409525,"line_start":625,"line_end":625,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409714,"byte_end":409722,"line_start":634,"line_end":634,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409896,"byte_end":409904,"line_start":640,"line_end":640,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410092,"byte_end":410100,"line_start":646,"line_end":646,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410324,"byte_end":410332,"line_start":655,"line_end":655,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":998},{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410577,"byte_end":410585,"line_start":664,"line_end":664,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411220,"byte_end":411228,"line_start":683,"line_end":683,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411427,"byte_end":411437,"line_start":690,"line_end":690,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477088,"byte_end":477103,"line_start":132,"line_end":132,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477193,"byte_end":477208,"line_start":138,"line_end":138,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477314,"byte_end":477329,"line_start":144,"line_end":144,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477355,"byte_end":477370,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":484530,"byte_end":484540,"line_start":322,"line_end":322,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1051}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":485289,"byte_end":485299,"line_start":337,"line_end":337,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":506172,"byte_end":506178,"line_start":125,"line_end":125,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1142}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":506674,"byte_end":506680,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":584775,"byte_end":584783,"line_start":395,"line_end":395,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":619913,"byte_end":619926,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":620245,"byte_end":620258,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499582,"byte_end":499595,"line_start":631,"line_end":631,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1326},{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":500431,"byte_end":500444,"line_start":647,"line_end":647,"column_start":77,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501333,"byte_end":501340,"line_start":679,"line_end":679,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":636036,"byte_end":636037,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24410,"byte_end":24417,"line_start":593,"line_end":593,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":28408,"byte_end":28415,"line_start":703,"line_end":703,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1359}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":29063,"byte_end":29070,"line_start":720,"line_end":720,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":30009,"byte_end":30026,"line_start":758,"line_end":758,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":20687,"byte_end":20693,"line_start":472,"line_end":472,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":60}},{"kind":"Mod","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":21980,"byte_end":21986,"line_start":514,"line_end":514,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1009}},{"kind":"Mod","span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":498888,"byte_end":498896,"line_start":613,"line_end":613,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1298}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":45791,"byte_end":45802,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":46983,"byte_end":46994,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50210,"byte_end":50221,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50683,"byte_end":50688,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1889},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50691,"byte_end":50696,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1594},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50704,"byte_end":50709,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":5983},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":50999,"byte_end":51004,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1889},"to":{"krate":0,"index":95}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/mod.rs","byte_start":51007,"byte_end":51012,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1594},"to":{"krate":0,"index":95}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":65570,"byte_end":65581,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1430},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":68138,"byte_end":68149,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1430},"to":{"krate":0,"index":95}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":68701,"byte_end":68712,"line_start":117,"line_end":117,"column_start":17,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1430},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":68781,"byte_end":68792,"line_start":121,"line_end":121,"column_start":21,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1430},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":69286,"byte_end":69297,"line_start":135,"line_end":135,"column_start":23,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1430},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70050,"byte_end":70059,"line_start":153,"line_end":153,"column_start":27,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":1947}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70247,"byte_end":70256,"line_start":162,"line_end":162,"column_start":27,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70445,"byte_end":70458,"line_start":171,"line_end":171,"column_start":27,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":1947}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70654,"byte_end":70667,"line_start":180,"line_end":180,"column_start":27,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":70878,"byte_end":70886,"line_start":189,"line_end":189,"column_start":41,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1947}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/fixed.rs","byte_start":71098,"byte_end":71106,"line_start":198,"line_end":198,"column_start":41,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":74985,"byte_end":74990,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/local.rs","byte_start":75881,"byte_end":75886,"line_start":107,"line_end":107,"column_start":19,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1445},"to":{"krate":0,"index":95}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":80152,"byte_end":80155,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":81214,"byte_end":81217,"line_start":63,"line_end":63,"column_start":19,"column_end":22},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1452},"to":{"krate":0,"index":95}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":81701,"byte_end":81704,"line_start":79,"line_end":79,"column_start":17,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1452},"to":{"krate":0,"index":93}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":81788,"byte_end":81791,"line_start":83,"line_end":83,"column_start":21,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1452},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/offset/utc.rs","byte_start":81895,"byte_end":81898,"line_start":87,"line_end":87,"column_start":23,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1452},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":88153,"byte_end":88162,"line_start":111,"line_end":111,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":88939,"byte_end":88948,"line_start":144,"line_end":144,"column_start":21,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1463},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":97341,"byte_end":97343,"line_start":281,"line_end":281,"column_start":6,"column_end":8},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":99377,"byte_end":99379,"line_start":366,"line_end":366,"column_start":21,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1476},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":99923,"byte_end":99926,"line_start":382,"line_end":382,"column_start":6,"column_end":9},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/internals.rs","byte_start":101799,"byte_end":101802,"line_start":463,"line_end":463,"column_start":21,"column_end":24},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1492},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":119507,"byte_end":119516,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1508},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":155807,"byte_end":155816,"line_start":1018,"line_end":1018,"column_start":19,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1508},"to":{"krate":0,"index":1366}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168148,"byte_end":168157,"line_start":1385,"line_end":1385,"column_start":27,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":1947}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":168376,"byte_end":168385,"line_start":1394,"line_end":1394,"column_start":33,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":1980}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":169800,"byte_end":169809,"line_start":1427,"line_end":1427,"column_start":27,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":170028,"byte_end":170037,"line_start":1436,"line_end":1436,"column_start":33,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":1984}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":171293,"byte_end":171302,"line_start":1470,"line_end":1470,"column_start":25,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":172295,"byte_end":172304,"line_start":1501,"line_end":1501,"column_start":21,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":173563,"byte_end":173572,"line_start":1536,"line_end":1536,"column_start":23,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/date.rs","byte_start":174162,"byte_end":174171,"line_start":1556,"line_end":1556,"column_start":23,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1508},"to":{"krate":2,"index":7500}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":204272,"byte_end":204279,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/isoweek.rs","byte_start":206825,"byte_end":206832,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1531},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":215689,"byte_end":215698,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":239971,"byte_end":239980,"line_start":785,"line_end":785,"column_start":19,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1551},"to":{"krate":0,"index":1385}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":247194,"byte_end":247203,"line_start":991,"line_end":991,"column_start":21,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":6171}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250210,"byte_end":250219,"line_start":1056,"line_end":1056,"column_start":27,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":1947}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":250400,"byte_end":250409,"line_start":1065,"line_end":1065,"column_start":33,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":1980}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253012,"byte_end":253021,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":253202,"byte_end":253211,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":1984}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":255746,"byte_end":255755,"line_start":1193,"line_end":1193,"column_start":25,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":257143,"byte_end":257152,"line_start":1230,"line_end":1230,"column_start":21,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":259005,"byte_end":259014,"line_start":1280,"line_end":1280,"column_start":23,"column_end":32},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/time.rs","byte_start":259774,"byte_end":259783,"line_start":1303,"line_end":1303,"column_start":23,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1551},"to":{"krate":2,"index":7500}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":280576,"byte_end":280589,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1576},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":307022,"byte_end":307035,"line_start":698,"line_end":698,"column_start":19,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1576},"to":{"krate":0,"index":1366}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":318091,"byte_end":318104,"line_start":1016,"line_end":1016,"column_start":19,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1576},"to":{"krate":0,"index":1385}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":324365,"byte_end":324378,"line_start":1189,"line_end":1189,"column_start":21,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":6171}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":326993,"byte_end":327006,"line_start":1251,"line_end":1251,"column_start":27,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":1947}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":327237,"byte_end":327250,"line_start":1260,"line_end":1260,"column_start":33,"column_end":46},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":1980}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":329761,"byte_end":329774,"line_start":1321,"line_end":1321,"column_start":27,"column_end":40},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":330005,"byte_end":330018,"line_start":1330,"line_end":1330,"column_start":33,"column_end":46},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":1984}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":331956,"byte_end":331969,"line_start":1383,"line_end":1383,"column_start":29,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":333177,"byte_end":333190,"line_start":1419,"line_end":1419,"column_start":21,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":334286,"byte_end":334299,"line_start":1450,"line_end":1450,"column_start":23,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/naive/datetime.rs","byte_start":335037,"byte_end":335050,"line_start":1472,"line_end":1472,"column_start":23,"column_end":36},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1576},"to":{"krate":2,"index":7500}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":373737,"byte_end":373741,"line_start":54,"line_end":54,"column_start":20,"column_end":24},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1601},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":381862,"byte_end":381866,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1601},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":382708,"byte_end":382712,"line_start":277,"line_end":277,"column_start":33,"column_end":37},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1601},"to":{"krate":0,"index":1366}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384403,"byte_end":384407,"line_start":325,"line_end":325,"column_start":29,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1894}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384487,"byte_end":384491,"line_start":326,"line_end":326,"column_start":36,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1884}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384596,"byte_end":384600,"line_start":328,"line_end":328,"column_start":60,"column_end":64},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1620}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384708,"byte_end":384712,"line_start":332,"line_end":332,"column_start":27,"column_end":31},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384756,"byte_end":384760,"line_start":335,"line_end":335,"column_start":35,"column_end":39},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1657}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":384912,"byte_end":384916,"line_start":341,"line_end":341,"column_start":28,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1646}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385039,"byte_end":385043,"line_start":345,"line_end":345,"column_start":35,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":6171}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385170,"byte_end":385174,"line_start":349,"line_end":349,"column_start":41,"column_end":45},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1947}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385398,"byte_end":385402,"line_start":358,"line_end":358,"column_start":41,"column_end":45},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385623,"byte_end":385627,"line_start":367,"line_end":367,"column_start":38,"column_end":42},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385812,"byte_end":385816,"line_start":376,"line_end":376,"column_start":35,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/date.rs","byte_start":385990,"byte_end":385994,"line_start":382,"line_end":382,"column_start":37,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":388518,"byte_end":388526,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":394646,"byte_end":394654,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1808}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":395158,"byte_end":395166,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1808}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":395576,"byte_end":395584,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1808}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":396034,"byte_end":396042,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1808}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":396488,"byte_end":396496,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1808}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":396932,"byte_end":396940,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1808}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":397659,"byte_end":397667,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":400359,"byte_end":400367,"line_start":384,"line_end":384,"column_start":20,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":404879,"byte_end":404887,"line_start":493,"line_end":493,"column_start":33,"column_end":41},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1632},"to":{"krate":0,"index":1366}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":406600,"byte_end":406608,"line_start":540,"line_end":540,"column_start":33,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1632},"to":{"krate":0,"index":1385}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407584,"byte_end":407592,"line_start":568,"line_end":568,"column_start":29,"column_end":37},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1894}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407672,"byte_end":407680,"line_start":569,"line_end":569,"column_start":36,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1884}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407789,"byte_end":407797,"line_start":571,"line_end":571,"column_start":64,"column_end":72},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1620}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407917,"byte_end":407925,"line_start":575,"line_end":575,"column_start":27,"column_end":35},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":407999,"byte_end":408007,"line_start":578,"line_end":578,"column_start":65,"column_end":73},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1657}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408746,"byte_end":408754,"line_start":599,"line_end":599,"column_start":28,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1646}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":408889,"byte_end":408897,"line_start":603,"line_end":603,"column_start":35,"column_end":43},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":6171}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409028,"byte_end":409036,"line_start":607,"line_end":607,"column_start":41,"column_end":49},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1947}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409272,"byte_end":409280,"line_start":616,"line_end":616,"column_start":41,"column_end":49},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409517,"byte_end":409525,"line_start":625,"line_end":625,"column_start":42,"column_end":50},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1952}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409714,"byte_end":409722,"line_start":634,"line_end":634,"column_start":35,"column_end":43},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":409896,"byte_end":409904,"line_start":640,"line_end":640,"column_start":37,"column_end":45},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410092,"byte_end":410100,"line_start":646,"line_end":646,"column_start":23,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":7500}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410324,"byte_end":410332,"line_start":655,"line_end":655,"column_start":23,"column_end":31},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":7500}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":410577,"byte_end":410585,"line_start":664,"line_end":664,"column_start":27,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1808}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411220,"byte_end":411228,"line_start":683,"line_end":683,"column_start":27,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":1808}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/datetime.rs","byte_start":411427,"byte_end":411437,"line_start":690,"line_end":690,"column_start":43,"column_end":53},"kind":{"Impl":{"id":104}},"from":{"krate":1,"index":7662},"to":{"krate":2,"index":1808}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477088,"byte_end":477103,"line_start":132,"line_end":132,"column_start":16,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":1594}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477193,"byte_end":477208,"line_start":138,"line_end":138,"column_start":20,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":1620}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477314,"byte_end":477329,"line_start":144,"line_end":144,"column_start":13,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":477355,"byte_end":477370,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1032},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":484530,"byte_end":484540,"line_start":322,"line_end":322,"column_start":23,"column_end":33},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1842},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":485289,"byte_end":485299,"line_start":337,"line_end":337,"column_start":16,"column_end":26},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1842},"to":{"krate":1,"index":1632}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":506172,"byte_end":506178,"line_start":125,"line_end":125,"column_start":18,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1883},"to":{"krate":2,"index":1875}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parsed.rs","byte_start":506674,"byte_end":506680,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/parse.rs","byte_start":584775,"byte_end":584783,"line_start":395,"line_end":395,"column_start":23,"column_end":31},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":7500}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":619913,"byte_end":619926,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1914},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/strftime.rs","byte_start":620245,"byte_end":620258,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1914},"to":{"krate":2,"index":4778}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":499582,"byte_end":499595,"line_start":631,"line_end":631,"column_start":60,"column_end":73},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1933},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":500431,"byte_end":500444,"line_start":647,"line_end":647,"column_start":77,"column_end":90},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1933},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/format/mod.rs","byte_start":501333,"byte_end":501340,"line_start":679,"line_end":679,"column_start":18,"column_end":25},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1942},"to":{"krate":2,"index":7500}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/round.rs","byte_start":636036,"byte_end":636037,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1347},"to":{"krate":0,"index":1343}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":24410,"byte_end":24417,"line_start":593,"line_end":593,"column_start":6,"column_end":13},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1942},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":28408,"byte_end":28415,"line_start":703,"line_end":703,"column_start":23,"column_end":30},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1942},"to":{"krate":2,"index":5988}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":29063,"byte_end":29070,"line_start":720,"line_end":720,"column_start":36,"column_end":43},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1942},"to":{"krate":18,"index":143}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":30009,"byte_end":30026,"line_start":758,"line_end":758,"column_start":21,"column_end":38},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1978},"to":{"krate":2,"index":5983}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":33077,"byte_end":33082,"line_start":873,"line_end":873,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1889},"to":{"krate":0,"index":1366}},{"span":{"file_name":"/home/lcornelius/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.11/src/lib.rs","byte_start":37313,"byte_end":37318,"line_start":991,"line_end":991,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1889},"to":{"krate":0,"index":1385}}]}